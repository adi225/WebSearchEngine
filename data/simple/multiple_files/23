this article includes a list of references but its sources remain unclear because it has insufficient inline citations please help to improve this article by introducing more precise citations march 2010 in computer science the analysis of algorithms is the determination of the number of resources such as time and storage necessary to execute them most algorithms are designed to work with inputs of arbitrary length usually the efficiency or running time of an algorithm is stated as a function relating the input length to the number of steps time complexity or storage locations space complexity algorithm analysis is an important part of a broader computational complexity theory which provides theoretical estimates for the resources needed by any algorithm which solves a given computational problem these estimates provide an insight into reasonable directions of search for efficient algorithms in theoretical analysis of algorithms it is common to estimate their complexity in the asymptotic sense i e to estimate the complexity function for arbitrarily large input big o notation big omega notation and big theta notation are used to this end for instance binary search is said to run in a number of steps proportional to the logarithm of the length of the list being searched or in o log n colloquially in logarithmic time usually asymptotic estimates are used because different implementations of the same algorithm may differ in efficiency however the efficiencies of any two reasonable implementations of a given algorithm are related by a constant multiplicative factor called a hidden constant exact not asymptotic measures of efficiency can sometimes be computed but they usually require certain assumptions concerning the particular implementation of the algorithm called model of computation a model of computation may be defined in terms of an abstract computer e g turing machine and or by postulating that certain operations are executed in unit time for example if the sorted list to which we apply binary search has n elements and we can guarantee that each lookup of an element in the list can be done in unit time then at most log 2 n 1 time units are needed to return an answer contents 1 cost models 2 run time analysis 2 1 shortcomings of empirical metrics 2 2 orders of growth 2 3 empirical orders of growth 2 4 evaluating run time complexity 2 5 growth rate analysis of other resources 3 relevance 4 see also 5 notes 6 references edit cost models time efficiency estimates depend on what we define to be a step for the analysis to correspond usefully to the actual execution time the time required to perform a step must be guaranteed to be bounded above by a constant one must be careful here for instance some analyses count an addition of two numbers as one step this assumption may not be warranted in certain contexts for example if the numbers involved in a computation may be arbitrarily large the time required by a single addition can no longer be assumed to be constant two cost models are generally used 1 2 3 4 5 the uniform cost model also called uniform cost measurement and similar variations assigns a constant cost to every machine operation regardless of the size of the numbers involved the logarithmic cost model also called logarithmic cost measurement and variations thereof assigns a cost to every machine operation proportional to the number of bits involved the latter is more cumbersome to use so it s only employed when necessary for example in the analysis of arbitrary precision arithmetic algorithms like those used in cryptography a key point which is often overlooked is that published lower bounds for problems are often given for a model of computation that is more restricted than the set of operations that you could use in practice and therefore there are algorithms that are faster than what would naively be thought possible 6 edit run time analysis run time analysis is a theoretical classification that estimates and anticipates the increase in running time or run time of an algorithm as its input size usually denoted as n increases run time efficiency is a topic of great interest in computer science a program can take seconds hours or even years to finish executing depending on which algorithm it implements see also performance analysis which is the analysis of an algorithm s run time in practice edit shortcomings of empirical metrics since algorithms are platform independent i e a given algorithm can be implemented in an arbitrary programming language on an arbitrary computer running an arbitrary operating system there are significant drawbacks to using an empirical approach to gauge the comparative performance of a given set of algorithms take as an example a program that looks up a specific entry in a sorted list of size n suppose this program were implemented on computer a a state of the art machine using a linear search algorithm and on computer b a much slower machine using a binary search algorithm benchmark testing on the two computers running their respective programs might look something like the following n list size computer a run time in nanoseconds computer b run time in nanoseconds 15 7 100 000 65 32 150 000 250 125 200 000 1 000 500 250 000 based on these metrics it would be easy to jump to the conclusion that computer a is running an algorithm that is far superior in efficiency to that of computer b however if the size of the input list is increased to a sufficient number that conclusion is dramatically demonstrated to be in error n list size computer a run time in nanoseconds computer b run time in nanoseconds 15 7 100 000 65 32 150 000 250 125 200 000 1 000 500 250 000 1 000 000 500 000 500 000 4 000 000 2 000 000 550 000 16 000 000 8 000 000 600 000 63 072 10 12 31 536 10 12 ns or 1 year 1 375 000 ns or 1 375 milliseconds computer a running the linear search program exhibits a linear growth rate the program s run time is directly proportional to its input size doubling the input size doubles the run time quadrupling the input size quadruples the run time and so forth on the other hand computer b running the binary search program exhibits a logarithmic growth rate doubling the input size only increases the run time by a constant amount in this example 25 000 ns even though computer a is ostensibly a faster machine computer b will inevitably surpass computer a in run time because it s running an algorithm with a much slower growth rate edit orders of growth main article big o notation informally an algorithm can be said to exhibit a growth rate on the order of a mathematical function if beyond a certain input size n the function f n times a positive constant provides an upper bound or limit for the run time of that algorithm in other words for a given input size n greater than some n 0 and a constant c the running time of that algorithm will never be larger than c f n this concept is frequently expressed using big o notation for example since the run time of insertion sort grows quadratically as its input size increases insertion sort can be said to be of order o n big o notation is a convenient way to express the worst case scenario for a given algorithm although it can also be used to express the average case for example the worst case scenario for quicksort is o n but the average case run time is o n log n 7 edit empirical orders of growth assuming the execution time follows power rule k n a the coefficient a can be found 8 by taking empirical measurements of run time at some problem size points and calculating so that if the order of growth indeed follows the power rule the empirical value of a will stay constant at different ranges and if not it will change but still could serve for comparison of any two given algorithms as to their empirical local orders of growth behaviour applied to the above table n list size computer a run time in nanoseconds local order of growth n computer b run time in nanoseconds local order of growth n 15 7 100 000 65 32 1 04 150 000 0 28 250 125 1 01 200 000 0 21 1 000 500 1 00 250 000 0 16 1 000 000 500 000 1 00 500 000 0 10 4 000 000 2 000 000 1 00 550 000 0 07 16 000 000 8 000 000 1 00 600 000 0 06 it is clearly seen that the first algorithm exhibits a linear order of growth indeed following the power rule the empirical values for the second one are diminishing rapidly suggesting it follows another rule of growth and in any case has much lower local orders of growth and improving further still empirically than the first one edit evaluating run time complexity the run time complexity for the worst case scenario of a given algorithm can sometimes be evaluated by examining the structure of the algorithm and making some simplifying assumptions consider the following pseudocode 1 get a positive integer from input 2 if n gt 10 3 print this might take a while 4 for i 1 to n 5 for j 1 to i 6 print i j 7 print done a given computer will take a discrete amount of time to execute each of the instructions involved with carrying out this algorithm the specific amount of time to carry out a given instruction will vary depending on which instruction is being executed and which computer is executing it but on a conventional computer this amount will be deterministic 9 say that the actions carried out in step 1 are considered to consume time t 1 step 2 uses time t 2 and so forth in the algorithm above steps 1 2 and 7 will only be run once for a worst case evaluation it should be assumed that step 3 will be run as well thus the total amount of time to run steps 1 3 and step 7 is the loops in steps 4 5 and 6 are trickier to evaluate the outer loop test in step 4 will execute n 1 times note that an extra step is required to terminate the for loop hence n 1 and not n executions which will consume t 4 n 1 time the inner loop on the other hand is governed by the value of i which iterates from 1 to n on the first pass through the outer loop j iterates from 1 to 1 the inner loop makes one pass so running the inner loop body step 6 consumes t 6 time and the inner loop test step 5 consumes 2t 5 time during the next pass through the outer loop j iterates from 1 to 2 the inner loop makes two passes so running the inner loop body step 6 consumes 2t 6 time and the inner loop test step 5 consumes 3t 5 time altogether the total time required to run the inner loop body can be expressed as an arithmetic progression which can be factored 10 as the total time required to run the inner loop test can be evaluated similarly which can be factored as therefore the total running time for this algorithm is which reduces to as a rule of thumb one can assume that the highest order term in any given function dominates its rate of growth and thus defines its run time order in this example n is the highest order term so one can conclude that f n o n formally this can be proven as follows prove that for n 0 let k be a constant greater than or equal to t 1 t 7 for n 1 therefore for a more elegant approach to analyzing this algorithm would be to declare that t 1 t 7 are all equal to one unit of time greater than or equal to t 1 t 7 clarification needed this would mean that the algorithm s running time breaks down as follows 11 for n 1 edit growth rate analysis of other resources the methodology of run time analysis can also be utilized for predicting other growth rates such as consumption of memory space as an example consider the following pseudocode which manages and reallocates memory usage by a program based on the size of a file which that program manages while file still open let n size of file for every 100 000 kilobytes of increase in file size double the amount of memory reserved in this instance as the file size n increases memory will be consumed at an exponential growth rate which is order o 2 n 12 edit relevance algorithm analysis is important in practice because the accidental or unintentional use of an inefficient algorithm can significantly impact system performance in time sensitive applications an algorithm taking too long to run can render its results outdated or useless an inefficient algorithm can also end up requiring an uneconomical amount of computing power or storage in order to run again rendering it practically useless edit see also amortized analysis asymptotic analysis asymptotic computational complexity best worst and average case big o notation computational complexity theory master theorem np complete numerical analysis polynomial time program optimization profiling computer programming smoothed analysis time complexity includes table of orders of growth for common algorithms edit notes alfred v aho john e hopcroft jeffrey d ullman 1974 the design and analysis of computer algorithms addison wesley pub co section 1 3 juraj hromkovi 2004 theoretical computer science introduction to automata computability complexity algorithmics randomization communication and cryptography springer pp 160 177 178 isbn 160 978 3 540 14015 3 http books google com books id kpnet n262qc amp pg pa177 giorgio ausiello 1999 complexity and approximation combinatorial optimization problems and their approximability properties springer pp 160 3 8 isbn 160 978 3 540 65431 5 http books google com books id yxxw90d9aumc amp pg pa3 wegener ingo 2005 complexity theory exploring the limits of efficient algorithms berlin new york springer verlag p 160 20 isbn 160 978 3 540 21045 0 http books google com books id u7dzsdsuylqc amp pg pa20 robert endre tarjan 1983 data structures and network algorithms siam pp 160 3 7 isbn 160 978 0 89871 187 5 http books google com books id jic7miqg x4c amp pg pa3 examples of the price of abstraction cstheory stackexchange com the term lg is often used as shorthand for log 2 how to avoid o abuse and bribes at the blog g del s lost letter and p np by r j lipton professor of computer science at georgia tech recounting idea by robert sedgewick however this is not the case with a quantum computer it can be proven by induction that this approach unlike the above approach neglects the constant time consumed by the loop tests which terminate their respective loops but it is trivial to prove that such omission does not affect the final result note that this is an extremely rapid and most likely unmanageable growth rate for consumption of memory resources edit references cormen thomas h leiserson charles e rivest ronald l amp stein clifford 2001 introduction to algorithms chapter 1 foundations second ed cambridge ma mit press and mcgraw hill pp 160 3 122 isbn 160 0 262 03293 7 sedgewick robert 1998 algorithms in c parts 1 4 fundamentals data structures sorting searching 3rd ed reading ma addison wesley professional isbn 160 978 0 201 31452 6 knuth donald the art of computer programming addison wesley greene daniel a knuth donald e 1982 mathematics for the analysis of algorithms second ed birkh user isbn 160 3 7643 3102 x goldreich oded 2010 computational complexity a conceptual perspective cambridge university press isbn 160 978 0 521 88473 0 