distributed computing is a field of computer science that studies distributed systems a distributed system consists of multiple computers that communicate through a computer network the computers interact with each other in order to achieve a common goal a computer program that runs in a distributed system is called a distributed program and distributed programming is the process of writing such programs 1 distributed computing also refers to the use of distributed systems to solve computational problems in distributed computing a problem is divided into many tasks each of which is solved by one or more computers 2 which communicate with each other by message passing 3 contents 1 introduction 1 1 parallel and distributed computing 2 history 3 applications 4 theoretical foundations 4 1 models 4 2 an example 4 3 complexity measures 4 4 other problems 4 5 properties of distributed systems 5 architectures 6 see also 7 notes 8 references 9 further reading 10 external links edit introduction the word distributed in terms such as distributed system distributed programming and distributed algorithm originally referred to computer networks where individual computers were physically distributed within some geographical area 4 the terms are nowadays used in a much wider sense even referring to autonomous processes that run on the same physical computer and interact with each other by message passing 3 while there is no single definition of a distributed system 5 the following defining properties are commonly used there are several autonomous computational entities each of which has its own local memory 6 the entities communicate with each other by message passing 7 in this article the computational entities are called computers or nodes a distributed system may have a common goal such as solving a large computational problem 8 alternatively each computer may have its own user with individual needs and the purpose of the distributed system is to coordinate the use of shared resources or provide communication services to the users 9 other typical properties of distributed systems include the following the system has to tolerate failures in individual computers 10 the structure of the system network topology network latency number of computers is not known in advance the system may consist of different kinds of computers and network links and the system may change during the execution of a distributed program 11 each computer has only a limited incomplete view of the system each computer may know only one part of the input 12 a b 160 a 160 distributed system c 160 a 160 parallel system edit parallel and distributed computing distributed systems are groups of networked computers which have the same goal for their work the terms concurrent computing parallel computing and distributed computing have a lot of overlap and no clear distinction exists between them 13 the same system may be characterised both as parallel and distributed the processors in a typical distributed system run concurrently in parallel 14 parallel computing may be seen as a particular tightly coupled form of distributed computing 15 and distributed computing may be seen as a loosely coupled form of parallel computing 5 nevertheless it is possible to roughly classify concurrent systems as parallel or distributed using the following criteria in parallel computing all processors may have access to a shared memory to exchange information between processors 16 in distributed computing each processor has its own private memory distributed memory information is exchanged by passing messages between the processors 17 the figure on the right illustrates the difference between distributed and parallel systems figure a is a schematic view of a typical distributed system as usual the system is represented as a network topology in which each node is a computer and each line connecting the nodes is a communication link figure b shows the same distributed system in more detail each computer has its own local memory and information can be exchanged only by passing messages from one node to another by using the available communication links figure c shows a parallel system in which each processor has a direct access to a shared memory the situation is further complicated by the traditional uses of the terms parallel and distributed algorithm that do not quite match the above definitions of parallel and distributed systems see the section theoretical foundations below for more detailed discussion nevertheless as a rule of thumb high performance parallel computation in a shared memory multiprocessor uses parallel algorithms while the coordination of a large scale distributed system uses distributed algorithms edit history the use of concurrent processes that communicate by message passing has its roots in operating system architectures studied in the 1960s 18 the first widespread distributed systems were local area networks such as ethernet that was invented in the 1970s 19 arpanet the predecessor of the internet was introduced in the late 1960s and arpanet e mail was invented in the early 1970s e mail became the most successful application of arpanet 20 and it is probably the earliest example of a large scale distributed application in addition to arpanet and its successor the internet other early worldwide computer networks included usenet and fidonet from 1980s both of which were used to support distributed discussion systems the study of distributed computing became its own branch of computer science in the late 1970s and early 1980s the first conference in the field symposium on principles of distributed computing podc dates back to 1982 and its european counterpart international symposium on distributed computing disc was first held in 1985 edit applications there are two main reasons for using distributed systems and distributed computing first the very nature of the application may require the use of a communication network that connects several computers for example data is produced in one physical location and it is needed in another location second there are many cases in which the use of a single computer would be possible in principle but the use of a distributed system is beneficial for practical reasons for example it may be more cost efficient to obtain the desired level of performance by using a cluster of several low end computers in comparison with a single high end computer a distributed system can be more reliable than a non distributed system as there is no single point of failure moreover a distributed system may be easier to expand and manage than a monolithic uniprocessor system 21 examples of distributed systems and applications of distributed computing include the following 22 telecommunication networks telephone networks and cellular networks computer networks such as the internet wireless sensor networks routing algorithms network applications world wide web and peer to peer networks massively multiplayer online games and virtual reality communities distributed databases and distributed database management systems network file systems distributed information processing systems such as banking systems and airline reservation systems real time process control aircraft control systems industrial control systems parallel computation scientific computing including cluster computing and grid computing and various volunteer computing projects see the list of distributed computing projects distributed rendering in computer graphics edit theoretical foundations main article distributed algorithm edit models many tasks that we would like to automate by using a computer are of question answer type we would like to ask a question and the computer should produce an answer in theoretical computer science such tasks are called computational problems formally a computational problem consists of instances together with a solution for each instance instances are questions that we can ask and solutions are desired answers to these questions theoretical computer science seeks to understand which computational problems can be solved by using a computer computability theory and how efficiently computational complexity theory traditionally it is said that a problem can be solved by using a computer if we can design an algorithm that produces a correct solution for any given instance such an algorithm can be implemented as a computer program that runs on a general purpose computer the program reads a problem instance from input performs some computation and produces the solution as output formalisms such as random access machines or universal turing machines can be used as abstract models of a sequential general purpose computer executing such an algorithm the field of concurrent and distributed computing studies similar questions in the case of either multiple computers or a computer that executes a network of interacting processes which computational problems can be solved in such a network and how efficiently however it is not at all obvious what is meant by solving a problem in the case of a concurrent or distributed system for example what is the task of the algorithm designer and what is the concurrent or distributed equivalent of a sequential general purpose computer the discussion below focuses on the case of multiple computers although many of the issues are the same for concurrent processes running on a single computer three viewpoints are commonly used parallel algorithms in shared memory model all computers have access to a shared memory the algorithm designer chooses the program executed by each computer one theoretical model is the parallel random access machines pram that are used 23 however the classical pram model assumes synchronous access to the shared memory a model that is closer to the behavior of real world multiprocessor machines and takes into account the use of machine instructions such as compare and swap cas is that of asynchronous shared memory there is a wide body of work on this model a summary of which can be found in the literature 24 25 parallel algorithms in message passing model the algorithm designer chooses the structure of the network as well as the program executed by each computer models such as boolean circuits and sorting networks are used 26 a boolean circuit can be seen as a computer network each gate is a computer that runs an extremely simple computer program similarly a sorting network can be seen as a computer network each comparator is a computer distributed algorithms in message passing model the algorithm designer only chooses the computer program all computers run the same program the system must work correctly regardless of the structure of the network a commonly used model is a graph with one finite state machine per node in the case of distributed algorithms computational problems are typically related to graphs often the graph that describes the structure of the computer network is the problem instance this is illustrated in the following example edit an example consider the computational problem of finding a coloring of a given graph g different fields might take the following approaches centralized algorithms the graph g is encoded as a string and the string is given as input to a computer the computer program finds a coloring of the graph encodes the coloring as a string and outputs the result parallel algorithms again the graph g is encoded as a string however multiple computers can access the same string in parallel each computer might focus on one part of the graph and produce a colouring for that part the main focus is on high performance computation that exploits the processing power of multiple computers in parallel distributed algorithms the graph g is the structure of the computer network there is one computer for each node of g and one communication link for each edge of g initially each computer only knows about its immediate neighbours in the graph g the computers must exchange messages with each other to discover more about the structure of g each computer must produce its own colour as output the main focus is on coordinating the operation of an arbitrary distributed system while the field of parallel algorithms has a different focus than the field of distributed algorithms there is a lot of interaction between the two fields for example the cole vishkin algorithm for graph colouring 27 was originally presented as a parallel algorithm but the same technique can also be used directly as a distributed algorithm moreover a parallel algorithm can be implemented either in a parallel system using shared memory or in a distributed system using message passing 28 the traditional boundary between parallel and distributed algorithms choose a suitable network vs run in any given network does not lie in the same place as the boundary between parallel and distributed systems shared memory vs message passing edit complexity measures in parallel algorithms yet another resource in addition to time and space is the number of computers indeed often there is a trade off between the running time and the number of computers the problem can be solved faster if there are more computers running in parallel see speedup if a decision problem can be solved in polylogarithmic time by using a polynomial number of processors then the problem is said to be in the class nc 29 the class nc can be defined equally well by using the pram formalism or boolean circuits pram machines can simulate boolean circuits efficiently and vice versa 30 in the analysis of distributed algorithms more attention is usually paid on communication operations than computational steps perhaps the simplest model of distributed computing is a synchronous system where all nodes operate in a lockstep fashion during each communication round all nodes in parallel 1 160 receive the latest messages from their neighbours 2 160 perform arbitrary local computation and 3 160 send new messages to their neighbours in such systems a central complexity measure is the number of synchronous communication rounds required to complete the task 31 this complexity measure is closely related to the diameter of the network let d be the diameter of the network on the one hand any computable problem can be solved trivially in a synchronous distributed system in approximately 2 d communication rounds simply gather all information in one location d rounds solve the problem and inform each node about the solution d rounds on the other hand if the running time of the algorithm is much smaller than d communication rounds then the nodes in the network must produce their output without having the possibility to obtain information about distant parts of the network in other words the nodes must make globally consistent decisions based on information that is available in their local neighbourhood many distributed algorithms are known with the running time much smaller than d rounds and understanding which problems can be solved by such algorithms is one of the central research questions of the field 32 other commonly used measures are the total number of bits transmitted in the network cf communication complexity edit other problems traditional computational problems take the perspective that we ask a question a computer or a distributed system processes the question for a while and then produces an answer and stops however there are also problems where we do not want the system to ever stop examples of such problems include the dining philosophers problem and other similar mutual exclusion problems in these problems the distributed system is supposed to continuously coordinate the use of shared resources so that no conflicts or deadlocks occur there are also fundamental challenges that are unique to distributed computing the first example is challenges that are related to fault tolerance examples of related problems include consensus problems 33 byzantine fault tolerance 34 and self stabilisation 35 a lot of research is also focused on understanding the asynchronous nature of distributed systems synchronizers can be used to run synchronous algorithms in asynchronous systems 36 logical clocks provide a causal happened before ordering of events 37 clock synchronization algorithms provide globally consistent physical time stamps 38 edit properties of distributed systems so far the focus has been on designing a distributed system that solves a given problem a complementary research problem is studying the properties of a given distributed system the halting problem is an analogous example from the field of centralised computation we are given a computer program and the task is to decide whether it halts or runs forever the halting problem is undecidable in the general case and naturally understanding the behaviour of a computer network is at least as hard as understanding the behaviour of one computer however there are many interesting special cases that are decidable in particular it is possible to reason about the behaviour of a network of finite state machines one example is telling whether a given network of interacting asynchronous and non deterministic finite state machines can reach a deadlock this problem is pspace complete 39 i e it is decidable but it is not likely that there is an efficient centralised parallel or distributed algorithm that solves the problem in the case of large networks edit architectures various hardware and software architectures are used for distributed computing at a lower level it is necessary to interconnect multiple cpus with some sort of network regardless of whether that network is printed onto a circuit board or made up of loosely coupled devices and cables at a higher level it is necessary to interconnect processes running on those cpus with some sort of communication system distributed programming typically falls into one of several basic architectures or categories client server 3 tier architecture n tier architecture distributed objects loose coupling or tight coupling client server smart client code contacts the server for data then formats and displays it to the user input at the client is committed back to the server when it represents a permanent change 3 tier architecture three tier systems move the client intelligence to a middle tier so that stateless clients can be used this simplifies application deployment most web applications are 3 tier n tier architecture n tier refers typically to web applications which further forward their requests to other enterprise services this type of application is the one most responsible for the success of application servers highly coupled clustered refers typically to a cluster of machines that closely work together running a shared process in parallel the task is subdivided in parts that are made individually by each one and then put back together to make the final result peer to peer an architecture where there is no special machine or machines that provide a service or manage the network resources instead all responsibilities are uniformly divided among all machines known as peers peers can serve both as clients and servers space based refers to an infrastructure that creates the illusion virtualization of one single address space data are transparently replicated according to application needs decoupling in time space and reference is achieved another basic aspect of distributed computing architecture is the method of communicating and coordinating work among concurrent processes through various message passing protocols processes may communicate directly with one another typically in a master slave relationship alternatively a database centric architecture can enable distributed computing to be done without any form of direct inter process communication by utilizing a shared database 40 edit see also distributed cache distributed operating system distributed algorithmic mechanism design decentralized computing list of distributed computing conferences list of distributed computing projects folding home boinc grid computing jungle computing list of important publications in concurrent parallel and distributed computing edsger w dijkstra prize in distributed computing library oriented architecture loa layered queueing network parallel distributed processing parallel programming model service oriented architecture soa volunteer computing edit notes andrews 2000 dolev 2000 ghosh 2007 p 10 godfrey 2002 a b andrews 2000 p 291 292 dolev 2000 p 5 lynch 1996 p 1 a b ghosh 2007 p 10 andrews 2000 p 8 9 291 dolev 2000 p 5 ghosh 2007 p 3 lynch 1996 p xix 1 peleg 2000 p xv andrews 2000 p 291 ghosh 2007 p 3 peleg 2000 p 4 ghosh 2007 p 3 4 peleg 2000 p 1 ghosh 2007 p 4 peleg 2000 p 2 ghosh 2007 p 4 8 lynch 1996 p 2 3 peleg 2000 p 4 lynch 1996 p 2 peleg 2000 p 1 ghosh 2007 p 7 lynch 1996 p xix 2 peleg 2000 p 4 ghosh 2007 p 10 keidar 2008 lynch 1996 p xix 1 2 peleg 2000 p 1 peleg 2000 p 1 papadimitriou 1994 chapter 15 keidar 2008 see references in introduction andrews 2000 p 348 andrews 2000 p 32 peter 2004 the history of email elmasri amp navathe 2000 section 24 1 2 andrews 2000 p 10 11 ghosh 2007 p 4 6 lynch 1996 p xix 1 peleg 2000 p xv elmasri amp navathe 2000 section 24 cormen leiserson amp rivest 1990 section 30 herlihy amp shavit 2008 chapters 2 6 lynch 1996 cormen leiserson amp rivest 1990 sections 28 and 29 cole amp vishkin 1986 cormen leiserson amp rivest 1990 section 30 5 andrews 2000 p ix arora amp barak 2009 section 6 7 papadimitriou 1994 section 15 3 papadimitriou 1994 section 15 2 lynch 1996 p 17 23 peleg 2000 sections 2 3 and 7 linial 1992 naor amp stockmeyer 1995 lynch 1996 sections 5 7 ghosh 2007 chapter 13 lynch 1996 p 99 102 ghosh 2007 p 192 193 dolev 2000 ghosh 2007 chapter 17 lynch 1996 section 16 peleg 2000 section 6 lynch 1996 section 18 ghosh 2007 sections 6 2 6 3 ghosh 2007 section 6 4 papadimitriou 1994 section 19 3 lind p alm m 2006 a database centric virtual chemistry system j chem inf model 46 3 1034 9 doi 10 1021 ci050360b pmid 160 16711722 edit references books andrews gregory r 2000 foundations of multithreaded parallel and distributed programming addison wesley isbn 160 0 201 35752 6 arora sanjeev barak boaz 2009 computational complexity a modern approach cambridge isbn 160 978 0 521 42426 4 cormen thomas h leiserson charles e rivest ronald l 1990 introduction to algorithms 1st ed mit press isbn 160 0 262 03141 8 dolev shlomi 2000 self stabilization mit press isbn 160 0 262 04178 2 elmasri ramez navathe shamkant b 2000 fundamentals of database systems 3rd ed addison wesley isbn 160 0 201 54263 3 ghosh sukumar 2007 distributed systems an algorithmic approach chapman amp hall crc isbn 160 978 1 58488 564 1 lynch nancy a 1996 distributed algorithms morgan kaufmann isbn 160 1 55860 348 4 herlihy maurice p shavit nir n 2008 the art of multiprocessor programming morgan kaufmann isbn 160 0 12 370591 6 papadimitriou christos h 1994 computational complexity addison wesley isbn 160 0 201 53082 1 peleg david 2000 distributed computing a locality sensitive approach siam isbn 160 0 89871 464 8 http www ec securehost com siam dt05 html articles cole richard vishkin uzi 1986 deterministic coin tossing with applications to optimal parallel list ranking information and control 70 1 32 53 doi 10 1016 s0019 9958 86 80023 7 keidar idit 2008 distributed computing column 32 the year in review acm sigact news 39 4 53 54 doi 10 1145 1466390 1466402 http webee technion ac il idish sigactnews column 2032 linial nathan 1992 locality in distributed graph algorithms siam journal on computing 21 1 193 201 doi 10 1137 0221015 naor moni stockmeyer larry 1995 what can be computed locally siam journal on computing 24 6 1259 1277 doi 10 1137 s0097539793254571 web sites godfrey bill 2002 a primer on distributed computing http www bacchae co uk docs dist html peter ian 2004 ian peter s history of the internet http www nethistory info history 20of 20the 20internet retrieved 2009 08 04 edit further reading books attiya hagit and welch jennifer 2004 distributed computing fundamentals simulations and advanced topics wiley interscience isbn 0 471 45324 2 faber jim 1998 java distributed computing o reilly http docstore mik ua orelly java ent dist index htm java distributed computing by jim faber 1998 garg vijay k 2002 elements of distributed computing wiley ieee press isbn 0 471 03600 5 tel gerard 1994 introduction to distributed algorithms cambridge university press chandy mani et al parallel program design articles keidar idit rajsbaum sergio eds 2000 2009 distributed computing column acm sigact news http webee technion ac il idish sigactnews birrell a d levin r schroeder m d needham r m april 1982 grapevine an exercise in distributed computing communications of the acm 25 4 260 274 doi 10 1145 358468 358487 http www cs ucsb edu ravenben papers coreos bls 82 pdf edit conference papers c rodr guez m villagra and b bar n asynchronous team algorithms for boolean satisfiability bionetics2007 pp 160 66 69 2007 edit external links wikimedia commons has media related to distributed computing distributed computing at the open directory project distributed computing journals at the open directory project v t e parallel computing general cloud computing high performance computing cluster computing distributed computing grid computing levels bit instruction data task threads superthreading hyperthreading theory amdahl s law gustafson s law cost efficiency karp flatt metric slowdown speedup elements process thread fiber pram instruction window coordination multiprocessing multithreading computer architecture memory coherency cache coherency cache invalidation barrier synchronization application checkpointing programming models implicit parallelism explicit parallelism concurrency flynn s taxonomy sisd simd misd mimd spmd thread computer science non blocking algorithm hardware multiprocessor symmetric asymmetric memory numa coma distributed shared distributed shared smt mpp superscalar vector processor supercomputer beowulf apis ateji px posix threads openmp openhmpp openacc pvm mpi upc intel threading building blocks intel cilk plus boost thread global arrays charm cilk co array fortran opencl cuda dryad c amp problems embarrassingly parallel software lockout scalability race condition deadlock livelock deterministic algorithm parallel slowdown category parallel computing media related to parallel computing at wikimedia commons 