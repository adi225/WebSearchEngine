this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed december 2011 a systems engineering perspective on requirements analysis 1 software development process a software engineer programming at work activities and steps requirements specification architecture design implementation testing debugging deployment maintenance methodologies waterfall prototype model incremental iterative v model spiral scrum cleanroom rad dsdm rup xp agile lean dual vee model tdd fdd supporting disciplines configuration management documentation quality assurance sqa project management user experience design tools compiler debugger profiler gui designer ide build automation v t e requirements analysis in systems engineering and software engineering encompasses those tasks that go into determining the needs or conditions to meet for a new or altered product taking account of the possibly conflicting requirements of the various stakeholders such as beneficiaries or users it is an early stage in the more general activity of requirements engineering which encompasses all activities concerned with eliciting analyzing documenting validating and managing software or system requirements 2 requirements analysis is critical to the success of a systems or software project 3 the requirements should be documented actionable measurable testable traceable related to identified business needs or opportunities and defined to a level of detail sufficient for system design contents 1 overview 2 requirements analysis topics 2 1 stakeholder identification 2 2 stakeholder interviews 2 3 joint requirements development jrd sessions 2 4 contract style requirement lists 2 4 1 strengths 2 4 2 weaknesses 2 4 3 alternative to requirement lists 2 5 measurable goals 2 6 prototypes 2 7 use cases 2 8 software requirements specification 3 types of requirements 4 requirements analysis issues 4 1 stakeholder issues 4 2 engineer developer issues 4 3 attempted solutions 5 see also 6 references 7 bibliography 8 external links edit overview conceptually requirements analysis includes three types of activities citation needed eliciting requirements the task of identifying the various types of requirements from various sources including project documentation e g the project charter or definition business process documentation and stakeholder interviews this is sometimes also called requirements gathering analyzing requirements determining whether the stated requirements are clear complete consistent and unambiguous and resolving any apparent conflicts recording requirements requirements may be documented in various forms usually including a summary list and may include natural language documents use cases user stories or process specifications requirements analysis can be a long and arduous process during which many delicate psychological skills are involved new systems change the environment and relationships between people so it is important to identify all the stakeholders take into account all their needs and ensure they understand the implications of the new systems analysts can employ several techniques to elicit the requirements from the customer these may include the development of scenarios represented as user stories in agile methods the identification of use cases the use of workplace observation or ethnography holding interviews or focus groups more aptly named in this context as requirements workshops or requirements review sessions and creating requirements lists prototyping may be used to develop an example system that can be demonstrated to stakeholders where necessary the analyst will employ a combination of these methods to establish the exact requirements of the stakeholders so that a system that meets the business needs is produced citation needed edit requirements analysis topics this section does not cite any references or sources please help improve this section by adding citations to reliable sources unsourced material may be challenged and removed october 2009 edit stakeholder identification see stakeholder analysis for a discussion of business uses stakeholders sh are people or organizations legal entities such as companies standards bodies that have a valid interest in the system they may be affected by it either directly or indirectly a major new emphasis in the 1990s was a focus on the identification of stakeholders it is increasingly recognized that stakeholders are not limited to the organization employing the analyst other stakeholders will include anyone who operates the system normal and maintenance operators anyone who benefits from the system functional political financial and social beneficiaries anyone involved in purchasing or procuring the system in a mass market product organization product management marketing and sometimes sales act as surrogate consumers mass market customers to guide development of the product organizations which regulate aspects of the system financial safety and other regulators people or organizations opposed to the system negative stakeholders see also misuse case organizations responsible for systems which interface with the system under design those organizations who integrate horizontally with the organization for whom the analyst is designing the system edit stakeholder interviews stakeholder interviews are a common technique used in requirement analysis though they are generally idiosyncratic in nature and focused upon the perspectives and perceived needs of the stakeholder often this perspective deficiency has the general advantage of obtaining a much richer understanding of the stakeholder s unique business processes decision relevant business rules and perceived needs consequently this technique can serve as a means of obtaining the highly focused knowledge that is often not elicited in joint requirements development sessions where the stakeholder s attention is compelled to assume a more cross functional context and the desire to avoid controversy may limit the stakeholders willingness to contribute moreover the in person nature of the interviews provides a more relaxed environment where lines of thought may be explored at length edit joint requirements development jrd sessions requirements often have cross functional implications that are unknown to individual stakeholders and often missed or incompletely defined during stakeholder interviews these cross functional implications can be elicited by conducting jrd sessions in a controlled environment facilitated by a trained facilitator wherein stakeholders participate in discussions to elicit requirements analyze their details and uncover cross functional implications a dedicated scribe and business analyst should be present to document the discussion utilizing the skills of a trained facilitator to guide the discussion frees the business analyst to focus on the requirements definition process jrd sessions are analogous to joint application design sessions in the former the sessions elicit requirements that guide design whereas the latter elicit the specific design features to be implemented in satisfaction of elicited requirements edit contract style requirement lists one traditional way of documenting requirements has been contract style requirement lists in a complex system such requirements lists can run to hundreds of pages long an appropriate metaphor would be an extremely long shopping list such lists are very much out of favour in modern analysis as they have proved spectacularly unsuccessful at achieving their aims but they are still seen to this day edit strengths provides a checklist of requirements provide a contract between the project sponsor s and developers for a large system can provide a high level description edit weaknesses such lists can run to hundreds of pages they are not intended to serve as a reader friendly description of the desired application such requirements lists abstract all the requirements and so there is little context the business analyst may include context for requirements in accompanying design documentation this abstraction is not intended to describe how the requirements fit or work together the list may not reflect relationships and dependencies between requirements while a list does make it easy to prioritize each individual item removing one item out of context can render an entire use case or business requirement useless the list doesn t supplant the need to review requirements carefully with stakeholders in order to gain a better shared understanding of the implications for the design of the desired system application simply creating a list does not guarantee its completeness the business analyst must make a good faith effort to discover and collect a substantially comprehensive list and rely on stakeholders to point out missing requirements these lists can create a false sense of mutual understanding between the stakeholders and developers business analysts are critical to the translation process it is almost impossible to uncover all the functional requirements before the process of development and testing begins if these lists are treated as an immutable contract then requirements that emerge in the development process may generate a controversial change request edit alternative to requirement lists as an alternative to the requirement lists agile software development uses user stories to suggest requirement in every day language edit measurable goals main article goal modeling best practices take the composed list of requirements merely as clues and repeatedly ask why until the actual business purposes are discovered stakeholders and developers can then devise tests to measure what level of each goal has been achieved thus far such goals change more slowly than the long list of specific but unmeasured requirements once a small set of critical measured goals has been established rapid prototyping and short iterative development phases may proceed to deliver actual stakeholder value long before the project is half over edit prototypes main article software prototyping prototypes are mockups of an application allowing users to visualize an application that has not yet been constructed prototypes help people get an idea of what the system will look like and make it easier for projects to make design decisions without waiting for the system to be built major improvements in communication between users and developers were often seen with the introduction of prototypes early views of applications led to fewer changes later and hence reduced overall costs considerably citation needed prototypes can be flat diagrams often referred to as wireframes or working applications using synthesized functionality wireframes are made in a variety of graphic design documents and often remove all color from the design i e use a greyscale color palette in instances where the final software is expected to have graphic design applied to it this helps to prevent confusion as to whether the prototype represents the final visual look and feel of the application citation needed edit use cases main article use case a use case is a structure for documenting the functional requirements for a system usually involving software whether that is new or being changed each use case provides a set of scenarios that convey how the system should interact with a human user or another system to achieve a specific business goal use cases typically avoid technical jargon preferring instead the language of the end user or domain expert use cases are often co authored by requirements engineers and stakeholders use cases are deceptively simple tools for describing the behavior of software or systems a use case contains a textual description of the ways in which users are intended to work with the software or system use cases should not describe internal workings of the system nor should they explain how that system will be implemented instead they show the steps needed to perform a task edit software requirements specification see software requirements specification srs for a full account edit types of requirements this section may require cleanup to meet wikipedia s quality standards no cleanup reason has been specified please help improve this section if you can february 2011 requirements are categorized in several ways the following are common categorizations of requirements that relate to technical management 1 customer requirements statements of fact and assumptions that define the expectations of the system in terms of mission objectives environment constraints and measures of effectiveness and suitability moe mos the customers are those that perform the eight primary functions of systems engineering with special emphasis on the operator as the key customer operational requirements will define the basic need and at a minimum answer the questions posed in the following listing 1 operational distribution or deployment where will the system be used mission profile or scenario how will the system accomplish its mission objective performance and related parameters what are the critical system parameters to accomplish the mission utilization environments how are the various system components to be used effectiveness requirements how effective or efficient must the system be in performing its mission operational life cycle how long will the system be in use by the user environment what environments will the system be expected to operate in an effective manner architectural requirements architectural requirements explain what has to be done by identifying the necessary system architecture of a system structural requirements structural requirements explain what has to be done by identifying the necessary structure of a system behavioral requirements behavioral requirements explain what has to be done by identifying the necessary behavior of a system functional requirements functional requirements explain what has to be done by identifying the necessary task action or activity that must be accomplished functional requirements analysis will be used as the toplevel functions for functional analysis 1 non functional requirements non functional requirements are requirements that specify criteria that can be used to judge the operation of a system rather than specific behaviors performance requirements the extent to which a mission or function must be executed generally measured in terms of quantity quality coverage timeliness or readiness during requirements analysis performance how well does it have to be done requirements will be interactively developed across all identified functions based on system life cycle factors and characterized in terms of the degree of certainty in their estimate the degree of criticality to system success and their relationship to other requirements 1 design requirements the build to code to and buy to requirements for products and how to execute requirements for processes expressed in technical data packages and technical manuals 1 derived requirements requirements that are implied or transformed from higher level requirement for example a requirement for long range or high speed may result in a design requirement for low weight 1 allocated requirements a requirement that is established by dividing or otherwise allocating a high level requirement into multiple lower level requirements example a 100 pound item that consists of two subsystems might result in weight requirements of 70 pounds and 30 pounds for the two lower level items 1 well known requirements categorization models include furps and furps developed at hewlett packard edit requirements analysis issues edit stakeholder issues steve mcconnell in his book rapid development details a number of ways users can inhibit requirements gathering users do not understand what they want or users don t have a clear idea of their requirements users will not commit to a set of written requirements users insist on new requirements after the cost and schedule have been fixed communication with users is slow users often do not participate in reviews or are incapable of doing so users are technically unsophisticated users do not understand the development process users do not know about present technology this may lead to the situation where user requirements keep changing even when system or product development has been started edit engineer developer issues possible problems caused by engineers and developers during requirements analysis are engineer developer starts coding implementation immediately before they really understand the whole requirement from analyst which usually causes lots of defect fixing or reworking in test verification phase technical personnel and end users may have different vocabularies consequently they may wrongly believe they are in perfect agreement until the finished product is supplied engineers and developers may try to make the requirements fit an existing system or model rather than develop a system specific to the needs of the client analysis may often be carried out by engineers or programmers rather than personnel with the domain knowledge to understand a client s needs properly edit attempted solutions one attempted solution to communications problems has been to employ specialists in business or system analysis techniques introduced in the 1990s like prototyping unified modeling languages uml use cases and agile software development are also intended as solutions to problems encountered with previous methods also a new class of application simulation or application definition tools have entered the market these tools are designed to bridge the communication gap between business users and the it organization and also to allow applications to be test marketed before any code is produced the best of these tools offer electronic whiteboards to sketch application flows and test alternatives ability to capture business logic and data needs ability to generate high fidelity prototypes that closely imitate the final application interactivity capability to add contextual requirements and other comments ability for remote and distributed users to run and interact with the simulation edit see also business analysis business analysis body of knowledge babok business process reengineering creative brief design brief information technology data modeling functional requirements model driven engineering model transformation language non functional requirements process architecture process modeling requirements elicitation requirements engineering specialist group requirements management requirements traceability search based software engineering software prototyping software requirements specification systems analysis system requirements software requirements edit references a b c d e f g h systems engineering fundamentals defense acquisition university press 2001 kotonya g and sommerville i 1998 requirements engineering processes and techniques chichester uk john wiley and sons executive editors alain abran james w moore editors pierre bourque robert dupuis ed march 2005 chapter 2 software requirements guide to the software engineering body of knowledge 2004 ed los alamitos ca ieee computer society press isbn 160 0 7695 2330 7 http www computer org portal web swebok html ch2 retrieved 2007 02 08 it is widely acknowledged within the software industry that software engineering projects are critically vulnerable when these activities are performed poorly edit bibliography laplante phil 2009 requirements engineering for software and systems 1st ed redmond wa crc press isbn 160 1 4200 6467 3 http www crcpress com product isbn 9781420064674 hay david c 2003 requirements analysis from business views to architecture 1st ed upper saddle river nj prentice hall isbn 160 0 13 028228 6 http books google co uk books about requirements analysis html id qy6j2peme8qc mcconnell steve 1996 rapid development taming wild software schedules 1st ed redmond wa microsoft press isbn 160 1 55615 900 5 http www stevemcconnell com wiegers karl e 2003 software requirements 2nd ed redmond wa microsoft press isbn 160 0 7356 1879 8 http www processimpact com andrew stellman and jennifer greene 2005 applied software project management cambridge ma o reilly media isbn 160 0 596 00948 8 http www stellman greene com brian berenbach daniel paulish juergen katzmeier arnold rudorfer 2009 software amp systems requirements engineering in practice new york mcgraw hill professional isbn 160 0 07 160547 9 http www mhprofessional com edit external links wikimedia commons has media related to requirements analysis peer reviewed encyclopedia entry on requirements engineering and analysis software requirement analysis using uml article by dhiraj shetty requirements engineering process goodies requirements engineering a roadmap pdf article by bashar nuseibeh and steve easterbrook 2000 v t e major fields of computer science mathematical foundations mathematical logic set theory number theory graph theory type theory category theory numerical analysis information theory combinatorics boolean algebra theory of computation automata theory computability theory computational complexity theory quantum computing theory algorithms data structures analysis of algorithms algorithm design computational geometry programming languages compilers parsers interpreters procedural programming object oriented programming functional programming logic programming programming paradigms concurrent parallel distributed systems multiprocessing grid computing concurrency control software engineering requirements analysis software design computer programming formal methods software testing software development process system architecture computer architecture computer organization operating systems telecommunication networking computer audio routing network topology cryptography databases database management systems relational databases sql transactions database indexes data mining artificial intelligence automated reasoning computational linguistics computer vision evolutionary computation expert systems machine learning natural language processing robotics computer graphics visualization computer animation image processing human computer interaction computer accessibility user interfaces wearable computing ubiquitous computing virtual reality scientific computing artificial life bioinformatics cognitive science computational chemistry computational neuroscience computational physics numerical algorithms symbolic mathematics note computer science can also be divided into different topics or fields according to the acm computing classification system v t e software engineering fields computer programming formal methods requirements analysis software deployment software design software maintenance software testing systems analysis concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software architecture software development methodology software development process software quality software quality assurance software archaeology structured analysis orientations agile aspect oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model rup scrum prototype model spiral model v model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers kent beck grady booch fred brooks barry boehm peter chen ward cunningham ole johan dahl tom demarco martin fowler c a r hoare watts humphrey michael a jackson ivar jacobson james martin stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon victor basili related fields computer science computer engineering enterprise engineering history management project management quality management software ergonomics systems engineering category commons v t e systems engineering subfields aerospace engineering biological systems engineering configuration management earth systems engineering and management enterprise systems engineering performance engineering reliability engineering safety engineering processes requirements analysis functional specification system integration verification and validation design review concepts business process system system lifecycle v model systems development life cycle tools decision making function modelling idef optimization planning statistical analysis system dynamics systems modeling language systems analysis systems modeling work breakdown structure people wernher von braun harold chestnut arthur david hall iii derek hitchins robert e machol simon ramo joseph francis shea john n warfield related fields control engineering computer engineering industrial engineering operations research project management quality management software engineering category 160 commons 