the dining philosophers a classic problem involving concurrency and shared resources in computer science concurrency is a property of systems in which several computations are executing simultaneously and potentially interacting with each other the computations may be executing on multiple cores in the same chip preemptively time shared threads on the same processor or executed on physically separated processors a number of mathematical models have been developed for general concurrent computation including petri nets process calculi the parallel random access machine model the actor model and the reo coordination language contents 1 issues 2 theory 2 1 models 2 2 logics 3 practice 4 see also 5 references 6 further reading 7 external links edit issues because computations in a concurrent system can interact with each other while they are executing the number of possible execution paths in the system can be extremely large and the resulting outcome can be indeterminate concurrent use of shared resources can be a source of indeterminacy leading to issues such as deadlock and starvation 1 the design of concurrent systems often entails finding reliable techniques for coordinating their execution data exchange memory allocation and execution scheduling to minimize response time and maximise throughput 2 edit theory concurrency theory has been an active field of research in theoretical computer science one of the first proposals was carl adam petri s seminal work on petri nets in the early 1960s in the years since a wide variety of formalisms have been developed for modeling and reasoning about concurrency edit models a number of formalisms for modeling and understanding concurrent systems have been developed including 3 the parallel random access machine 4 the actor model computational bridging models such as the bsp model petri nets process calculi tuple spaces e g linda scoop simple concurrent object oriented programming reo coordination language some of these models of concurrency are primarily intended to support reasoning and specification while others can be used through the entire development cycle including design implementation proof testing and simulation of concurrent systems the proliferation of different models of concurrency has motivated some researchers to develop ways to unify these different theoretical models for example lee and sangiovanni vincentelli have demonstrated that a so called tagged signal model can be used to provide a common framework for defining the denotational semantics of a variety of different models of concurrency 5 while nielsen sassone and winskel have demonstrated that category theory can be used to provide a similar unified understanding of different models 6 the concurrency representation theorem in the actor model provides a fairly general way to represent concurrent systems that are closed in the sense that they do not receive communications from outside other concurrency systems e g process calculi can be modeled in the actor model using a two phase commit protocol 7 the mathematical denotation denoted by a closed system s is constructed increasingly better approximations from an initial behavior called s using a behavior approximating function progression s to construct a denotation meaning for s as follows 8 denote s i progression s i s in this way s can be mathematically characterized in terms of all its possible behaviors edit logics various types of temporal logic 9 can be used to help reason about concurrent systems some of these logics such as linear temporal logic and computational tree logic allow assertions to be made about the sequences of states that a concurrent system can pass through others such as action computational tree logic hennessy milner logic and lamport s temporal logic of actions build their assertions from sequences of actions changes in state the principal application of these logics is in writing specifications for concurrent systems 1 edit practice this section does not cite any references or sources please help improve this section by adding citations to reliable sources unsourced material may be challenged and removed april 2007 concurrent programming encompasses the programming languages and algorithms used to implement concurrent systems concurrent programming is usually considered to be more general than parallel programming because it can involve arbitrary and dynamic patterns of communication and interaction whereas parallel systems generally have a predefined and well structured communications pattern the base goals of concurrent programming include correctness performance and robustness concurrent systems such as operating systems and database management systems are generally designed to operate indefinitely including automatic recovery from failure and not terminate unexpectedly see concurrency control some concurrent systems implement a form of transparent disambiguation needed concurrency in which concurrent computational entities may compete for and share a single resource but the complexities of this competition and sharing are shielded from the programmer because they use shared resources concurrent systems in general require the inclusion of some kind of arbiter somewhere in their implementation often in the underlying hardware to control access to those resources the use of arbiters introduces the possibility of indeterminacy in concurrent computation which has major implications for practice including correctness and performance for example arbitration introduces unbounded nondeterminism which raises issues with model checking because it causes explosion in the state space and can even cause models to have an infinite number of states some concurrent programming models include coprocesses and deterministic concurrency in these models threads of control explicitly yield their timeslices either to the system or to another process edit see also client server network nodes cluster nodes communicating sequential processes concurrency control concurrent computing concurrent object oriented programming concurrency pattern chu space concurrent programming distributed system nodes gordon pask openmp parallel computing partitioned global address space processes ptolemy project sheaf mathematics threads x10 programming language edit references a b cleaveland rance scott smolka december 1996 strategic directions in concurrency research acm computing surveys 28 4 607 doi 10 1145 242223 242252 http doi acm org 10 1145 242223 242252 campbell colin johnson ralph miller ade toub stephen august 2010 parallel programming with microsoft net microsoft press isbn 160 978 0 7356 5159 3 http msdn microsoft com en us library ff963542 aspx filman robert daniel friedman 1984 coordinated computing tools and techniques for distributed software mcgraw hill isbn 160 0 07 022439 0 http ic arc nasa gov people filman text dpl dpl html keller j rg christoph ke ler jesper tr ff 2001 practical pram programming john wiley and sons lee edward alberto sangiovanni vincentelli december 1998 a framework for comparing models of computation ieee transactions on cad 17 12 1217 1229 doi 10 1109 43 736561 mogens nielsen vladimiro sassone and glynn winskel 1993 relationships between models of concurrency rex school symposium http citeseer ist psu edu article nielsen94relationships html frederick knabe a distributed protocol for channel based communication with choice parle 1992 william clinger june 1981 foundations of actor semantics mathematics doctoral dissertation mit https dspace mit edu handle 1721 1 6935 roscoe colin 2001 modal and temporal properties of processes springer isbn 160 0 387 98717 7 edit further reading lynch nancy a 1996 distributed algorithms morgan kauffman isbn 160 1 55860 348 4 tanenbaum andrew s van steen maarten 2002 distributed systems principles and paradigms prentice hall isbn 160 0 13 088893 1 kurki suonio reino 2005 a practical theory of reactive systems springer isbn 160 3 540 23342 3 garg vijay k 2002 elements of distributed computing wiley ieee press isbn 160 0 471 03600 5 magee jeff kramer jeff 2006 concurrency state models and java programming wiley isbn 160 0 470 09355 2 edit external links concurrent systems at the www virtual library 