in computer science an inverted index also referred to as postings file or inverted file is an index data structure storing a mapping from content such as words or numbers to its locations in a database file or in a document or a set of documents the purpose of an inverted index is to allow fast full text searches at a cost of increased processing when a document is added to the database the inverted file may be the database file itself rather than its index it is the most popular data structure used in document retrieval systems 1 used on a large scale for example in search engines several significant general purpose mainframe based database management systems have used inverted list architectures including adabas datacom db and model 204 there are two main variants of inverted indexes a record level inverted index or inverted file index or just inverted file contains a list of references to documents for each word a word level inverted index or full inverted index or inverted list additionally contains the positions of each word within a document 2 the latter form offers more functionality like phrase searches but needs more time and space to be created contents 1 example 2 applications 3 see also 4 bibliography 5 references 6 external links edit example given the texts it is what it is what is it and it is a banana we have the following inverted file index where the integers in the set notation brackets refer to the subscripts of the text symbols etc a 2 banana 2 is 0 1 2 it 0 1 2 what 0 1 a term search for the terms what is and it would give the set with the same texts we get the following full inverted index where the pairs are document numbers and local word numbers like the document numbers local word numbers also begin with zero so banana 2 3 means the word banana is in the third document and it is the fourth word in that document position 3 a 2 2 banana 2 3 is 0 1 0 4 1 1 2 1 it 0 0 0 3 1 2 2 0 what 0 2 1 0 if we run a phrase search for what is it we get hits for all the words in both document 0 and 1 but the terms occur consecutively only in document 1 edit applications the inverted index data structure is a central component of a typical search engine indexing algorithm a goal of a search engine implementation is to optimize the speed of the query find the documents where word x occurs once a forward index is developed which stores lists of words per document it is next inverted to develop an inverted index querying the forward index would require sequential iteration through each document and to each word to verify a matching document the time memory and processing resources to perform such a query are not always technically realistic instead of listing the words per document in the forward index the inverted index data structure is developed which lists the documents per word with the inverted index created the query can now be resolved by jumping to the word id via random access in the inverted index in pre computer times concordances to important books were manually assembled these were effectively inverted indexes with a small amount of accompanying commentary that required a tremendous amount of effort to produce in bioinformatics inverted indexes are very important in the sequence assembly of short fragments of sequenced dna one way to find the source of a fragment is to search for it against a reference dna sequence a small number of mismatches due to differences between the sequenced dna and reference dna or errors can be accounted for by dividing the fragment into smaller fragments at least one subfragment is likely to match the reference dna sequence the matching requires constructing an inverted index of all substrings of a certain length from the reference dna sequence since the human dna contains more than 3 billion base pairs and we need to store a dna substring for every index and a 32 bit integer for index itself the storage requirement for such an inverted index would probably be in the tens of gigabytes edit see also index search engine reverse index vector space model edit bibliography knuth d e 1997 1973 6 5 retrieval on secondary keys the art of computer programming third ed reading massachusetts addison wesley isbn 160 0 201 89685 0 zobel justin moffat alistair ramamohanarao kotagiri december 1998 inverted files versus signature files for text indexing acm transactions on database systems new york association for computing machinery 23 4 pp 453 490 doi 10 1145 296854 277632 zobel justin rmit university australia moffat alistair the university of melbourne australia july 2006 inverted files for text search engines acm computing surveys new york association for computing machinery 38 2 6 doi 10 1145 1132956 1132959 baeza yates ricardo ribeiro neto berthier 1999 modern information retrieval reading massachusetts addison wesley longman p 160 192 isbn 160 0 201 39829 x luk robert w lam 2007 efficient in memory extensible inverted file information systems 32 5 733 754 doi 10 1016 j is 2006 06 001 salton gerard fox edward a wu harry 1983 extended boolean information retrieval commun acm acm 26 11 1022 doi 10 1145 182 358466 information retrieval implementing and evaluating search engines cambridge massachusetts mit press 2010 isbn 160 978 0 262 02651 2 http www ir uwaterloo ca book edit references knuth 1997 pp 160 560 563 of section 6 5 retrieval on secondary keys zobel moffat amp ramamohanarao 1998 baeza yates amp ribeiro neto 1999 p 160 192 edit external links nist s dictionary of algorithms and data structures inverted index managing gigabytes for java a free full text search engine for large document collections written in java lucene apache lucene is a full featured text search engine library written in java sphinx search open source high performance full featured text search engine library used by craigslist and others employing an inverted index example implementations on rosetta code caltech large scale image search toolbox a matlab toolbox implementing inverted file bag of words image search 