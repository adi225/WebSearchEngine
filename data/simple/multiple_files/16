flow chart of an algorithm euclid s algorithm for calculating the greatest common divisor g c d of two numbers a and b in locations named a and b the algorithm proceeds by successive subtractions in two loops if the test b a yields yes or true more accurately the number b in location b is greater than or equal to the number a in location a then the algorithm specifies b b a meaning the number b a replaces the old b similarly if a gt b then a a b the process terminates when the contents of b is 0 yielding the g c d in a algorithm derived from scott 2009 13 symbols and drawing style from tausworthe 1977 in mathematics and computer science an algorithm i l r m is a step by step procedure for calculations algorithms are used for calculation data processing and automated reasoning more precisely an algorithm is an effective method expressed as a finite list 1 of well defined instructions 2 for calculating a function 3 starting from an initial state and initial input perhaps empty 4 the instructions describe a computation that when executed will proceed through a finite 5 number of well defined successive states eventually producing output 6 and terminating at a final ending state the transition from one state to the next is not necessarily deterministic some algorithms known as randomized algorithms incorporate random input 7 though al khw rizm s algorism referred only to the rules of performing arithmetic using hindu arabic numerals a partial formalization of what would become the modern algorithm began with attempts to solve the entscheidungsproblem the decision problem posed by david hilbert in 1928 subsequent formalizations were framed as attempts to define effective calculability 8 or effective method 9 those formalizations included the g del herbrand kleene recursive functions of 1930 1934 and 1935 alonzo church s lambda calculus of 1936 emil post s formulation 1 of 1936 and alan turing s turing machines of 1936 7 and 1939 giving a formal definition of algorithms corresponding to the intuitive notion remains a challenging problem 10 contents 1 informal definition 2 formalization 2 1 expressing algorithms 3 implementation 4 computer algorithms 5 examples 5 1 algorithm example 5 2 euclid s algorithm 5 2 1 example 5 2 2 computer language for euclid s algorithm 5 2 3 an inelegant program for euclid s algorithm 5 2 4 an elegant program for euclid s algorithm 5 3 testing the euclid algorithms 5 4 measuring and improving the euclid algorithms 6 algorithmic analysis 6 1 formal versus empirical 6 1 1 fft speedup 7 classification 7 1 by implementation 7 2 by design paradigm 7 3 by field of study 7 4 by complexity 8 continuous algorithms 9 legal issues 10 etymology 11 history development of the notion of algorithm 11 1 origin 11 2 discrete and distinguishable symbols 11 3 manipulation of symbols as place holders for numbers algebra 11 4 mechanical contrivances with discrete states 11 5 mathematics during the 19th century up to the mid 20th century 11 6 emil post 1936 and alan turing 1936 37 1939 11 7 j b rosser 1939 and s c kleene 1943 11 8 history after 1950 12 see also 13 notes 14 references 14 1 secondary references 15 further reading 16 external links edit informal definition for a detailed presentation of the various points of view around the definition of algorithm see algorithm characterizations for examples of simple addition algorithms specified in the detailed manner described in algorithm characterizations see algorithm examples while there is no generally accepted formal definition of algorithm an informal definition could be a set of rules that precisely defines a sequence of operations 11 for some people a program is only an algorithm if it stops eventually for others a program is only an algorithm if it stops before a given number of calculation steps 12 a prototypical example of an algorithm is euclid s algorithm to determine the maximum common divisor of two integers an example there are others is described by the flow chart above and as an example in a later section boolos amp jeffrey 1974 1999 offer an informal meaning of the word in the following quotation no human being can write fast enough or long enough or small enough smaller and smaller without limit you d be trying to write on molecules on atoms on electrons to list all members of an enumerably infinite set by writing out their names one after another in some notation but humans can do something equally useful in the case of certain enumerably infinite sets they can give explicit instructions for determining the n th member of the set for arbitrary finite n such instructions are to be given quite explicitly in a form in which they could be followed by a computing machine or by a human who is capable of carrying out only very elementary operations on symbols 13 the term enumerably infinite means countable using integers perhaps extending to infinity thus boolos and jeffrey are saying that an algorithm implies instructions for a process that creates output integers from an arbitrary input integer or integers that in theory can be chosen from 0 to infinity thus an algorithm can be an algebraic equation such as y m n two arbitrary input variables m and n that produce an output y but various authors attempts to define the notion indicate that the word implies much more than this something on the order of for the addition example precise instructions in language understood by the computer 14 for a fast efficient good 15 process that specifies the moves of the computer machine or human equipped with the necessary internally contained information and capabilities 16 to find decode and then process arbitrary input integers symbols m and n symbols and and effectively 17 produce in a reasonable time 18 output integer y at a specified place and in a specified format the concept of algorithm is also used to define the notion of decidability that notion is central for explaining how formal systems come into being starting from a small set of axioms and rules in logic the time that an algorithm requires to complete cannot be measured as it is not apparently related with our customary physical dimension from such uncertainties that characterize ongoing work stems the unavailability of a definition of algorithm that suits both concrete in some sense and abstract usage of the term edit formalization algorithms are essential to the way computers process data many computer programs contain algorithms that detail the specific instructions a computer should perform in a specific order to carry out a specified task such as calculating employees paychecks or printing students report cards thus an algorithm can be considered to be any sequence of operations that can be simulated by a turing complete system authors who assert this thesis include minsky 1967 savage 1987 and gurevich 2000 minsky but we will also maintain with turing that any procedure which could naturally be called effective can in fact be realized by a simple machine although this may seem extreme the arguments in its favor are hard to refute 19 gurevich turing s informal argument in favor of his thesis justifies a stronger thesis every algorithm can be simulated by a turing machine according to savage 1987 an algorithm is a computational process defined by a turing machine 20 typically when an algorithm is associated with processing information data is read from an input source written to an output device and or stored for further processing stored data is regarded as part of the internal state of the entity performing the algorithm in practice the state is stored in one or more data structures for some such computational process the algorithm must be rigorously defined specified in the way it applies in all possible circumstances that could arise that is any conditional steps must be systematically dealt with case by case the criteria for each case must be clear and computable because an algorithm is a precise list of precise steps the order of computation will always be critical to the functioning of the algorithm instructions are usually assumed to be listed explicitly and are described as starting from the top and going down to the bottom an idea that is described more formally by flow of control so far this discussion of the formalization of an algorithm has assumed the premises of imperative programming this is the most common conception and it attempts to describe a task in discrete mechanical means unique to this conception of formalized algorithms is the assignment operation setting the value of a variable it derives from the intuition of memory as a scratchpad there is an example below of such an assignment for some alternate conceptions of what constitutes an algorithm see functional programming and logic programming edit expressing algorithms algorithms can be expressed in many kinds of notation including natural languages pseudocode flowcharts programming languages or control tables processed by interpreters natural language expressions of algorithms tend to be verbose and ambiguous and are rarely used for complex or technical algorithms pseudocode flowcharts and control tables are structured ways to express algorithms that avoid many of the ambiguities common in natural language statements programming languages are primarily intended for expressing algorithms in a form that can be executed by a computer but are often used as a way to define or document algorithms there is a wide variety of representations possible and one can express a given turing machine program as a sequence of machine tables see more at finite state machine state transition table and control table as flowcharts see more at state diagram or as a form of rudimentary machine code or assembly code called sets of quadruples see more at turing machine representations of algorithms can be classed into three accepted levels of turing machine description 21 1 high level description prose to describe an algorithm ignoring the implementation details at this level we do not need to mention how the machine manages its tape or head 2 implementation description prose used to define the way the turing machine uses its head and the way that it stores data on its tape at this level we do not give details of states or transition function 3 formal description most detailed lowest level gives the turing machine s state table for an example of the simple algorithm add m n described in all three levels see algorithm examples edit implementation most algorithms are intended to be implemented as computer programs however algorithms are also implemented by other means such as in a biological neural network for example the human brain implementing arithmetic or an insect looking for food in an electrical circuit or in a mechanical device edit computer algorithms flowchart examples of the canonical b hm jacopini structures the sequence rectangles descending the page the while do and the if then else the three structures are made of the primitive conditional goto if test true then goto step xxx a diamond the unconditional goto rectangle various assignment operators rectangle and halt rectangle nesting of these structures inside assignment blocks result in complex diagrams cf tausworthe 1977 100 114 in computer systems an algorithm is basically an instance of logic written in software by software developers to be effective for the intended target computer s in order for the target machines to produce output from given input perhaps null elegant compact programs good fast programs the notion of simplicity and elegance appears informally in knuth and precisely in chaitin knuth we want good algorithms in some loosely defined aesthetic sense one criterion is the length of time taken to perform the algorithm other criteria are adaptability of the algorithm to computers its simplicity and elegance etc 22 chaitin a program is elegant by which i mean that it s the smallest possible program for producing the output that it does 23 chaitin prefaces his definition with i ll show you can t prove that a program is elegant such a proof would solve the halting problem ibid algorithm versus function computable by an algorithm for a given function multiple algorithms may exist this will be true even without expanding the available instruction set available to the programmer rogers observes that it is important to distinguish between the notion of algorithm i e procedure and the notion of function computable by algorithm i e mapping yielded by procedure the same function may have several different algorithms 24 unfortunately there may be a tradeoff between goodness speed and elegance compactness an elegant program may take more steps to complete a computation than one less elegant an example of using euclid s algorithm will be shown below computers and computors models of computation a computer or human computor 25 is a restricted type of machine a discrete deterministic mechanical device 26 that blindly follows its instructions 27 melzak s and lambek s primitive models 28 reduced this notion to four elements i discrete distinguishable locations ii discrete indistinguishable counters 29 iii an agent and iv a list of instructions that are effective relative to the capability of the agent 30 minsky describes a more congenial variation of lambek s abacus model in his very simple bases for computability 31 minsky s machine proceeds sequentially through its five or six depending on how one counts instructions unless either a conditional if then goto or an unconditional goto changes program flow out of sequence besides halt minsky s machine includes three assignment replacement substitution 32 operations zero e g the contents of location replaced by 0 l 0 successor e g l l 1 and decrement e g l l 1 33 rarely will a programmer have to write code with such a limited instruction set but minsky shows as do melzak and lambek that his machine is turing complete with only four general types of instructions conditional goto unconditional goto assignment replacement substitution and halt 34 simulation of an algorithm computer computor language knuth advises the reader that the best way to learn an algorithm is to try it immediately take pen and paper and work through an example 35 but what about a simulation or execution of the real thing the programmer must translate the algorithm into a language that the simulator computer computor can effectively execute stone gives an example of this when computing the roots of a quadratic equation the computor must know how to take a square root if they don t then for the algorithm to be effective it must provide a set of rules for extracting a square root 36 this means that the programmer must know a language that is effective relative to the target computing agent computer computor but what model should be used for the simulation van emde boas observes even if we base complexity theory on abstract instead of concrete machines arbitrariness of the choice of a model remains it is at this point that the notion of simulation enters 37 when speed is being measured the instruction set matters for example the subprogram in euclid s algorithm to compute the remainder would execute much faster if the programmer had a modulus division instruction available rather than just subtraction or worse just minsky s decrement structured programming canonical structures per the church turing thesis any algorithm can be computed by a model known to be turing complete and per minsky s demonstrations turing completeness requires only four instruction types conditional goto unconditional goto assignment halt kemeny and kurtz observe that while undisciplined use of unconditional gotos and conditional if then gotos can result in spaghetti code a programmer can write structured programs using these instructions on the other hand it is also possible and not too hard to write badly structured programs in a structured language 38 tausworthe augments the three b hm jacopini canonical structures 39 sequence if then else and while do with two more do while and case 40 an additional benefit of a structured program will be one that lends itself to proofs of correctness using mathematical induction 41 canonical flowchart symbols 42 the graphical aide called a flowchart offers a way to describe and document an algorithm and a computer program of one like program flow of a minsky machine a flowchart always starts at the top of a page and proceeds down its primary symbols are only 4 the directed arrow showing program flow the rectangle sequence goto the diamond if then else and the dot or tie the b hm jacopini canonical structures are made of these primitive shapes sub structures can nest in rectangles but only if a single exit occurs from the superstructure the symbols and their use to build the canonical structures are shown in the diagram edit examples further information algorithm examples edit algorithm example an animation of the quicksort algorithm sorting an array of randomized values the red bars mark the pivot element at the start of the animation the element farthest to the right hand side is chosen as the pivot one of the simplest algorithms is to find the largest number in an unsorted list of numbers the solution necessarily requires looking at every number in the list but only once at each from this follows a simple algorithm which can be stated in a high level description english prose as high level description assume the first item is largest look at each of the remaining items in the list and if it is larger than the largest item so far make a note of it the last noted item is the largest in the list when the process is complete quasi formal description written in prose but much closer to the high level language of a computer program the following is the more formal coding of the algorithm in pseudocode or pidgin code algorithm largestnumber input a non empty list of numbers l output the largest number in the list l largest l 0 for each item in the list length l 1 do if the item gt largest then largest the item return largest is a shorthand for changes to for instance largest item means that the value of largest changes to the value of item return terminates the algorithm and outputs the value that follows edit euclid s algorithm the example diagram of euclid s algorithm from t l heath 1908 with more detail added euclid does not go beyond a third measuring and gives no numerical examples nicomachus gives the example of 49 and 21 i subtract the less from the greater 28 is left then again i subtract from this the same 21 for this is possible 7 is left i subtact this from 21 14 is left from which i again subtract 7 for this is possible 7 will be left but 7 cannot be subtracted from 7 heath comments that the last phrase is curious but the meaning of it is obvious enough as also the meaning of the phrase about ending at one and the same number heath 1908 300 euclid s algorithm appears as proposition ii in book vii elementary number theory of his elements 43 euclid poses the problem given two numbers not prime to one another to find their greatest common measure he defines a number to be a multitude composed of units a counting number a positive integer not including 0 and to measure is to place a shorter measuring length s successively q times along longer length l until the remaining portion r is less than the shorter length s 44 in modern words remainder r l q s q being the quotient or remainder r is the modulus the integer fractional part left over after the division 45 for euclid s method to succeed the starting lengths must satisfy two requirements i the lengths must not be 0 and ii the subtraction must be proper a test must guarantee that the smaller of the two numbers is subtracted from the larger alternately the two can be equal so their subtraction yields 0 euclid s original proof adds a third the two lengths are not prime to one another euclid stipulated this so that he could construct a reductio ad absurdum proof that the two numbers common measure is in fact the greatest 46 while nicomachus algorithm is the same as euclid s when the numbers are prime to one another it yields the number 1 for their common measure so to be precise the following is really nicomachus algorithm edit example a graphical expression on euclid s algorithm using example with 1599 and 650 example of 1599 and 650 step 1 1599 650 2 299 step 2 650 299 2 52 step 3 299 52 5 39 step 4 52 39 1 13 step 5 39 13 3 0 edit computer language for euclid s algorithm only a few instruction types are required to execute euclid s algorithm some logical tests conditional goto unconditional goto assignment replacement and subtraction a location is symbolized by upper case letter s e g s a etc the varying quantity number in a location will be written in lower case letter s and usually associated with the location s name for example location l at the start might contain the number l 3009 edit an inelegant program for euclid s algorithm inelegant is a translation of knuth s version of the algorithm with a subtraction based remainder loop replacing his use of division or a modulus instruction derived from knuth 1973 2 4 depending on the two numbers inelegant may compute the g c d in fewer steps than elegant the following algorithm is framed as knuth s 4 step version of euclid s and nichomachus but rather than using division to find the remainder it uses successive subtractions of the shorter length s from the remaining length r until r is less than s the high level description shown in boldface is adapted from knuth 1973 2 4 input 1 into two locations l and s put the numbers l and s that represent the two lengths input l s 2 initialize r make the remaining length r equal to the starting initial input length l r l e0 ensure r s 3 insure the smaller of the two numbers is in s and the larger in r if r gt s then the contents of l is the larger number so skip over the exchange steps 4 5 and 6 goto step 6 else swap the contents of r and s 4 l r this first step is redundant but will be useful for later discussion 5 r s 6 s l e1 find remainder until the remaining length r in r is less than the shorter length s in s repeatedly subtract the measuring number s in s from the remaining length r in r 7 if s gt r then done measuring so goto 10 else measure again 8 r r s 9 remainder loop goto 7 e2 is the remainder 0 either i the last measure was exact and the remainder in r is 0 program can halt or ii the algorithm must continue the last measure left a remainder in r less than measuring number in s 10 if r 0 then done so goto step 15 else continue to step 11 e3 interchange s and r the nut of euclid s algorithm use remainder r to measure what was previously smaller number s l serves as a temporary location 11 l r 12 r s 13 s l 14 repeat the measuring process goto 7 output 15 done s contains the greatest common divisor print s done 16 halt end stop edit an elegant program for euclid s algorithm the following version of euclid s algorithm requires only 6 core instructions to do what 13 are required to do by inelegant worse inelegant requires more types of instructions the flowchart of elegant can be found at the top of this article in the unstructured basic language the steps are numbered and the instruction let is the assignment instruction symbolized by 5 rem euclid s algorithm for greatest common divisor 6 print type two integers greater than 0 10 input a b 20 if b 0 then goto 80 30 if a gt b then goto 60 40 let b b a 50 goto 20 60 let a a b 70 goto 20 80 print a 90 end how elegant works in place of an outer euclid loop elegant shifts back and forth between two co loops an a gt b loop that computes a a b and a b a loop that computes b b a this works because when at last the minuend m is less than or equal to the subtrahend s difference minuend subtrahend the minuend can become s the new measuring length and the subtrahend can become the new r the length to be measured in other words the sense of the subtraction reverses edit testing the euclid algorithms does an algorithm do what its author wants it to do a few test cases usually suffice to confirm core functionality one source 47 uses 3009 and 884 knuth suggested 40902 24140 another interesting case is the two relatively prime numbers 14157 and 5950 but exceptional cases must be identified and tested will inelegant perform properly when r gt s s gt r r s ditto for elegant b gt a a gt b a b yes to all what happens when one number is zero both numbers are zero inelegant computes forever in all cases elegant computes forever when a 0 what happens if negative numbers are entered fractional numbers if the input numbers i e the domain of the function computed by the algorithm program is to include only positive integers including zero then the failures at zero indicate that the algorithm and the program that instantiates it is a partial function rather than a total function a notable failure due to exceptions is the ariane v rocket failure proof of program correctness by use of mathematical induction knuth demonstrates the application of mathematical induction to an extended version of euclid s algorithm and he proposes a general method applicable to proving the validity of any algorithm 48 tausworthe proposes that a measure of the complexity of a program be the length of its correctness proof 49 edit measuring and improving the euclid algorithms elegance compactness versus goodness speed with only 6 core instructions elegant is the clear winner compared to inelegant at 13 instructions however inelegant is faster it arrives at halt in fewer steps algorithm analysis 50 indicates why this is the case elegant does two conditional tests in every subtraction loop whereas inelegant only does one as the algorithm usually requires many loop throughs on average much time is wasted doing a b 0 test that is needed only after the remainder is computed can the algorithms be improved once the programmer judges a program fit and effective that is it computes the function intended by its author then the question becomes can it be improved the compactness of inelegant can be improved by the elimination of 5 steps but chaitin proved that compacting an algorithm cannot be automated by a generalized algorithm 51 rather it can only be done heuristically i e by exhaustive search examples to be found at busy beaver trial and error cleverness insight application of inductive reasoning etc observe that steps 4 5 and 6 are repeated in steps 11 12 and 13 comparison with elegant provides a hint that these steps together with steps 2 and 3 can be eliminated this reduces the number of core instructions from 13 to 8 which makes it more elegant than elegant at 9 steps the speed of elegant can be improved by moving the b 0 test outside of the two subtraction loops this change calls for the addition of 3 instructions b 0 a 0 goto now elegant computes the example numbers faster whether for any given a b and r s this is always the case would require a detailed analysis edit algorithmic analysis main article analysis of algorithms it is frequently important to know how much of a particular resource such as time or storage is theoretically required for a given algorithm methods have been developed for the analysis of algorithms to obtain such quantitative answers estimates for example the sorting algorithm above has a time requirement of o n using the big o notation with n as the length of the list at all times the algorithm only needs to remember two values the largest number found so far and its current position in the input list therefore it is said to have a space requirement of o 1 if the space required to store the input numbers is not counted or o n if it is counted different algorithms may complete the same task with a different set of instructions in less or more time space or effort than others for example a binary search algorithm will usually outperform a brute force sequential search when used for table lookups on sorted lists edit formal versus empirical main articles empirical algorithmics profiling computer programming and program optimization the analysis and study of algorithms is a discipline of computer science and is often practiced abstractly without the use of a specific programming language or implementation in this sense algorithm analysis resembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm and not on the specifics of any particular implementation usually pseudocode is used for analysis as it is the simplest and most general representation however ultimately most algorithms are usually implemented on particular hardware software platforms and their algorithmic efficiency is eventually put to the test using real code for the solution of a one off problem the efficiency of a particular algorithm may not have significant consequences unless n is extremely large but for algorithms designed for fast interactive commercial or long life scientific usage it may be critical scaling from small n to large n frequently exposes inefficient algorithms that are otherwise benign empirical testing is useful because it may uncover unexpected interactions that affect performance benchmarks may be used to compare before after potential improvements to an algorithm after program optimization edit fft speedup main article algorithmic efficiency to illustrate the potential improvements possible even in some extremely well established algorithms a recent significant innovation relating to fft algorithms used very heavily in the field of image processing may have decreased processing times by a factor as high as 10 000 the impact of this speedup enables for example portable computing devices as well as other devices to consume less power 52 edit classification there are various ways to classify algorithms each with its own merits edit by implementation one way to classify algorithms is by implementation means recursion or iteration a recursive algorithm is one that invokes makes reference to itself repeatedly until a certain condition matches which is a method common to functional programming iterative algorithms use repetitive constructs like loops and sometimes additional data structures like stacks to solve the given problems some problems are naturally suited for one implementation or the other for example towers of hanoi is a well understood in recursive implementation every recursive version has an equivalent but possibly more or less complex iterative version and vice versa logical an algorithm may be viewed as controlled logical deduction this notion may be expressed as algorithm logic control 53 the logic component expresses the axioms that may be used in the computation and the control component determines the way in which deduction is applied to the axioms this is the basis for the logic programming paradigm in pure logic programming languages the control component is fixed and algorithms are specified by supplying only the logic component the appeal of this approach is the elegant semantics a change in the axioms has a well defined change in the algorithm serial or parallel or distributed algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time those computers are sometimes called serial computers an algorithm designed for such an environment is called a serial algorithm as opposed to parallel algorithms or distributed algorithms parallel algorithms take advantage of computer architectures where several processors can work on a problem at the same time whereas distributed algorithms utilize multiple machines connected with a network parallel or distributed algorithms divide the problem into more symmetrical or asymmetrical subproblems and collect the results back together the resource consumption in such algorithms is not only processor cycles on each processor but also the communication overhead between the processors sorting algorithms can be parallelized efficiently but their communication overhead is expensive iterative algorithms are generally parallelizable some problems have no parallel algorithms and are called inherently serial problems deterministic or non deterministic deterministic algorithms solve the problem with exact decision at every step of the algorithm whereas non deterministic algorithms solve problems via guessing although typical guesses are made more accurate through the use of heuristics exact or approximate while many algorithms reach an exact solution approximation algorithms seek an approximation that is close to the true solution approximation may use either a deterministic or a random strategy such algorithms have practical value for many hard problems quantum algorithm run on a realistic model of quantum computation the term is usually used for those algorithms which seem inherently quantum or use some essential feature of quantum computation such as quantum superposition or quantum entanglement edit by design paradigm another way of classifying algorithms is by their design methodology or paradigm there is a certain number of paradigms each different from the other furthermore each of these categories will include many different types of algorithms some commonly found paradigms include brute force or exhaustive search this is the naive method of trying every possible solution to see which is best 54 divide and conquer a divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem usually recursively until the instances are small enough to solve easily one such example of divide and conquer is merge sorting sorting can be done on each segment of data after dividing data into segments and sorting of entire data can be obtained in the conquer phase by merging the segments a simpler variant of divide and conquer is called a decrease and conquer algorithm that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem divide and conquer divides the problem into multiple subproblems and so the conquer stage will be more complex than decrease and conquer algorithms an example of decrease and conquer algorithm is the binary search algorithm dynamic programming when a problem shows optimal substructure meaning the optimal solution to a problem can be constructed from optimal solutions to subproblems and overlapping subproblems meaning the same subproblems are used to solve many different problem instances a quicker approach called dynamic programming avoids recomputing solutions that have already been computed for example floyd warshall algorithm the shortest path to a goal from a vertex in a weighted graph can be found by using the shortest path to the goal from all adjacent vertices dynamic programming and memoization go together the main difference between dynamic programming and divide and conquer is that subproblems are more or less independent in divide and conquer whereas subproblems overlap in dynamic programming the difference between dynamic programming and straightforward recursion is in caching or memoization of recursive calls when subproblems are independent and there is no repetition memoization does not help hence dynamic programming is not a solution for all complex problems by using memoization or maintaining a table of subproblems already solved dynamic programming reduces the exponential nature of many problems to polynomial complexity the greedy method a greedy algorithm is similar to a dynamic programming algorithm but the difference is that solutions to the subproblems do not have to be known at each stage instead a greedy choice can be made of what looks best for the moment the greedy method extends the solution with the best possible decision not all feasible decisions at an algorithmic stage based on the current local optimum and the best decision not all possible decisions made in a previous stage it is not exhaustive and does not give an accurate answer to many problems but when it works it will be the fastest method the most popular greedy algorithm is finding the minimal spanning tree as given by huffman tree kruskal prim sollin linear programming when solving a problem using linear programming specific inequalities involving the inputs are found and then an attempt is made to maximize or minimize some linear function of the inputs many problems such as the maximum flow for directed graphs can be stated in a linear programming way and then be solved by a generic algorithm such as the simplex algorithm a more complex variant of linear programming is called integer programming where the solution space is restricted to the integers reduction this technique involves solving a difficult problem by transforming it into a better known problem for which we have hopefully asymptotically optimal algorithms the goal is to find a reducing algorithm whose complexity is not dominated by the resulting reduced algorithm s for example one selection algorithm for finding the median in an unsorted list involves first sorting the list the expensive portion and then pulling out the middle element in the sorted list the cheap portion this technique is also known as transform and conquer search and enumeration many problems such as playing chess can be modeled as problems on graphs a graph exploration algorithm specifies rules for moving around a graph and is useful for such problems this category also includes search algorithms branch and bound enumeration and backtracking randomized algorithms are those that make some choices randomly or pseudo randomly for some problems it can in fact be proven that the fastest solutions must involve some randomness there are two large classes of such algorithms monte carlo algorithms return a correct answer with high probability e g rp is the subclass of these that run in polynomial time las vegas algorithms always return the correct answer but their running time is only probabilistically bound e g zpp in optimization problems heuristic algorithms do not try to find an optimal solution but an approximate solution where the time or resources are limited they are not practical to find perfect solutions an example of this would be local search tabu search or simulated annealing algorithms a class of heuristic probabilistic algorithms that vary the solution of a problem by a random amount the name simulated annealing alludes to the metallurgic term meaning the heating and cooling of metal to achieve freedom from defects the purpose of the random variance is to find close to globally optimal solutions rather than simply locally optimal ones the idea being that the random element will be decreased as the algorithm settles down to a solution approximation algorithms are those heuristic algorithms that additionally provide some bounds on the error genetic algorithms attempt to find solutions to problems by mimicking biological evolutionary processes with a cycle of random mutations yielding successive generations of solutions thus they emulate reproduction and survival of the fittest in genetic programming this approach is extended to algorithms by regarding the algorithm itself as a solution to a problem edit by field of study see also list of algorithms every field of science has its own problems and needs efficient algorithms related problems in one field are often studied together some example classes are search algorithms sorting algorithms merge algorithms numerical algorithms graph algorithms string algorithms computational geometric algorithms combinatorial algorithms medical algorithms machine learning cryptography data compression algorithms and parsing techniques fields tend to overlap with each other and algorithm advances in one field may improve those of other sometimes completely unrelated fields for example dynamic programming was invented for optimization of resource consumption in industry but is now used in solving a broad range of problems in many fields edit by complexity see also complexity class 160 and parameterized complexity algorithms can be classified by the amount of time they need to complete compared to their input size there is a wide variety some algorithms complete in linear time relative to input size some do so in an exponential amount of time or even worse and some never halt additionally some problems may have multiple algorithms of differing complexity while other problems might have no algorithms or no known efficient algorithms there are also mappings from some problems to other problems owing to this it was found to be more suitable to classify the problems themselves instead of the algorithms into equivalence classes based on the complexity of the best possible algorithms for them burgin 2005 p 160 24 uses a generalized definition of algorithms that relaxes the common requirement that the output of the algorithm that computes a function must be determined after a finite number of steps he defines a super recursive class of algorithms as a class of algorithms in which it is possible to compute functions not computable by any turing machine burgin 2005 p 160 107 this is closely related to the study of methods of hypercomputation edit continuous algorithms the adjective continuous when applied to the word algorithm can mean an algorithm operating on data that represents continuous quantities even though this data is represented by discrete approximations such algorithms are studied in numerical analysis or an algorithm in the form of a differential equation that operates continuously on the data running on an analog computer 55 edit legal issues see also software patents for a general overview of the patentability of software including computer implemented algorithms algorithms by themselves are not usually patentable in the united states a claim consisting solely of simple manipulations of abstract concepts numbers or signals does not constitute processes uspto 2006 and hence algorithms are not patentable as in gottschalk v benson however practical applications of algorithms are sometimes patentable for example in diamond v diehr the application of a simple feedback algorithm to aid in the curing of synthetic rubber was deemed patentable the patenting of software is highly controversial and there are highly criticized patents involving algorithms especially data compression algorithms such as unisys lzw patent additionally some cryptographic algorithms have export restrictions see export of cryptography edit etymology the word algorithm or algorism in some other writing versions comes from the name al khw rizm pronounced in classical arabic as al khwarithmi al khw rizm persian c 780 850 was a persian mathematician astronomer geographer and a scholar in the house of wisdom in baghdad whose name means the native of khwarezm a city that was part of the greater iran during his era and now is in modern day uzbekistan 56 57 58 he wrote a treatise in the arabic language during the 9th century which was translated into latin in the 12th century under the title algoritmi de numero indorum this title means algoritmi on the numbers of the indians where algoritmi was the translator s latinization of al khwarizmi s name 59 al khwarizmi was the most widely read mathematician in europe in the late middle ages primarily through his other book the algebra 60 in late medieval latin algorismus the corruption of his name simply meant the decimal number system that is still the meaning of modern english algorism in 17th century french the word s form but not its meaning changed to algorithme english adopted the french very soon afterwards but it wasn t until the late 19th century that algorithm took on the meaning that it has in modern english 61 edit history development of the notion of algorithm edit origin the word algorithm comes from the name of the 9th century persian muslim mathematician abu abdullah muhammad ibn musa al khwarizmi the word algorism originally referred only to the rules of performing arithmetic using hindu arabic numerals but evolved via european latin translation of al khwarizmi s name into algorithm by the 18th century the use of the word evolved to include all definite procedures for solving problems or performing tasks 62 edit discrete and distinguishable symbols tally marks to keep track of their flocks their sacks of grain and their money the ancients used tallying accumulating stones or marks scratched on sticks or making discrete symbols in clay through the babylonian and egyptian use of marks and symbols eventually roman numerals and the abacus evolved dilson p 160 16 41 tally marks appear prominently in unary numeral system arithmetic used in turing machine and post turing machine computations edit manipulation of symbols as place holders for numbers algebra the work of the ancient greek geometers euclidean algorithm persian mathematician al khwarizmi from whose name the terms algorism and algorithm are derived and western european mathematicians culminated in leibniz s notion of the calculus ratiocinator ca 1680 a good century and a half ahead of his time leibniz proposed an algebra of logic an algebra that would specify the rules for manipulating logical concepts in the manner that ordinary algebra specifies the rules for manipulating numbers 63 edit mechanical contrivances with discrete states the clock bolter credits the invention of the weight driven clock as the key invention of europe in the middle ages in particular the verge escapement 64 that provides us with the tick and tock of a mechanical clock the accurate automatic machine 65 led immediately to mechanical automata beginning in the 13th century and finally to computational machines the difference engine and analytical engines of charles babbage and countess ada lovelace mid 19th century 66 lovelace is credited with the first creation of an algorithm intended for processing on a computer babbage s analytical engine the first device considered a real turing complete computer instead of just a calculator and is sometimes called history s first programmer as a result though a full implementation of babbage s second device would not be realized until decades after her lifetime logical machines 1870 stanley jevons logical abacus and logical machine the technical problem was to reduce boolean equations when presented in a form similar to what are now known as karnaugh maps jevons 1880 describes first a simple abacus of slips of wood furnished with pins contrived so that any part or class of the logical combinations can be picked out mechanically more recently however i have reduced the system to a completely mechanical form and have thus embodied the whole of the indirect process of inference in what may be called a logical machine his machine came equipped with certain moveable wooden rods and at the foot are 21 keys like those of a piano etc with this machine he could analyze a syllogism or any other simple logical argument 67 this machine he displayed in 1870 before the fellows of the royal society 68 another logician john venn however in his 1881 symbolic logic turned a jaundiced eye to this effort i have no high estimate myself of the interest or importance of what are sometimes called logical machines it does not seem to me that any contrivances at present known or likely to be discovered really deserve the name of logical machines see more at algorithm characterizations but not to be outdone he too presented a plan somewhat analogous i apprehend to prof jevon s abacus and a gain corresponding to prof jevons s logical machine the following contrivance may be described i prefer to call it merely a logical diagram machine but i suppose that it could do very completely all that can be rationally expected of any logical machine 69 jacquard loom hollerith punch cards telegraphy and telephony the electromechanical relay bell and newell 1971 indicate that the jacquard loom 1801 precursor to hollerith cards punch cards 1887 and telephone switching technologies were the roots of a tree leading to the development of the first computers 70 by the mid 19th century the telegraph the precursor of the telephone was in use throughout the world its discrete and distinguishable encoding of letters as dots and dashes a common sound by the late 19th century the ticker tape ca 1870s was in use as was the use of hollerith cards in the 1890 u s census then came the teleprinter ca 1910 with its punched paper use of baudot code on tape telephone switching networks of electromechanical relays invented 1835 was behind the work of george stibitz 1937 the inventor of the digital adding device as he worked in bell laboratories he observed the burdensome use of mechanical calculators with gears he went home one evening in 1937 intending to test his idea when the tinkering was over stibitz had constructed a binary adding device 71 davis 2000 observes the particular importance of the electromechanical relay with its two binary states open and closed it was only with the development beginning in the 1930s of electromechanical calculators using electrical relays that machines were built having the scope babbage had envisioned 72 edit mathematics during the 19th century up to the mid 20th century symbols and rules in rapid succession the mathematics of george boole 1847 1854 gottlob frege 1879 and giuseppe peano 1888 1889 reduced arithmetic to a sequence of symbols manipulated by rules peano s the principles of arithmetic presented by a new method 1888 was the first attempt at an axiomatization of mathematics in a symbolic language 73 but heijenoort gives frege 1879 this kudos frege s is perhaps the most important single work ever written in logic in which we see a formula language that is a lingua characterica a language written with special symbols for pure thought that is free from rhetorical embellishments constructed from specific symbols that are manipulated according to definite rules 74 the work of frege was further simplified and amplified by alfred north whitehead and bertrand russell in their principia mathematica 1910 1913 the paradoxes at the same time a number of disturbing paradoxes appeared in the literature in particular the burali forti paradox 1897 the russell paradox 1902 03 and the richard paradox 75 the resultant considerations led to kurt g del s paper 1931 he specifically cites the paradox of the liar that completely reduces rules of recursion to numbers effective calculability in an effort to solve the entscheidungsproblem defined precisely by hilbert in 1928 mathematicians first set about to define what was meant by an effective method or effective calculation or effective calculability i e a calculation that would succeed in rapid succession the following appeared alonzo church stephen kleene and j b rosser s calculus 76 a finely honed definition of general recursion from the work of g del acting on suggestions of jacques herbrand cf g del s princeton lectures of 1934 and subsequent simplifications by kleene 77 church s proof 78 that the entscheidungsproblem was unsolvable emil post s definition of effective calculability as a worker mindlessly following a list of instructions to move left or right through a sequence of rooms and while there either mark or erase a paper or observe the paper and make a yes no decision about the next instruction 79 alan turing s proof of that the entscheidungsproblem was unsolvable by use of his a automatic machine 80 in effect almost identical to post s formulation j barkley rosser s definition of effective method in terms of a machine 81 s c kleene s proposal of a precursor to church thesis that he called thesis i 82 and a few years later kleene s renaming his thesis church s thesis 83 and proposing turing s thesis 84 edit emil post 1936 and alan turing 1936 37 1939 here is a remarkable coincidence of two men not knowing each other but describing a process of men as computers working on computations and they yield virtually identical definitions emil post 1936 described the actions of a computer human being as follows two concepts are involved that of a symbol space in which the work leading from problem to answer is to be carried out and a fixed unalterable set of directions his symbol space would be a two way infinite sequence of spaces or boxes the problem solver or worker is to move and work in this symbol space being capable of being in and operating in but one box at a time a box is to admit of but two possible conditions i e being empty or unmarked and having a single mark in it say a vertical stroke one box is to be singled out and called the starting point a specific problem is to be given in symbolic form by a finite number of boxes i e input being marked with a stroke likewise the answer i e output is to be given in symbolic form by such a configuration of marked boxes a set of directions applicable to a general problem sets up a deterministic process when applied to each specific problem this process will terminate only when it comes to the direction of type c i e stop 85 see more at post turing machine alan turing s statue at bletchley park alan turing s work 86 preceded that of stibitz 1937 it is unknown whether stibitz knew of the work of turing turing s biographer believed that turing s use of a typewriter like model derived from a youthful interest alan had dreamt of inventing typewriters as a boy mrs turing had a typewriter and he could well have begun by asking himself what was meant by calling a typewriter mechanical 87 given the prevalence of morse code and telegraphy ticker tape machines and teletypewriters we might conjecture that all were influences turing his model of computation is now called a turing machine begins as did post with an analysis of a human computer that he whittles down to a simple set of basic motions and states of mind but he continues a step further and creates a machine as a model of computation of numbers 88 computing is normally done by writing certain symbols on paper we may suppose this paper is divided into squares like a child s arithmetic book i assume then that the computation is carried out on one dimensional paper i e on a tape divided into squares i shall also suppose that the number of symbols which may be printed is finite the behavior of the computer at any moment is determined by the symbols which he is observing and his state of mind at that moment we may suppose that there is a bound b to the number of symbols or squares which the computer can observe at one moment if he wishes to observe more he must use successive observations we will also suppose that the number of states of mind which need be taken into account is finite let us imagine that the operations performed by the computer to be split up into simple operations which are so elementary that it is not easy to imagine them further divided 89 turing s reduction yields the following the simple operations must therefore include a changes of the symbol on one of the observed squares b changes of one of the squares observed to another square within l squares of one of the previously observed squares it may be that some of these change necessarily invoke a change of state of mind the most general single operation must therefore be taken to be one of the following a a possible change a of symbol together with a possible change of state of mind b a possible change b of observed squares together with a possible change of state of mind we may now construct a machine to do the work of this computer 89 a few years later turing expanded his analysis thesis definition with this forceful expression of it a function is said to be effectively calculable if its values can be found by some purely mechanical process although it is fairly easy to get an intuitive grasp of this idea it is nevertheless desirable to have some more definite mathematical expressible definition he discusses the history of the definition pretty much as presented above with respect to g del herbrand kleene church turing and post we may take this statement literally understanding by a purely mechanical process one which could be carried out by a machine it is possible to give a mathematical description in a certain normal form of the structures of these machines the development of these ideas leads to the author s definition of a computable function and to an identification of computability with effective calculability we shall use the expression computable function to mean a function calculable by a machine and we let effectively calculable refer to the intuitive idea without particular identification with any one of these definitions 90 edit j b rosser 1939 and s c kleene 1943 j barkley rosser defined an effective mathematical method in the following manner boldface added effective method is used here in the rather special sense of a method each step of which is precisely determined and which is certain to produce the answer in a finite number of steps with this special meaning three different precise definitions have been given to date his footnote 5 see discussion immediately below the simplest of these to state due to post and turing says essentially that an effective method of solving certain sets of problems exists if one can build a machine which will then solve any problem of the set with no human intervention beyond inserting the question and later reading the answer all three definitions are equivalent so it doesn t matter which one is used moreover the fact that all three are equivalent is a very strong argument for the correctness of any one rosser 1939 225 6 rosser s footnote 5 references the work of 1 church and kleene and their definition of definability in particular church s use of it in his an unsolvable problem of elementary number theory 1936 2 herbrand and g del and their use of recursion in particular g del s use in his famous paper on formally undecidable propositions of principia mathematica and related systems i 1931 and 3 post 1936 and turing 1936 7 in their mechanism models of computation stephen c kleene defined as his now famous thesis i known as the church turing thesis but he did this in the following context boldface in original 12 algorithmic theories in setting up a complete algorithmic theory what we do is to describe a procedure performable for each set of values of the independent variables which procedure necessarily terminates and in such manner that from the outcome we can read a definite answer yes or no to the question is the predicate value true kleene 1943 273 edit history after 1950 a number of efforts have been directed toward further refinement of the definition of algorithm and activity is on going because of issues surrounding in particular foundations of mathematics especially the church turing thesis and philosophy of mind especially arguments around artificial intelligence for more see algorithm characterizations edit see also abstract machine algorithm engineering algorithmic composition algorithmic trading garbage in garbage out algorithmic synthesis list of important publications in theoretical computer science algorithms introduction to algorithms list of algorithm general topics numerical mathematics consortium theory of computation computability theory computational complexity theory edit notes any classical mathematical algorithm for example can be described in a finite number of english words rogers 1987 2 well defined with respect to the agent that executes the algorithm there is a computing agent usually human which can react to the instructions and carry out the computations rogers 1987 2 an algorithm is a procedure for computing a function with respect to some chosen notation for integers this limitation to numerical functions results in no loss of generality rogers 1987 1 an algorithm has zero or more inputs i e quantities which are given to it initially before the algorithm begins knuth 1973 5 a procedure which has all the characteristics of an algorithm except that it possibly lacks finiteness may be called a computational method knuth 1973 5 an algorithm has one or more outputs i e quantities which have a specified relation to the inputs knuth 1973 5 whether or not a process with random interior processes not including the input is an algorithm is debatable rogers opines that a computation is carried out in a discrete stepwise fashion without use of continuous methods or analogue devices carried forward deterministically without resort to random methods or devices e g dice rogers 1987 2 kleene 1943 in davis 1965 274 rosser 1939 in davis 1965 225 moschovakis yiannis n 2001 what is an algorithm in engquist b schmid w mathematics unlimited 2001 and beyond springer pp 160 919 936 part ii isbn 160 9783540669135 http citeseer ist psu edu viewdoc summary doi 10 1 1 32 8093 stone 1973 4 stone simply requires that it must terminate in a finite number of steps stone 1973 7 8 boolos and jeffrey 1974 1999 19 cf stone 1972 5 knuth 1973 7 states in practice we not only want algorithms we want good agorithms one criterion of goodness is the length of time taken to perform the algorithm other criteria are the adaptability of the algorithm to computers its simplicty and elegance etc cf stone 1973 6 stone 1973 7 8 states that there must be a procedure that a robot i e computer can follow in order to determine pecisely how to obey the instruction stone adds finiteness of the process and definiteness having no ambiguity in the instructions to this definition knuth loc cit minsky 1967 105 gurevich 2000 1 3 sipser 2006 157 knuth 1973 7 chaitin 2005 32 rogers 1987 1 2 in his essay calculations by man and machine conceptual analysis seig 2002 390 credits this distinction to robin gandy cf wilfred seig et al 2002 reflections on the foundations of mathematics essays in honor of solomon feferman association for symbolic logic a k peters ltd natick ma cf gandy 1980 126 robin gandy church s thesis and principles for mechanisms appearing on pp 123 148 in j barwise et al 1980 the kleene symposium north holland publishing company a robot a computer is a robot that will perform any task that can be described as a sequence of instructions cf stone 1972 3 lambek s abacus is a countably infinite number of locations holes wires etc together with an unlimited supply of counters pebbles beads etc the locations are distinguishable the counters are not the holes will have unlimited capacity and standing by is an agent who understands and is able to carry out the list of instructions lambek 1961 295 lambek references melzak who defines his q machine as an indefinitely large number of locations an indefinitely large supply of counters distributed among these locations a program and an operator whose sole purpose is to carry out the program melzak 1961 283 b b j loc cit add the stipulation that the holes are capable of holding any number of stones p 46 both melzak and lambek appear in the canadian mathematical bulletin vol 4 no 3 september 1961 if no confusion will result the word counters can be dropped and a location can be said to contain a single number we say that an instruction is effective if there is a procedure that the robot can follow in order to determine precisely how to obey the instruction stone 1972 6 cf minsky 1967 chapter 11 computer models and chapter 14 very simple bases for computability pp 255 281 in particular cf knuth 1973 3 but always preceded by if then to avoid improper subtraction however a few different assignment instructions e g decrement increment and zero clear empty for a minsky machine are also required for turing completeness their exact specification is somewhat up to the designer the unconditional goto is a convenience it can be constructed by initializing a dedicated location to zero e g the instruction z 0 thereafter the instruction if z 0 then goto xxx will be unconditional knuth 1973 4 stone 1972 5 methods for extracting roots are not trivial see methods of computing square roots cf page 875 in peter van emde boas s machine models and simulation in jan van leeuwen ed 1990 handbook of theoretical computer science volume a algorithms and compexity the mit press elsevier isbn 0 444 88071 2 volume a john g kemeny and thomas e kurtz 1985 back to basic the history corruption and future of the language addison wesley publishing company inc reading ma isbn 0 201 13433 0 tausworthe 1977 101 tausworthe 1977 142 knuth 1973 section 1 2 1 expanded by tausworthe 1977 at pages 100ff and chapter 9 1 cf tausworthe 1977 heath 1908 300 hawking s dover 2005 edition derives from heath let cd measuring bf leave fa less than itself this is a neat abbreviation for saying measure along ba successive lengths equal to cd until a point f is reached such that the length fa remaining is less than cd in other words let bf be the largest exact multiple of cd contained in ba heath 1908 297 for modern treatments using division in the algorithm see hardy and wright 1979 180 knuth 1973 2 volume 1 plus more discussion of euclid s algorithm in knuth 1969 293 297 volume 2 euclid covers this question in his proposition 1 euclid s elements book vii proposition 2 aleph0 clarku edu http aleph0 clarku edu djoyce java elements bookvii propvii2 html retrieved 2012 05 20 knuth 1973 13 18 he credits the formulation of algorithm proving in terms of asertions and induction to r w floyd peter naur c a r hoare h h goldstine and j von neumann tausworth 1977 borrows knuth s euclid example and extends knuth s method in section 9 1 formal proofs pages 288 298 tausworthe 1997 294 cf knuth 1973 7 vol i and his more detailed analyses on pp 1969 294 313 vol ii breakdown occurs when an algorithm tries to compact itself success would solve the halting problem haitham hassanieh piotr indyk dina katabi and eric price simple and practical algorithm for sparse fourier transform acm siam symposium on discrete algorithms soda kyoto january 2012 see also the sfft web page kowalski 1979 sue carroll taz daughtrey 2007 07 04 fundamental concepts for the software quality engineer pp 160 282 et seq isbn 160 978 0 87389 720 4 http books google com id bz cl3b05icc amp pg pa282 adaptation and learning in automatic systems page 54 ya z tsypkin z j nikolic academic press 1971 isbn 978 0 12 702050 1 toomer 1990 citation not found hogendijk jan p 1998 al khwarzimi pythagoras 38 2 4 5 http www kennislink nl web show id 116543 dead link oaks jeffrey a was al khwarizmi an applied algebraist university of indianapolis http facstaff uindy edu oaks mhmc htm retrieved 2008 05 30 al khwarizmi the inventor of algebra by corona brezina 2006 foremost mathematical texts in history according to carl b boyer etymology of algorithm at dictionary reference com history of algorithms and algorithmics scriptol com http www scriptol com programming algorithm history php retrieved 2012 11 07 davis 2000 18 bolter 1984 24 bolter 1984 26 bolter 1984 33 34 204 206 all quotes from w stanley jevons 1880 elementary lessons in logic deductive and inductive macmillan and co london and new york republished as a googlebook cf jevons 1880 199 201 louis couturat 1914 the algebra of logic the open court publishing company chicago and london republished as a googlebook cf couturat 1914 75 76 gives a few more details interestingly he compares this to a typewriter as well as a piano jevons states that the account is to be found at jan 20 1870 the proceedings of the royal society jevons 1880 199 200 all quotes from john venn 1881 symbolic logic macmillan and co london republished as a googlebook cf venn 1881 120 125 the interested reader can find a deeper explanation in those pages bell and newell diagram 1971 39 cf davis 2000 melina hill valley news correspondent a tinkerer gets a place in history valley news west lebanon nh thursday march 31 1983 page 13 davis 2000 14 van heijenoort 1967 81ff van heijenoort s commentary on frege s begriffsschrift a formula language modeled upon that of arithmetic for pure thought in van heijenoort 1967 1 dixon 1906 cf kleene 1952 36 40 cf footnote in alonzo church 1936a in davis 1965 90 and 1936b in davis 1965 110 kleene 1935 6 in davis 1965 237ff kleene 1943 in davis 1965 255ff church 1936 in davis 1965 88ff cf formulation i post 1936 in davis 1965 289 290 turing 1936 7 in davis 1965 116ff rosser 1939 in davis 1965 226 kleene 1943 in davis 1965 273 274 kleene 1952 300 317 kleene 1952 376 turing 1936 7 in davis 1965 289 290 turing 1936 in davis 1965 turing 1939 in davis 1965 160 hodges p 96 turing 1936 7 116 a b turing 1936 7 in davis 1965 136 turing 1939 in davis 1965 160 edit references axt p 1959 on a subrecursive hierarchy and primitive recursive degrees transactions of the american mathematical society 92 pp 160 85 105 bell c gordon and newell allen 1971 computer structures readings and examples mcgraw hill book company new york isbn 0 07 004357 4 blass andreas gurevich yuri 2003 algorithms a quest for absolute definitions bulletin of european association for theoretical computer science 81 http research microsoft com gurevich opera 164 pdf includes an excellent bibliography of 56 references boolos george jeffrey richard 1974 1980 1989 1999 computability and logic 4th ed cambridge university press london isbn 160 0 521 20402 x cf chapter 3 turing machines where they discuss certain enumerable sets not effectively mechanically enumerable burgin m super recursive algorithms monographs in computer science springer 2005 isbn 0 387 95569 0 campagnolo m l moore c and costa j f 2000 an analog characterization of the subrecursive functions in proc of the 4th conference on real numbers and computers odense university pp 160 91 109 church alonzo 1936a an unsolvable problem of elementary number theory the american journal of mathematics 58 2 345 363 doi 10 2307 2371045 jstor 160 2371045 reprinted in the undecidable p 160 89ff the first expression of church s thesis see in particular page 100 the undecidable where he defines the notion of effective calculability in terms of an algorithm and he uses the word terminates etc church alonzo 1936b a note on the entscheidungsproblem the journal of symbolic logic 1 1 40 41 doi 10 2307 2269326 jstor 160 2269326 church alonzo 1936 correction to a note on the entscheidungsproblem the journal of symbolic logic 1 3 101 102 doi 10 2307 2269030 jstor 160 2269030 reprinted in the undecidable p 160 110ff church shows that the entscheidungsproblem is unsolvable in about 3 pages of text and 3 pages of footnotes daffa ali abdullah al 1977 the muslim contribution to mathematics london croom helm isbn 160 0 85664 464 1 davis martin 1965 the undecidable basic papers on undecidable propositions unsolvable problems and computable functions new york raven press isbn 160 0 486 43228 9 davis gives commentary before each article papers of g del alonzo church turing rosser kleene and emil post are included those cited in the article are listed here by author s name davis martin 2000 engines of logic mathematicians and the origin of the computer new york w w nortion isbn 160 0 393 32229 7 davis offers concise biographies of leibniz boole frege cantor hilbert g del and turing with von neumann as the show stealing villain very brief bios of joseph marie jacquard babbage ada lovelace claude shannon howard aiken etc paul e black algorithm at the nist dictionary of algorithms and data structures dennett daniel 1995 darwin s dangerous idea new york touchstone simon amp schuster isbn 160 0 684 80290 2 yuri gurevich sequential abstract state machines capture sequential algorithms acm transactions on computational logic vol 1 no 1 july 2000 pages 77 111 includes bibliography of 33 sources kleene c stephen 1936 general recursive functions of natural numbers mathematische annalen 112 5 727 742 doi 10 1007 bf01565439 presented to the american mathematical society september 1935 reprinted in the undecidable p 160 237ff kleene s definition of general recursion known now as mu recursion was used by church in his 1935 paper an unsolvable problem of elementary number theory that proved the decision problem to be undecidable i e a negative result kleene c stephen 1943 recursive predicates and quantifiers american mathematical society transactions 54 1 41 73 doi 10 2307 1990131 jstor 160 1990131 reprinted in the undecidable p 160 255ff kleene refined his definition of general recursion and proceeded in his chapter 12 algorithmic theories to posit thesis i p 160 274 he would later repeat this thesis in kleene 1952 300 and name it church s thesis kleene 1952 317 i e the church thesis kleene stephen c first edition 1952 introduction to metamathematics tenth edition 1991 ed north holland publishing company isbn 160 0 7204 2103 9 excellent accessible readable reference source for mathematical foundations knuth donald 1997 fundamental algorithms third edition reading massachusetts addison wesley isbn 160 0 201 89683 4 knuth donald 1969 volume 2 seminumerical algorithms the art of computer programming first edition reading massachusetts addison wesley kosovsky n k elements of mathematical logic and its application to the theory of subrecursive algorithms lsu publ leningrad 1981 kowalski robert 1979 algorithm logic control communications of the acm 22 7 424 436 doi 10 1145 359131 359136 a a markov 1954 theory of algorithms translated by jacques j schorr kon and pst staff imprint moscow academy of sciences of the ussr 1954 i e jerusalem israel program for scientific translations 1961 available from the office of technical services u s dept of commerce washington description 444 p 160 28 160 cm added t p in russian translation of works of the mathematical institute academy of sciences of the ussr v 42 original title teoriya algerifmov qa248 m2943 dartmouth college library u s dept of commerce office of technical services number ots 60 51085 minsky marvin 1967 computation finite and infinite machines first ed prentice hall englewood cliffs nj isbn 160 0 13 165449 7 minsky expands his idea of an algorithm an effective procedure in chapter 5 1 computability effective procedures and algorithms infinite machines post emil 1936 finite combinatory processes formulation i the journal of symbolic logic 1 3 103 105 doi 10 2307 2269031 jstor 160 2269031 reprinted in the undecidable p 289ff post defines a simple algorithmic like process of a man writing marks or erasing marks and going from box to box and eventually halting as he follows a list of simple instructions this is cited by kleene as one source of his thesis i the so called church turing thesis rogers jr hartley 1987 theory of recursive functions and effective computability the mit press isbn 160 0 262 68052 1 pbk rosser j b 1939 an informal exposition of proofs of godel s theorem and church s theorem journal of symbolic logic 4 reprinted in the undecidable p 160 223ff herein is rosser s famous definition of effective method a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps a machine which will then solve any problem of the set with no human intervention beyond inserting the question and later reading the answer p 160 225 226 the undecidable scott michael l 2009 programming language pragmatics 3rd ed morgan kaufmann publishers elsevier isbn 160 978 0 12 374514 9 sipser michael 2006 introduction to the theory of computation pws publishing company isbn 160 0 534 94728 x stone harold s 1972 introduction to computer organization and data structures 1972 ed mcgraw hill new york isbn 160 0 07 061726 0 cf in particular the first chapter titled algorithms turing machines and programs his succinct informal definition any sequence of instructions that can be obeyed by a robot is called an algorithm p 160 4 tausworthe robert c 1977 standardized development of computer software part 1 methods englewood cliffs nj prentice hall inc isbn 160 0 13 842195 1 turing alan m 1936 7 on computable numbers with an application to the entscheidungsproblem proceedings of the london mathematical society series 2 42 230 265 doi 10 1112 plms s2 42 1 230 corrections ibid vol 43 1937 pp 160 544 546 reprinted in the undecidable p 160 116ff turing s famous paper completed as a master s dissertation while at king s college cambridge uk turing alan m 1939 systems of logic based on ordinals proceedings of the london mathematical society series 2 45 161 228 doi 10 1112 plms s2 45 1 161 reprinted in the undecidable p 160 155ff turing s paper that defined the oracle was his phd thesis while at princeton usa united states patent and trademark office 2006 2106 02 gt mathematical algorithms 2100 patentability manual of patent examining procedure mpep latest revision august 2006 edit secondary references bolter david j 1984 turing s man western culture in the computer age 1984 ed the university of north carolina press chapel hill nc isbn 160 0 8078 1564 0 isbn 0 8078 4108 0 pbk dilson jesse 2007 the abacus 1968 1994 ed st martin s press ny isbn 160 0 312 10409 x isbn 0 312 10409 x pbk van heijenoort jean 2001 from frege to g del a source book in mathematical logic 1879 1931 1967 ed harvard university press cambridge ma isbn 160 0 674 32449 8 3rd edition 1976 isbn 0 674 32449 8 pbk hodges andrew 1983 alan turing the enigma 1983 ed simon and schuster new york isbn 160 0 671 49207 1 isbn 0 671 49207 1 cf chapter the spirit of truth for a history leading to and a discussion of his proof edit further reading jean luc chabert velyne barbin a history of algorithms from the pebble to the microchip springer 1999 isbn 3 540 63369 3 david harel yishai a feldman algorithmics the spirit of computing edition 3 pearson education 2004 isbn 0 321 11784 0 knuth donald e 2000 selected papers on analysis of algorithms stanford california center for the study of language and information knuth donald e 2010 selected papers on design of algorithms stanford california center for the study of language and information david berlinski the advent of the algorithm the 300 year journey from an idea to the computer mariner books 2001 isbn 978 0 15 601391 8 edit external links look up algorithm in wiktionary the free dictionary wikibooks has a book on the topic of algorithms at wikiversity you can learn more and teach others about algorithm at the department of algorithm hazewinkel michiel ed 2001 algorithm encyclopedia of mathematics springer isbn 160 978 1 55608 010 4 http www encyclopediaofmath org index php title p a011780 algorithms at the open directory project weisstein eric w algorithm from mathworld dictionary of algorithms and data structures national institute of standards and technology algorithms and data structures by dr nikolai bezroukov algorithm repositories the stony brook algorithm repository state university of new york at stony brook netlib repository university of tennessee and oak ridge national laboratory collected algorithms of the acm association for computing machinery the stanford graphbase stanford university combinatorica university of iowa and state university of new york at stony brook library of efficient datastructures and algorithms leda previously from max planck institut f r informatik lecture notes algorithms course materials jeff erickson university of illinois 