rest redirects here for other uses see rest this article has multiple issues please help improve it or discuss these issues on the talk page this article may require cleanup to meet wikipedia s quality standards the specific problem is per talk page please help improve this article if you can july 2012 this article includes a list of references but its sources remain unclear because it has insufficient inline citations please help to improve this article by introducing more precise citations june 2012 representational state transfer rest is a style of software architecture for distributed systems such as the world wide web rest has emerged as a predominant web service design model the term representational state transfer was introduced and defined in 2000 by roy fielding in his doctoral dissertation 1 2 fielding is one of the principal authors of the hypertext transfer protocol http specification versions 1 0 and 1 1 3 4 contents 1 about 2 key goals 3 constraints 4 concept 4 1 vocabulary re use vs its arbitrary extension http and soap 5 guiding principles of the interface 6 central principle 7 restful web services 8 outside the web 8 1 cmip 8 2 public implementations 9 see also 10 notes 11 references edit about the rest architectural style was developed by w3c technical architecture group 5 in parallel with http 1 1 based on the existing design of http 1 0 6 the world wide web represents the largest implementation of a system conforming to the rest architectural style rest exemplifies how the web s architecture emerged by characterizing and constraining the macro interactions of the four components of the web namely origin servers gateways proxies and clients without imposing limitations on the individual participants as such rest essentially governs the proper behavior of participants rest style architectures consist of clients and servers clients initiate requests to servers servers process requests and return appropriate responses requests and responses are built around the transfer of representations of resources a resource can be essentially any coherent and meaningful concept that may be addressed a representation of a resource is typically a document that captures the current or intended state of a resource the client begins sending requests when it is ready to make the transition to a new state while one or more requests are outstanding the client is considered in transition the representation of each application state contains links that may be used the next time the client chooses to initiate a new state transition 7 rest facilitates the transaction between web servers by allowing loose coupling between different services rest is less strongly typed than its counterpart soap the rest language uses nouns and verbs and has an emphasis on readability unlike soap rest does not require xml parsing and does not require a message header to and from a service provider this ultimately uses less bandwidth rest error handling also differs from that used by soap edit key goals key goals of rest include scalability of component interactions generality of interfaces independent deployment of components intermediary components to reduce latency enforce security and encapsulate legacy systems rest has been applied to describe the desired web architecture to help identify existing problems to compare alternative solutions and to ensure that protocol extensions would not violate the core constraints that make the web successful fielding describes rest s effect on scalability thus rest s client server separation of concerns simplifies component implementation reduces the complexity of connector semantics improves the effectiveness of performance tuning and increases the scalability of pure server components layered system constraints allow intermediaries proxies gateways and firewalls to be introduced at various points in the communication without changing the interfaces between components thus allowing them to assist in communication translation or improve performance via large scale shared caching rest lets intermediate processing by constraining messages be self descriptive interaction is stateless between requests standard methods and media types are used to indicate semantics and exchange information and responses explicitly indicate cacheability 8 edit constraints the rest architectural style describes the following six constraints applied to the architecture while leaving the implementation of the individual components free to design client server a uniform interface separates clients from servers this separation of concerns means that for example clients are not concerned with data storage which remains internal to each server so that the portability of client code is improved servers are not concerned with the user interface or user state so that servers can be simpler and more scalable servers and clients may also be replaced and developed independently as long as the interface between them is not altered stateless the client server communication is further constrained by no client context being stored on the server between requests each request from any client contains all of the information necessary to service the request and any session state is held in the client cacheable as on the world wide web clients can cache responses responses must therefore implicitly or explicitly define themselves as cacheable or not to prevent clients reusing stale or inappropriate data in response to further requests well managed caching partially or completely eliminates some client server interactions further improving scalability and performance layered system a client cannot ordinarily tell whether it is connected directly to the end server or to an intermediary along the way intermediary servers may improve system scalability by enabling load balancing and by providing shared caches they may also enforce security policies code on demand optional servers are able to temporarily extend or customize the functionality of a client by the transfer of executable code examples of this may include compiled components such as java applets and client side scripts such as javascript uniform interface the uniform interface between clients and servers discussed below simplifies and decouples the architecture which enables each part to evolve independently the four guiding principles of this interface are detailed below the only optional constraint of rest architecture is code on demand conforming to the rest constraints is generally referred to as being restful 9 if a service violates any of the required constraints it cannot strictly be considered restful complying with these constraints and thus conforming to the rest architectural style enables any kind of distributed hypermedia system to have desirable emergent properties such as performance scalability simplicity modifiability visibility portability and reliability edit concept representational state transfer is intended to evoke an image of how a well designed web application behaves presented with a network of web pages a virtual state machine the user progresses through an application by selecting links state transitions resulting in the next page representing the next state of the application being transferred to the user and rendered for his use 10 rest was initially described in the context of http but it is not limited to that protocol restful architectures may be based on other application layer protocols if they already provide a rich and uniform vocabulary for applications based on the transfer of meaningful representational state restful applications maximize the use of the existing well defined interface and other built in capabilities provided by the chosen network protocol and minimize the addition of new application specific features on top of it edit vocabulary re use vs its arbitrary extension http and soap in addition to uris internet media types request and response codes etc http has a rich vocabulary of methods get post put delete etc rest uses these methods and other existing features of the well known well defined http protocol for example layered proxy and gateway components perform additional functions on the network such as http caching and security enforcement soap rpc over http on the other hand encourages each application designer to define new application specific methods that supplant http methods getusers getnewuserssince date sincedate savepurchaseorder string customerid string purchaseorderid etc this additive re invention of the wheel vocabulary defined on the spot and subject to individual judgment or preference disregards many of http s existing capabilities such as authentication caching and content type negotiation 11 the advantage of soap over rest comes from this same limitation since it does not take advantage of http conventions soap works equally well over raw tcp named pipes message queues etc edit guiding principles of the interface the uniform interface that any rest interface must provide is considered fundamental to the design of any rest service 12 identification of resources individual resources are identified in requests for example using uris in web based rest systems the resources themselves are conceptually separate from the representations that are returned to the client for example the server does not send its database but rather perhaps some html xml or json that represents some database records expressed for instance in swahili and encoded in utf 8 depending on the details of the request and the server implementation manipulation of resources through these representations when a client holds a representation of a resource including any metadata attached it has enough information to modify or delete the resource on the server provided it has permission to do so self descriptive messages each message includes enough information to describe how to process the message for example which parser to invoke may be specified by an internet media type previously known as a mime type responses also explicitly indicate their cacheability 1 hypermedia as the engine of application state aka hateoas clients make state transitions only through actions that are dynamically identified within hypermedia by the server e g by hyperlinks within hypertext except for simple fixed entry points to the application a client does not assume that any particular action is available for any particular resources beyond those described in representations previously received from the server edit central principle an important concept in rest is the existence of resources sources of specific information each of which is referenced with a global identifier e g a uri in http in order to manipulate these resources components of the network user agents and origin servers communicate via a standardized interface e g http and exchange representations of these resources the actual documents conveying the information for example a resource that represents a circle as a logical object may accept and return a representation that specifies a center point and radius formatted in svg but may also accept and return a representation that specifies any three distinct points along the curve since this also uniquely identifies a circle as a comma separated list any number of connectors e g clients servers caches tunnels etc can mediate the request but each does so without seeing past its own request referred to as layering another constraint of rest and a common principle in many other parts of information and networking architecture thus an application can interact with a resource by knowing two things the identifier of the resource and the action required it does not need to know whether there are caches proxies gateways firewalls tunnels or anything else between it and the server actually holding the information the application does however need to understand the format of the information representation returned which is typically an html xml or json document of some kind although it may be an image plain text or any other content edit restful web services a restful web service also called a restful web api is a web service implemented using http and the principles of rest it is a collection of resources with four defined aspects the base uri for the web service such as http example com resources the internet media type of the data supported by the web service this is often xml but can be any other valid internet media type provided that it is a valid hypertext standard the set of operations supported by the web service using http methods e g get put post or delete the api must be hypertext driven 13 the following table shows how the http methods are typically used to implement a web service restful web service http methods resource get put post delete collection uri such as http example com resources list the uris and perhaps other details of the collection s members replace the entire collection with another collection create a new entry in the collection the new entry s uri is assigned automatically and is usually returned by the operation delete the entire collection element uri such as http example com resources item17 retrieve a representation of the addressed member of the collection expressed in an appropriate internet media type replace the addressed member of the collection or if it doesn t exist create it not generally used treat the addressed member as a collection in its own right and create a new entry in it delete the addressed member of the collection the put and delete methods are idempotent methods the get method is a safe method or nullipotent meaning that calling it produces no side effects unlike soap based web services there is no official standard for restful web services 14 this is because rest is an architectural style unlike soap which is a protocol even though rest is not a standard a restful implementation such as the web can use standards like http uri xml etc edit outside the web this section does not cite any references or sources please help improve this section by adding citations to reliable sources unsourced material may be challenged and removed july 2012 software that may interact with a number of different kinds of objects or devices can do so by virtue of a uniform agreed interface edit cmip the common management information protocol cmip was designed to allow the control of network resources by presenting their manageable characteristics as object attributes the objects have parent child relationships that are identified using distinguished names and attributes which are read and modified by a set of crud create read update delete operations the notable non restful aspect of cmip is the m action operation although wherever possible designers of management information bases mibs would typically endeavour to represent controllable and stateful aspects of network equipment through attributes edit public implementations rest can be found in a number of places on the public web the atom publishing protocol for publishing to blogs is considered a canonical restful protocol sun microsystems cloud api is a good example of resource media type documentation the open services for lifecycle collaboration oslc initiative is establishing a restful approach to integrating software development artifacts couchdb is a document oriented database written in erlang that provides a restful json api that can be accessed from any environment that allows http requests mysql cluster is a write scalable auto sharded database also accessible through a native rest json interface as an apache module microsoft s canonical rest entity service nuxeo an open source document manager implements a content automation interface via a rest api restful objects a public specification for a generic restful api to any domain object model sones graphdb is a graph oriented database written in c that provides a restful interface google fusion tables support includes a restful api edit see also clean urls create read update and delete crud hateoas hypermedia as the engine of application state service oriented architecture edit notes fielding roy t taylor richard n 2002 05 principled design of the modern web architecture pdf acm transactions on internet technology toit new york association for computing machinery 2 2 115 150 doi 10 1145 514183 514185 issn 160 1533 5399 http www ics uci edu taylor documents 2002 rest toit pdf fielding roy thomas 2000 architectural styles and the design of network based software architectures doctoral dissertation university of california irvine http www ics uci edu fielding pubs dissertation top htm pautasso cesare zimmermann olaf leymann frank 2008 04 restful web services vs big web services making the right architectural decision 17th international world wide web conference www2008 beijing china http www jopera org docs publications 2008 restws richardson leonard ruby sam 2007 05 restful web services o reilly isbn 160 978 0 596 52926 0 http oreilly com catalog 9780596529260 edit references a b chapter 5 of fielding s dissertation is representational state transfer rest fielding discussing the definition of the rest term tech groups yahoo com http tech groups yahoo com group rest discuss message 6735 retrieved 2013 02 07 rfc 1945 rfc 2616 1 http c2 com fielding discusses the development of the rest style tech groups yahoo com http tech groups yahoo com group rest discuss message 6757 retrieved 2013 02 07 fielding talks about application states tech groups yahoo com http tech groups yahoo com group rest discuss message 5841 retrieved 2013 02 07 fielding 2000 5 3 1 richardson leonard sam ruby 2007 preface restful web service o reilly media isbn 160 978 0 596 52926 0 http books google com books id xuaerakhsoac amp printsec frontcover v onepage amp q amp f false retrieved 18 january 2011 fielding s phd thesis section 6 1 ics uci edu http www ics uci edu fielding pubs dissertation evaluation htm sec 6 1 retrieved 2013 02 07 scribner kenn seely scott 2009 effective rest services via net boston addison wesley isbn 160 978 0 321 61325 7 fielding 2000 5 1 5 rest apis must be hypertext driven by roy fielding roy gbiv com 2008 10 20 http roy gbiv com untangled 2008 rest apis must be hypertext driven retrieved 2013 02 07 elkstein m what is rest retrieved on 2009 07 04 v t e cloud computing clients browsers devices netbooks tablets smartphones operating systems android ios windows phone windows 8 applications google apps owncloud microsoft online salesforce contactoffice platforms amazon app engine greenqloud appscale windows azure engine yard force com heroku orangescape rightscale cloud foundry mendix infrastructure amazon abiquo enterprise edition cloudstack eucalyptus gogrid lunacloud google storage greenbutton greenqloud ibm smartcloud iland joyent nimbula nimbus opennebula openstack rackspace cloud zadara storage technologies networking security datacenters internet structured storage virtualization web services virtual appliance cloud database category commons 