this article has multiple issues please help improve it or discuss these issues on the talk page this article may have too many section headers dividing up its content please help improve the article by merging similar sections and removing unneeded subheaders november 2011 this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed december 2011 this article s introduction may be too long for its overall length please help by moving some material from it into the body of the article for more information please read the layout guide and wikipedia s lead section guidelines august 2012 this article may be too long to read and navigate comfortably please consider splitting content into sub articles and or condensing it august 2012 a database is an organized collection of data the data is typically organized to model relevant aspects of reality for example the availability of rooms in hotels in a way that supports processes requiring this information for example finding a hotel with vacancies the term database is correctly applied to the data and their supporting data structures and not to the database management system dbms the database data collection with dbms is called a database system the term database system implies that the data is managed to some level of quality measured in terms of accuracy availability usability and resilience and this in turn often implies the use of a general purpose database management system dbms 1 a general purpose dbms is typically a complex software system that meets many usage requirements to properly maintain its databases which are often large and complex this is specially the case with client server near real time transactional systems in which multiple users have access to data data is concurrently entered and inquired for in ways that preclude single thread batch processing most of the complexity of those requirements are still present with personal desktop based database systems well known dbmss include oracle sybase foxpro ibm db2 linter microsoft access microsoft sql server mysql postgresql and sqlite a database is not generally portable across different dbms but different dbmss can inter operate to some degree by using standards like sql and odbc together to support a single application built over more than one database a dbms also needs to provide effective run time execution to properly support e g in terms of performance availability and security as many database end users as needed a way to classify databases involves the type of their contents for example bibliographic document text statistical or multimedia objects another way is by their application area for example accounting music compositions movies banking manufacturing or insurance the term database may be narrowed to specify particular aspects of organized collection of data and may refer to the logical database to the physical database as data content in computer data storage or to many other database sub definitions contents 1 history 1 1 database concept 1 2 evolution of database and dbms technology 1 2 1 general purpose dbms 1 2 1 1 types of people involved 1 2 2 database machines and appliances 1 3 database research 2 database type examples 3 major database usage requirements 3 1 functional requirements 3 2 operational requirements 3 2 1 availability 3 2 2 performance 3 2 3 isolation between users 3 2 4 recovery from failure and disaster 3 2 5 backup and restore 3 2 6 data independence 4 major database functional areas 4 1 data models 4 1 1 early data models 4 1 1 1 hierarchical model 4 1 1 2 network model 4 1 1 3 inverted file model 4 1 2 relational model 4 1 3 entity relationship model 4 1 4 object model 4 1 5 object relational model 4 1 6 xml as a database data model 4 1 7 other database models 4 2 database languages 4 2 1 sql for the relational model 4 2 2 oql for the object model 4 2 3 xquery for the xml model 4 3 database architecture 4 4 database security 4 4 1 access control 4 4 2 data security 4 4 3 database audit 4 5 database design 4 5 1 entities and relationships 4 5 2 database normalization 4 6 database building maintaining and tuning 4 7 miscellaneous areas 4 7 1 database migration between dbmss 5 implementation database management systems 5 1 dbms architecture major dbms components 5 2 database storage 5 2 1 data 5 2 1 1 coding the data and error correcting codes 5 2 1 2 data compression 5 2 1 3 data encryption 5 2 2 data storage types 5 2 2 1 storage metrics 5 2 2 2 protecting storage device content device mirroring replication and raid 5 2 3 database storage layout 5 2 3 1 database storage hierarchy 5 2 3 2 data structures 5 2 3 3 application data and dbms data 5 2 3 4 database indexing 5 2 3 5 database data clustering 5 2 3 6 database materialized views 5 2 3 7 database and database object replication 5 3 database transactions 5 3 1 acid rules 5 3 2 isolation concurrency control and locking 5 4 query optimization 5 5 dbms support for the development and maintenance of a database and its application 6 see also 7 references 8 further reading 9 external links edit history edit database concept the database concept has evolved since the 1960s to ease increasing difficulties in designing building and maintaining complex information systems typically with many concurrent end users and with a large amount of diverse data it has evolved together with database management systems which enable the effective handling of databases though the terms database and dbms define different entities they are inseparable a database s properties are determined by its supporting dbms the oxford english dictionary cites citation needed a 1962 technical report as the first to use the term data base with the progress in technology in the areas of processors computer memory computer storage and computer networks the sizes capabilities and performance of databases and their respective dbmss have grown in orders of magnitudes for decades it has been unlikely that a complex information system can be built effectively without a proper database supported by a dbms the utilization of databases is now spread to such a wide degree that virtually every technology and product relies on databases and dbmss for its development and commercialization or even may have such embedded in it also organizations and companies from small to large heavily depend on databases for their operations no widely accepted exact definition exists for dbms however a system needs to provide considerable functionality to qualify as a dbms accordingly its supported data collection needs to meet respective usability requirements broadly defined by the requirements below to qualify as a database thus a database and its supporting dbms are defined here by a set of general requirements listed below virtually all existing mature dbms products meet these requirements to a great extent while less mature either meet them or converge to meet them edit evolution of database and dbms technology see also database management system history the introduction of the term database coincided with the availability of direct access storage disks and drums from the mid 1960s onwards the term represented a contrast with the tape based systems of the past allowing shared interactive use rather than daily batch processing in the earliest database systems efficiency was perhaps the primary concern but it was already recognized that there were other important objectives one of the key aims was to make the data independent of the logic of application programs so that the same data could be made available to different applications in the period since the 1970s database technology has kept pace with the increasing resources becoming available from the computing platform notably the rapid increase in affordable capacity and speed of disk storage and of main memory this has enabled ever larger databases and higher throughput to be achieved the first generation of general purpose database systems were navigational 2 applications typically accessed data by following pointers from one record to another the two main data models at this time were the hierarchical model epitomized by ibm s ims system and the codasyl model network model implemented in a number of products such as idms the relational model first proposed in 1970 by edgar f codd departed from this tradition by insisting that applications should search for data by content rather than by following links this was considered necessary to allow the content of the database to evolve without constant rewriting of links and pointers the relational model is made up of ledger style tables each used for a different type of entity data may be freely inserted deleted and edited in these tables with the dbms doing whatever maintenance needed to present a table view to the application user the relational part comes from entities referencing other entities in what is known as one to many relationship like a traditional hierarchical model and many to many relationship like a navigational network model thus a relational model can express both hierarchical and navigational models as well as its native tabular model allowing for pure or combined modeling in terms of these three models as the application requires the earlier expressions of the relational model did not make relationships between different entities explicit in the way practitioners were used to back then but as primary keys and foreign keys these keys though can be also seen as pointers in their own right stored in tabular form this use of keys rather than pointers conceptually obscured relations between entities at least the way it was presented back then thus the wisdom at the time was that the relational model emphasizes search rather than navigation and that it was a good conceptual basis for a query language but less well suited as a navigational language as a result another data model the entity relationship model which emerged shortly later 1976 gained popularity for database design as it emphasized a more familiar description than the earlier relational model later on entity relationship constructs were retrofitted as a data modeling construct for the relational model and the difference between the two have become irrelevant earlier relational system implementations lacked the sophisticated automated optimizations of conceptual elements and operations versus their physical storage and processing counterparts present in modern dbmss database management systems so their simplistic and literal implementations placed heavy demands on the limited processing resources at the time it was not until the mid 1980s that computing hardware became powerful enough to allow relational systems dbmss plus applications to be widely deployed by the early 1990s however relational systems were dominant for all large scale data processing applications and they remain dominant today 2012 except in niche areas the dominant database language is the standard sql for the relational model which has influenced database languages for other data models the rigidity of the relational model in which all data are held in related tables with a fixed structure of rows and columns has increasingly been seen as a limitation when handling information that is richer or more varied in structure than the traditional ledger book data of corporate information systems these limitations come to play when modeling document databases engineering databases multimedia databases or databases used in the molecular sciences most of that rigidity though is due to the need to represent new data types other than text and text alikes within a relational model examples of unsupported data types are graphics and operations such as pattern matching and ocr multidimensional constructs such as 2d geographical 3d geometrical and multidimensional hypercube models data analysis xml an hierarchical data modeling technology evolved from eds and html used for data interchange among dissimilar systems more fundamental conceptual limitations came with object oriented methodologies with their emphasis on encapsulating data and processes methods as well as expressing constructs such as events or triggers traditional data modeling constructs emphasize the total separation of data from processes though modern dbms do allow for some limited modeling in terms of validation rules and stored procedures various attempts have been made to address this problem many of them banners such as post relational or nosql two developments of note are the object database and the xml database the vendors of relational databases have fought off competition from these newer models by extending the capabilities of their own products to support a wider variety of data types edit general purpose dbms a dbms has evolved into a complex software system and its development typically requires thousands of person years of development effort citation needed some general purpose dbmss like oracle microsoft sql server foxpro and ibm db2 have been undergoing upgrades for thirty years or more general purpose dbmss aim to satisfy as many applications as possible which typically makes them even more complex than special purpose databases however the fact that they can be used off the shelf as well as their amortized cost over many applications and instances makes them an attractive alternative vs one time development whenever they meet an application s requirements though attractive in many cases a general purpose dbms is not always the optimal solution when certain applications are pervasive with many operating instances each with many users a general purpose dbms may introduce unnecessary overhead and too large footprint too large amount of unnecessary unutilized software code such applications usually justify dedicated development typical examples are email systems though they need to possess certain dbms properties email systems are built in a way that optimizes email messages handling and managing and do not need significant portions of a general purpose dbms functionality edit types of people involved three types of people are involved with a general purpose dbms dbms developers these are the people that design and build the dbms product and the only ones who touch its code they are typically the employees of a dbms vendor e g oracle ibm microsoft sybase or in the case of open source dbms s e g mysql postgresql volunteers or people supported by interested companies and organizations they are typically skilled systems programmers dbms development is a complicated task and some of the popular dbms s have been under development and enhancement also to follow progress in technology for decades application developers and database administrators these are the people that design and build a database based application that uses the dbms the latter group members design the needed database and maintain it the first group members write the needed application programs which the application comprises both are well familiar with the dbms product and use its user interfaces as well as usually other tools for their work sometimes the application itself is packaged and sold as a separate product which may include the dbms inside see embedded database subject to proper dbms licensing or sold separately as an add on to the dbms application s end users e g accountants insurance people medical doctors etc these people know the application and its end user interfaces but need not know nor understand the underlying dbms thus though they are the intended and main beneficiaries of a dbms they are only indirectly involved with it edit database machines and appliances main article database machine in the 1970s and 1980s attempts were made to build database systems with integrated hardware and software the underlying philosophy was that such integration would provide higher performance at lower cost examples were ibm system 38 the early offering of teradata and the britton lee inc database machine another approach to hardware support for database management was icl s cafs accelerator a hardware disk controller with programmable search capabilities in the long term these efforts were generally unsuccessful because specialized database machines could not keep pace with the rapid development and progress of general purpose computers thus most database systems nowadays are software systems running on general purpose hardware using general purpose computer data storage however this idea is still pursued for certain applications by some companies like netezza and oracle exadata edit database research database research has been an active and diverse area with many specializations carried out since the early days of dealing with the database concept in the 1960s it has strong ties with database technology and dbms products database research has taken place at research and development groups of companies e g notably at ibm research who contributed technologies and ideas virtually to any dbms existing today research institutes and academia research has been done both through theory and prototypes the interaction between research and database related product development has been very productive to the database area and many related key concepts and technologies emerged from it notable are the relational and the entity relationship models the atomic transaction concept and related concurrency control techniques query languages and query optimization methods raid and more research has provided deep insight to virtually all aspects of databases though not always has been pragmatic effective and cannot and should not always be research is exploratory in nature and not always leads to accepted or useful ideas ultimately market forces and real needs determine the selection of problem solutions and related technologies also among those proposed by research however occasionally not the best and most elegant solution wins e g sql along their history dbmss and respective databases to a great extent have been the outcome of such research while real product requirements and challenges triggered database research directions and sub areas the database research area has several notable dedicated academic journals e g acm transactions on database systems tods data and knowledge engineering dke and more and annual conferences e g acm sigmod acm pods vldb ieee icde and more as well as an active and quite heterogeneous subject wise research community all over the world edit database type examples the following are examples of various database types some of them are not main stream types but most of them have received special attention e g in research due to end user requirements some exist as specialized dbms products and some have their functionality types incorporated in existing general purpose dbmss though may differ in nature and functionality these various types typically have to comply with the usability requirements below to comply as databases active database main article active database an active database is a database that includes an event driven architecture which can respond to conditions both inside and outside the database possible uses include security monitoring alerting statistics gathering and authorization most modern relational databases include active database features in the form of database trigger cloud database main article cloud database a cloud database is a database that relies on cloud technology both the database and most of its dbms reside remotely in the cloud while its applications are both developed by programmers and later maintained and utilized by application s end users through a web browser and open apis more and more such database products are emerging both of new vendors and by virtually all established database vendors data warehouse main article data warehouse data warehouses archive data from operational databases and often from external sources such as market research firms often operational data undergo transformation on their way into the warehouse getting summarized anonymized reclassified etc the warehouse becomes the central source of data for use by managers and other end users who may not have access to operational data for example sales data might be aggregated to weekly totals and converted from internal product codes to use upcs so that they can be compared with acnielsen data some basic and essential components of data warehousing include retrieving analyzing and mining data transforming loading and managing data so as to make them available for further use operations in a data warehouse are typically concerned with bulk data manipulation and as such it is unusual and inefficient to target individual rows for update insert or delete bulk native loaders for input data and bulk sql passes for aggregation are the norm distributed database main article distributed database the definition of a distributed database is broad and may be utilized in different meanings in general it typically refers to a modular dbms architecture that allows distinct dbms instances to cooperate as a single dbms over processes computers and sites while managing a single database distributed itself over multiple computers and different sites examples are databases of local work groups and departments at regional offices branch offices manufacturing plants and other work sites these databases can include both segments shared by multiple sites and segments specific to one site and used only locally in that site document oriented database main article document oriented database a document oriented database is a computer program designed for storing retrieving and managing document oriented or semi structured data information document oriented databases are one of the main categories of so called nosql databases and the popularity of the term document oriented database or document store has grown with the use of the term nosql itself utilized to conveniently store manage edit and retrieve documents embedded database main article embedded database an embedded database system is a dbms which is tightly integrated with an application software that requires access to stored data in a way that the dbms is hidden from the application s end user and requires little or no ongoing maintenance it is actually a broad technology category that includes dbmss with differing properties and target markets the term embedded database can be confusing because only a small subset of embedded database products is used in real time embedded systems such as telecommunications switches and consumer electronics devices 3 end user database these databases consist of data developed by individual end users examples of these are collections of documents spreadsheets presentations multimedia and other files several products exist to support such databases some of them are much simpler than full fledged dbmss with more elementary dbms functionality e g not supporting multiple concurrent end users on a same database with basic programming interfaces and a relatively small foot print not much code to run as in regular general purpose databases however also available general purpose dbmss can often be used for such purpose if they provide basic user interfaces for straightforward database applications limited query and data display no real programming needed while still enjoying the database qualities and protections that these dbmss can provide federated database and multi database main articles federated database system and heterogeneous database system a federated database is an integrated database that comprises several distinct databases each with its own dbms it is handled as a single database by a federated database management system fdbms which transparently integrates multiple autonomous dbmss possibly of different types which makes it a heterogeneous database and provides them with an integrated conceptual view the constituent databases are interconnected via computer network and may be geographically decentralized sometime the term multi database is used as a synonym to federated database though it may refer to a less integrated e g without an fdbms and a managed integrated schema group of databases that cooperate in a single application in this case typically middleware for distribution is used which typically includes an atomic commit protocol acp e g the two phase commit protocol to allow distributed global transactions vs local transactions confined to a single dbms across the participating databases graph database main article graph database a graph database is a kind of nosql database that uses graph structures with nodes edges and properties to represent and store information general graph databases that can store any graph are distinct from specialized graph databases such as triplestores and network databases hypermedia databases the world wide web can be thought of as a database albeit one spread across millions of independent computing systems web browsers process these data one page at a time while web crawlers and other software provide the equivalent of database indexes to support search and other activities hypertext database main article hypertext in a hypertext database any word or a piece of text representing an object e g another piece of text an article a picture or a film can be linked to that object hypertext databases are particularly useful for organizing large amounts of disparate information for example they are useful for organizing online encyclopedias where users can conveniently jump in the texts in a controlled way by using hyperlinks in memory database main article in memory database an in memory database imdb also main memory database or mmdb is a database that primarily resides in main memory but typically backed up by non volatile computer data storage main memory databases are faster than disk databases accessing data in memory reduces the i o reading activity when for example querying the data in applications where response time is critical such as telecommunications network equipment main memory databases are often used 4 knowledge base main article knowledge base a knowledge base abbreviated kb kb or 5 6 is a special kind of database for knowledge management providing the means for the computerized collection organization and retrieval of knowledge also a collection of data representing problems with their solutions and related experiences operational database these databases store detailed data about the operations of an organization they are typically organized by subject matter process relatively high volumes of updates using transactions essentially every major organization on earth uses such databases examples include customer databases that record contact credit and demographic information about a business customers personnel databases that hold information such as salary benefits skills data about employees enterprise resource planning that record details about product components parts inventory and financial databases that keep track of the organization s money accounting and financial dealings parallel database main article parallel database a parallel database run by a parallel dbms seeks to improve performance through parallelization for tasks such as loading data building indexes and evaluating queries parallel databases improve processing and input output speeds by using multiple central processing units cpus including multi core processors and storage in parallel in parallel processing many operations are performed simultaneously as opposed to serial sequential processing where operations are performed with no time overlap the major parallel dbms architectures which are induced by the underlying hardware architecture are shared memory architecture where multiple processors share the main memory space as well as other data storage shared disk architecture where each processing unit typically consisting of multiple processors has its own main memory but all units share the other storage shared nothing architecture where each processing unit has its own main memory and other storage real time database main article real time database if a dbms system responses users request in a given time period it can be regarded as a real time database spatial database main article spatial database a spatial database can store the data with multidimensional features the queries on such data include location based queries like where is the closest hotel in my area temporal database main article temporal database a temporal database is a database with built in time aspects for example a temporal data model and a temporal version of structured query language sql more specifically the temporal aspects usually include valid time and transaction time unstructured data database main article unstructured data an unstructured data database is intended to store in a manageable and protected way diverse objects that do not fit naturally and conveniently in common databases it may include email messages documents journals multimedia objects etc the name may be misleading since some objects can be highly structured however the entire possible object collection does not fit into a predefined structured framework most established dbmss now support unstructured data in various ways and new dedicated dbmss are emerging edit major database usage requirements the major purpose of a database is to provide the information system in its broadest sense that utilizes it with the information the system needs according to its own requirements a certain broad set of requirements refines this general goal these database requirements translate to requirements for the respective dbms to allow conveniently building a proper database for the given application if this goal is met by a dbms then the designers and builders of the specific database can concentrate on the application s aspects and not deal with building and maintaining the underlying dbms also since a dbms is complex and expensive to build and maintain it is not economical to build such a new tool dbms for every application rather it is desired to provide a flexible tool for handling databases for as many as possible given applications i e a general purpose dbms edit functional requirements certain general functional requirements need to be met in conjunction with a database they describe what is needed to be defined in a database for any specific application the database s structure must be defined the database needs to be based on a data model that is sufficiently rich to describe in the database all the needed respective application s aspects data definition languages exist to describe the databases within the data model such languages are typically data model specific a database data model needs support by a sufficiently rich data manipulation language to allow database manipulations and for information to be generated from the data such language is typically data model specific a database needs built in security means to protect its content and users from dangers of unauthorized users either humans or programs protection is also provided from types of unintentional breach security types and levels should be defined by the database owners manipulating database data often involves processes of several interdependent steps at different times e g when different people s interactions are involved e g generating an insurance policy data manipulation languages are typically intended to describe what is needed in a single such step dealing with multiple steps typically requires writing quite complex programs most applications are programmed using common programming languages and software development tools however the area of process description has evolved in the frameworks of workflow and business processes with supporting languages and software packages which considerably simplify the tasks traditionally these frameworks have been out of the scope of common dbmss but utilization of them has become common place and often they are provided as add ons to dbmss edit operational requirements operational requirements are needed to be met by a database in order to effectively support an application when operational though it typically may be expected that operational requirements are automatically met by a dbms in fact it is not so in most of the cases to be met substantial work of design and tuning is typically needed by database administrators this is typically done by specific instructions operations through special database user interfaces and tools and thus may be viewed as secondary functional requirements which are not less important than the primary edit availability a db should maintain needed levels of availability i e the db needs to be available in a way that a user s action does not need to wait beyond a certain time range before starting executing upon the db availability also relates to failure and recovery from it see recovery from failure and disaster below upon failure and during recovery normal availability changes and special measures are needed to satisfy availability requirements edit performance users actions upon the db should be executed within needed time ranges edit isolation between users when multiple users access the database concurrently the actions of a user should be uninterrupted and unaffected by actions of other users these concurrent actions should maintain the db s consistency i e keep the db from corruption edit recovery from failure and disaster main articles data recovery and disaster recovery all computer systems including dbmss are prone to failures for many reasons both software and hardware related failures typically corrupt the db typically to the extent that it is impossible to repair it without special measures the dbms should provide automatic recovery from failure procedures that repair the db and return it to a well defined state edit backup and restore main article backup sometimes it is desired to bring a database back to a previous state for many reasons e g cases when the database is found corrupted due to a software error or if it has been updated with erroneous data to achieve this a backup operation is done occasionally or continuously where each desired database state i e the values of its data and their embedding in database s data structures is kept within dedicated backup files many techniques exist to do this effectively when this state is needed i e when it is decided by a database administrator to bring the database back to this state e g by specifying this state by a desired point in time when the database was in this state these files are utilized to restore that state edit data independence main article data independence data independence pertains to a database s life cycle see database building maintaining and tuning below it strongly impacts the convenience and cost of maintaining an application and its database and has been the major motivation for the emergence and success of the relational model as well as the convergence to a common database architecture in general the term data independence means that changes in the database s structure do not require changes in its application s computer programs and that changes in the database at a certain architectural level see below do not affect the database s levels above data independence is achieved to a great extent in contemporary dbms but it is not completely attainable and achieved at different degrees for different types of database structural changes edit major database functional areas the functional areas are domains and subjects that have evolved in order to provide proper answers and solutions to the functional requirements above edit data models main articles data model and database model a data model is an abstract structure that provides the means to effectively describe specific data structures needed to model an application as such a data model needs sufficient expressive power to capture the needed aspects of applications these applications are often typical to commercial companies and other organizations like manufacturing human resources stock banking etc for effective utilization and handling it is desired that a data model is relatively simple and intuitive this may be in conflict with high expressive power needed to deal with certain complex applications thus any popular general purpose data model usually well balances between being intuitive and relatively simple and very complex with high expressive power the application s semantics is usually not explicitly expressed in the model but rather implicit and detailed by documentation external to the model and hinted to by data item types names e g part number and their connections as expressed by generic data structure types provided by each specific model edit early data models these models were popular in the 1960s 1970s but nowadays can be found primarily in old legacy systems they are characterized primarily by being navigational with strong connections between their logical and physical representations and deficiencies in data independence edit hierarchical model main article hierarchical database model in the hierarchical model different record types representing real world entities are embedded in a predefined hierarchical tree like structure this hierarchy is used as the physical order of records in storage record access is done by navigating through the data structure using pointers combined with sequential accessing this model has been supported primarily by the ibm ims dbms one of the earliest dbmss various limitations of the model have been compensated at later ims versions by additional logical hierarchies imposed on the base physical hierarchy edit network model main article network model database in this model a hierarchical relationship between two record types representing real world entities is established by the set construct a set consists of circular linked lists where one record type the set owner or parent appears once in each circle and a second record type the subordinate or child may appear multiple times in each circle in this way a hierarchy may be established between any two record types e g type a is the owner of b at the same time another set may be defined where b is the owner of a thus all the sets comprise a general directed graph ownership defines a direction or network construct access to records is either sequential usually in each record type or by navigation in the circular linked lists this model is more general and powerful than the hierarchical and has been the most popular before being replaced by the relational model it has been standardized by codasyl popular dbms products that utilized it were cincom systems total and cullinet s idms idms gained a considerable customer base and exists and supported until today in the 1980s it has adopted the relational model and sql in addition to its original tools and languages edit inverted file model main article inverted index an inverted file or inverted index of a first file by a field in this file the inversion field is a second file in which this field is the key a record in the second file includes a key and pointers to records in the first file where the inversion field has the value of the key this is also the logical structure of contemporary database indexes the related inverted file data model utilizes inverted files of primary database files to efficiently directly access needed records in these files notable for using this data model is the adabas dbms of software ag introduced in 1970 adabas has gained considerable customer base and exists and supported until today in the 1980s it has adopted the relational model and sql in addition to its original tools and languages edit relational model main article relational model the relational model is a simple model that provides flexibility it organizes data based on two dimensional arrays known as relations or tables as related to databases these relations consist of a heading and a set of zero or more tuples in arbitrary order the heading is an unordered set of zero or more attributes or columns of the table the tuples are a set of unique attributes mapped to values or the rows of data in the table data can be associated across multiple tables with a key a key is a single or set of multiple attribute s that is common to both tables the most common language associated with the relational model is the structured query language sql though it differs in some places edit entity relationship model main article entity relationship model this section requires expansion june 2011 edit object model main articles object model and object database this section requires expansion june 2011 in recent years update the object oriented paradigm has been applied in areas such as engineering and spatial databases telecommunications and in various scientific domains the conglomeration of object oriented programming and database technology led to this new kind of database these databases attempt to bring the database world and the application programming world closer together in particular by ensuring that the database uses the same type system as the application program this aims to avoid the overhead sometimes referred to as the impedance mismatch of converting information between its representation in the database for example as rows in tables and its representation in the application program typically as objects at the same time object databases attempt to introduce key ideas of object programming such as encapsulation and polymorphism into the world of databases a variety of these ways have been tried by whom for storing objects in a database some products have approached the problem from the application programming side by making the objects manipulated by the program persistent this also typically requires the addition of some kind of query language since conventional programming languages do not provide language level functionality for finding objects based on their information content others which have attacked the problem from the database end by defining an object oriented data model for the database and defining a database programming language that allows full programming capabilities as well as traditional query facilities edit object relational model main article object relational database this section requires expansion june 2011 edit xml as a database data model main articles xml database and xml this section requires expansion june 2011 edit other database models this section requires expansion june 2011 products offering a more general data model than the relational model are sometimes classified as post relational 7 alternate terms include hybrid database object enhanced rdbms and others the data model in such products incorporates relations but is not constrained by e f codd s information principle which requires that all information in the database must be cast explicitly in terms of values in relations and in no other way 8 some of these extensions to the relational model integrate concepts from technologies that pre date the relational model for example they allow representation of a directed graph with trees on the nodes the german company sones implements this concept in its graphdb some post relational products extend relational systems with non relational features others arrived in much the same place by adding relational features to pre relational systems paradoxically this allows products that are historically pre relational such as pick and mumps to make a plausible claim to be post relational the resource space model rsm is a non relational data model based on multi dimensional classification 9 edit database languages main articles data definition language data manipulation language and query language database languages are dedicated programming languages tailored and utilized to define a database i e its specific data types and the relationships among them manipulate its content e g insert new data occurrences and update or delete existing ones and query it i e request information compute and retrieve any information based on its data database languages are data model specific i e each language assumes and is based on a certain structure of the data which typically differs among different data models they typically have commands to instruct execution of the desired operations in the database each such command is equivalent to a complex expression program in a regular programming language and thus programming in dedicated database languages simplifies the task of handling databases considerably an expressions in a database language is automatically transformed by a compiler or interpreter as regular programming languages to a proper computer program that runs while accessing the database and providing the needed results the following are notable examples edit sql for the relational model main article sql sql is a standard relational model language supported by all the relational dbmss sql was one of the first commercial languages for the relational model despite not adhering to the relational model as described by codd it has become the most widely used database language 10 11 though often described as and to a great extent is a declarative language sql also includes procedural elements sql became a standard of the american national standards institute ansi in 1986 and of the international organization for standards iso in 1987 since then the standard has been enhanced several times with added features however issues of sql code portability between major rdbms products still exist due to lack of full compliance with or different interpretations of the standard among the reasons mentioned are the large size and incomplete specification of the standard as well as vendor lock in edit oql for the object model main article oql oql is an object model language standard by the object data management group that has influenced the design of some of the newer query languages like jdoql and ejb ql though they cannot be considered as different flavors of oql edit xquery for the xml model main articles xquery xml and sql xml xquery is an xml based database language also named xql sql xml combines xquery and xml with sql 12 edit database architecture database architecture to be distinguished from dbms architecture see below may be viewed to some extent as an extension of data modeling it is used to conveniently answer requirements of different end users from a same database as well as for other benefits for example a financial department of a company needs the payment details of all employees as part of the company s expenses but not other many details about employees that are the interest of the human resources department thus different departments need different views of the company s database that both include the employees payments possibly in a different level of detail and presented in different visual forms to meet such requirement effectively database architecture consists of three levels external conceptual and internal clearly separating the three levels was a major feature of the relational database model implementations that dominate 21st century databases 13 the external level defines how each end user type understands the organization of its respective relevant data in the database i e the different needed end user views a single database can have any number of views at the external level the conceptual level unifies the various external views into a coherent whole global view 13 it provides the common denominator of all the external views it comprises all the end user needed generic data i e all the data from which any view may be derived computed it is provided in the simplest possible way of such generic data and comprises the back bone of the database it is out of the scope of the various database end users and serves database application developers and defined by database administrators that build the database the internal level or physical level is as a matter of fact part of the database implementation inside a dbms see implementation section below it is concerned with cost performance scalability and other operational matters it deals with storage layout of the conceptual level provides supporting storage structures like indexes to enhance performance and occasionally stores data of individual views materialized views computed from generic data if performance justification exists for such redundancy it balances all the external views performance requirements possibly conflicting in attempt to optimize the overall database usage by all its end uses according to the database goals and priorities all the three levels are maintained and updated according to changing needs by database administrators who often also participate in the database design the above three level database architecture also relates to and being motivated by the concept of data independence which has been described for long time as a desired database property and was one of the major initial driving forces of the relational model in the context of the above architecture it means that changes made at a certain level do not affect definitions and software developed with higher level interfaces and are being incorporated at the higher level automatically for example changes in the internal level do not affect application programs written using conceptual level interfaces which saves substantial change work that would be needed otherwise in summary the conceptual is a level of indirection between internal and external on one hand it provides a common view of the database independent of different external view structures and on the other hand it is uncomplicated by details of how the data are stored or managed internal level in principle every level and even every external view can be presented by a different data model in practice usually a given dbms uses the same data model for both the external and the conceptual levels e g relational model the internal level which is hidden inside the dbms and depends on its implementation see implementation section below requires a different level of detail and uses its own data structure types typically different in nature from the structures of the external and conceptual levels which are exposed to dbms users e g the data models above while the external and conceptual levels are focused on and serve dbms users the concern of the internal level is effective implementation details edit database security main article database security database security deals with all various aspects of protecting the database content its owners and its users it ranges from protection from intentional unauthorized database uses to unintentional database accesses by unauthorized entities e g a person or a computer program the following are major areas of database security among many others edit access control main article access control database access control deals with controlling who a person or a certain computer program is allowed to access what information in the database the information may comprise specific database objects e g record types specific records data structures certain computations over certain objects e g query types or specific queries or utilizing specific access paths to the former e g using specific indexes or other data structures to access information database access controls are set by special authorized by the database owner personnel that uses dedicated protected security dbms interfaces edit data security main articles data security and encryption the definition of data security varies and may overlap with other database security aspects broadly it deals with protecting specific chunks of data both physically i e from corruption or destruction or removal e g see physical security or the interpretation of them or parts of them to meaningful information e g by looking at the strings of bits that they comprise concluding specific valid credit card numbers e g see data encryption edit database audit main article database audit database audit primarily involves monitoring that no security breach in all aspects has happened if security breach is discovered then all possible corrective actions are taken edit database design main article database design database design is done before building it to meet needs of end users within a given application information system that the database is intended to support the database design defines the needed data and data structures that such a database comprises a design is typically carried out according to the common three architectural levels of a database see database architecture above first the conceptual level is designed which defines the over all picture view of the database and reflects all the real world elements entities the database intends to model as well as the relationships among them on top of it the external level various views of the database are designed according to possibly completely different needs of specific end user types more external views can be added later external views requirements may modify the design of the conceptual level i e add remove entities and relationships but usually a well designed conceptual level for an application well supports most of the needed external views the conceptual view also determines the internal level which primarily deals with data layout in storage to a great extent external views requirement may add supporting storage structures like materialized views and indexes for enhanced performance typically the internal layer is optimized for top performance in an average way that takes into account performance requirements possibly conflicting of different external views according to their relative importance while the conceptual and external levels design can usually be done independently of any dbms dbms independent design software packages exist possibly with interfaces to some specific popular dbmss the internal level design highly relies on the capabilities and internal data structure of the specific dbms utilized see the implementation section below a common way to carry out conceptual level design is to use the entity relationship model erm both the basic one and with possible enhancement that it has gone over since it provides a straightforward intuitive perception of an application s elements and semantics an alternative approach which preceded the erm is using the relational model and dependencies mathematical relationships among data to normalize the database i e to define the optimal relations data record or tupple types in the database though a large body of research exists for this method it is more complex less intuitive and not more effective than the erm method thus normalization is less utilized in practice than the erm method the erm may be less subtle than normalization in several aspects but it captures the main needed dependencies which are induced by keys identifiers of entities and relationships also the erm inherently includes the important inclusion dependencies i e an entity instance that does not exist has not been explicitly inserted cannot appear in a relationship with other entities which usually have been ignored in normalization 14 in addition the erm allows entity type generalization the is a relationship and implied property attribute inheritance similarly to the that found in the object model another aspect of database design is its security it involves both defining access control to database objects e g entities views as well as defining security levels and methods for the data themselves see database security above edit entities and relationships main article entity relationship model the most common database design methods are based on the entity relationship model erm or er model this model views the world in a simplistic but very powerful way it consists of entities and the relationships among them accordingly a database consists of entity and relationship types each with defined attributes field types that model concrete entities and relationships modeling a database in this way typically yields an effective one with desired properties as in some normal forms see normalization below such models can be translated to any other data model required by any specific dbms for building an effective database edit database normalization main article database normalization in the design of a relational database the process of organizing database relations to minimize redundancy is called normalization the goal is to produce well structured relations so that additions deletions and modifications of a field can be made in just one relation table without worrying about appearance and update of the same field in other relations the process is algorithmic and based on dependencies mathematical relations that exist among relations field types the process result is bringing the database relations into a certain normal form several normal forms exist with different properties edit database building maintaining and tuning main article database tuning after designing a database for an application arrives the stage of building the database typically an appropriate general purpose dbms can be selected to be utilized for this purpose a dbms provides the needed user interfaces to be utilized by database administrators to define the needed application s data structures within the dbms s respective data model other user interfaces are used to select needed dbms parameters like security related storage allocation parameters etc when the database is ready all its data structures and other needed components are defined it is typically populated with initial application s data database initialization which is typically a distinct project in many cases using specialized dbms interfaces that support bulk insertion before making it operational in some cases the database becomes operational while empty from application s data and data are accumulated along its operation after completing building the database and making it operational arrives the database maintenance stage various database parameters may need changes and tuning for better performance application s data structures may be changed or added new related application programs may be written to add to the application s functionality etc edit miscellaneous areas edit database migration between dbmss see also database migration in data migration a database built with one dbms is not portable to another dbms i e the other dbms cannot run it however in some situations it is desirable to move migrate a database from one dbms to another the reasons are primarily economical different dbmss may have different total costs of ownership or tcos functional and operational different dbmss may have different capabilities the migration involves the database s transformation from one dbms type to another the transformation should maintain if possible the database related application i e all related application programs intact thus the database s conceptual and external architectural levels should be maintained in the transformation it may be desired that also some aspects of the architecture internal level are maintained a complex or large database migration may be a complicated and costly one time project by itself which should be factored into the decision to migrate this in spite of the fact that tools may exist to help migration between specific dbms typically a dbms vendor provides tools to help importing databases from other popular dbmss edit implementation database management systems main article database management system a database management system dbms is a system that allows to build and maintain databases as well as to utilize their data and retrieve information from it a dbms implements solutions see major database functional areas above to the database usability requirements above it defines the database type that it supports as well as its functionality and operational capabilities a dbms provides the internal processes for external applications built on them the end users of some such specific application are usually exposed only to that application and do not directly interact with the dbms thus end users enjoy the effects of the underlying dbms but its internals are completely invisible to end users database designers and database administrators interact with the dbms through dedicated interfaces to build and maintain the applications databases and thus need some more knowledge and understanding about how dbmss operate and the dbmss external interfaces and tuning parameters a dbms consists of software that operates databases providing storage access security backup and other facilities to meet needed requirements dbmss can be categorized according to the database model s that they support such as relational or xml the type s of computer they support such as a server cluster or a mobile phone the query language s that access the database such as sql or xquery performance trade offs such as maximum scale or maximum speed or others some dbmss cover more than one entry in these categories e g supporting multiple query languages database software typically support the open database connectivity odbc standard which allows the database to integrate to some extent with other databases the development of a mature general purpose dbms typically takes several years and many man years developers of dbms typically update their product to follow and take advantage of progress in computer and storage technologies several dbms products like oracle and ibm db2 have been in on going development since the 1970s 1980s since dbmss comprise a significant economical market computer and storage vendors often take into account dbms requirements in their own development plans edit dbms architecture major dbms components dbms architecture specifies its components including descriptions of their functions and their interfaces dbms architecture is distinct from database architecture the following are major dbms components dbms external interfaces they are the means to communicate with the dbms both ways to and from the dbms to perform all the operations needed for the dbms these can be operations on a database or operations to operate and manage the dbms for example direct database operations defining data types assigning security levels updating data querying the database etc operations related to dbms operation and management backup and restore database recovery security monitoring database storage allocation and database layout configuration monitoring performance monitoring and tuning etc an external interface can be either a user interface e g typically for a database administrator or an application programming interface api used for communication between an application program and the dbms database language engines or processors most operations upon databases are performed through expression in database languages see above languages exist for data definition data manipulation and queries e g sql as well as for specifying various aspects of security and more language expressions are fed into a dbms through proper interfaces a language engine processes the language expressions by a compiler or language interpreter to extract the intended database operations from the expression in a way that they can be executed by the dbms query optimizer performs query optimization on every query to choose for it the most efficient query plan a partial order tree of operations to be executed to compute the query result database engine performs the received database operations on the database objects typically at their higher level representation storage engine translates the operations to low level operations on the storage bits in some references the storage engine is viewed as part of the database engine transaction engine for correctness and reliability purposes most dbms internal operations are performed encapsulated in transactions see below transactions can also be specified externally to the dbms to encapsulate a group of operations the transaction engine tracks all the transactions and manages their execution according to the transaction rules e g proper concurrency control and proper commit or abort for each dbms management and operation component comprises many components that deal with all the dbms management and operational aspects like performance monitoring and tuning backup and restore recovery from failure security management and monitoring database storage allocation and database storage layout monitoring etc edit database storage main article computer data storage database storage is the container of the physical materialization of a database it comprises the internal physical level in the database architecture it also contains all the information needed e g metadata data about the data and internal data structures to reconstruct the conceptual level and external level from the internal level when needed it is not part of the dbms but rather manipulated by the dbms by its storage engine see above to manage the database that resides in it though typically accessed by a dbms through the underlying operating system and often utilizing the operating systems file systems as intermediates for storage layout storage properties and configuration setting are extremely important for the efficient operation of the dbms and thus are closely maintained by database administrators a dbms while in operation always has its database residing in several types of storage e g memory and external storage the database data and the additional needed information possibly in very large amounts are coded into bits data typically reside in the storage in structures that look completely different from the way the data look in the conceptual and external levels but in ways that attempt to optimize the best possible these levels reconstruction when needed by users and programs as well as for computing additional types of needed information from the data e g when querying the database in principle the database storage can be viewed as a linear address space where every bit of data has its unique address in this address space practically only a very small percentage of addresses is kept as initial reference points which also requires storage and most of the database data are accessed by indirection using displacement calculations distance in bits from the reference points and data structures which define access paths using pointers to all needed data in an effective manner optimized for the needed data access operations edit data edit coding the data and error correcting codes main articles code character encoding error detection and correction and cyclic redundancy check data are encoded by assigning a bit pattern to each language alphabet character digit other numerical patterns and multimedia object many standards exist for encoding e g ascii jpeg mpeg 4 by adding bits to each encoded unit the redundancy allows both to detect errors in coded data and to correct them based on mathematical algorithms errors occur regularly in low probabilities due to random bit value flipping or physical bit fatigue loss of the physical bit in storage its ability to maintain distinguishable value 0 or 1 or due to errors in inter or intra computer communication a random bit flip e g due to random radiation is typically corrected upon detection a bit or a group of malfunctioning physical bits not always the specific defective bit is known group definition depends on specific storage device is typically automatically fenced out taken out of use by the device and replaced with another functioning equivalent group in the device where the corrected bit values are restored if possible the cyclic redundancy check crc method is typically used in storage for error detection edit data compression main article data compression data compression methods allow in many cases to represent a string of bits by a shorter bit string compress and reconstruct the original string decompress when needed this allows to utilize substantially less storage tens of percents for many types of data at the cost of more computation compress and decompress when needed analysis of trade off between storage cost saving and costs of related computations and possible delays in data availability is done before deciding whether to keep certain data in a database compressed or not data compression is typically controlled through the dbms s data definition interface but in some cases may be a default and automatic edit data encryption main article cryptography for security reasons certain types of data e g credit card information may be kept encrypted in storage to prevent the possibility of unauthorized information reconstruction from chunks of storage snapshots taken either via unforeseen vulnerabilities in a dbms or more likely by bypassing it data encryption is typically controlled through the dbms s data definition interface but in some cases may be a default and automatic edit data storage types this collection of bits describes both the contained database data and their related metadata i e data that describe the contained data and allows computer programs to manipulate the database data correctly the size of a database can nowadays be tens of terabytes where a byte is eight bits the physical materialization of a bit can employ various existing technologies while new and improved technologies are constantly under development common examples are magnetic medium e g in magnetic disk orientation of magnetic field in magnetic regions on a surface of material two orientation directions for 0 and 1 dynamic random access memory dram state of a miniature electronic circuit consisting of few transistors among millions nowadays in an integrated circuit two states for 0 and 1 these two examples are respectively for two major storage types nonvolatile storage can maintain its bit states 0s and 1s without electrical power supply or when power supply is interrupted volatile storage loses its bit values when power supply is interrupted i e its content is erased sophisticated storage units which can in fact be effective dedicated parallel computers that support a large amount of nonvolatile storage typically must include also components with volatile storage some such units employ batteries that can provide power for several hours in case of external power interruption e g see the emc symmetrix and thus maintain the content of the volatile storage parts intact just before such a device s batteries lose their power the device typically automatically backs up its volatile content portion into nonvolatile and shuts off to protect its data databases are usually too expensive in terms of importance and needed investment in resources e g time money to build them to be lost by a power interruption thus at any point in time most of their content resides in nonvolatile storage even if for operational reason very large portions of them reside in volatile storage e g tens of gigabytes in volatile memory for in memory databases most of this is backed up in nonvolatile storage a relatively small portion of this which temporarily may not have nonvolatile backup can be reconstructed by proper automatic database recovery procedures after volatile storage content loss more examples of storage types volatile storage can be found in processors computer memory e g dram etc non volatile storage types include rom eprom hard disk drives flash memory and drives storage arrays etc edit storage metrics this section requires expansion july 2011 databases always use several types of storage when operational and implied several when idle different types may significantly differ in their properties and the optimal mix of storage types is determined by the types and quantities of operations that each storage type needs to perform as well as considerations like physical space and energy consumption and dissipation which may become critical for a large database storage types can be categorized by the following attributes volatile nonvolatile cost of the medium e g per megabyte cost to operate cost of energy consumed per unit time access speed e g bytes per second granularity 160 from fine to coarse e g size in bytes of access operation reliability the probability of spontaneous bit value change under various conditions maximal possible number of writes of any specific bit or specific group of bits could be constrained by the technology used e g write once or write twice or due to physical bit fatigue loss of ability to distinguish between the 0 1 states due to many state changes e g in flash memory power needed to operate energy per time energy per byte accessed energy efficiency heat to dissipate packaging density e g realistic number of bytes per volume unit edit protecting storage device content device mirroring replication and raid main articles disk mirroring and raid see also disk storage replication while a group of bits malfunction may be resolved by error detection and correction mechanisms see above storage device malfunction requires different solutions the following solutions are commonly used and valid for most storage devices device mirroring replication a common solution to the problem is constantly maintaining an identical copy of device content on another device typically of a same type the downside is that this doubles the storage and both devices copies need to be updated simultaneously with some overhead and possibly some delays the upside is possible concurrent read of a same data group by two independent processes which increases performance when one of the replicated devices is detected to be defective the other copy is still operational and is being utilized to generate a new copy on another device usually available operational in a pool of stand by devices for this purpose redundant array of independent disks raid this method generalizes the device mirroring above by allowing one device in a group of n devices to fail and be replaced with content restored device mirroring is raid with n 2 raid groups of n 5 or n 6 are common n gt 2 saves storage when comparing with n 2 at the cost of more processing during both regular operation with often reduced performance and defective device replacement device mirroring and typical raid are designed to handle a single device failure in the raid group of devices however if a second failure occurs before the raid group is completely repaired from the first failure then data can be lost the probability of a single failure is typically small thus the probability of two failures in a same raid group in time proximity is much smaller approximately the probability squared i e multiplied by itself if a database cannot tolerate even such smaller probability of data loss then the raid group itself is replicated mirrored in many cases such mirroring is done geographically remotely in a different storage array to handle also recovery from disasters see disaster recovery above edit database storage layout database bits are laid out in storage in data structures and grouping that can take advantage of both known effective algorithms to retrieve and manipulate them and the storage own properties typically the storage itself is design to meet requirements of various areas that extensively utilize storage including databases a dbms in operation always simultaneously utilizes several storage types e g memory and external storage with respective layout methods edit database storage hierarchy a database while in operation resides simultaneously in several types of storage by the nature of contemporary computers most of the database part inside a computer that hosts the dbms resides partially replicated in volatile storage data pieces of the database that are being processed manipulated reside inside a processor possibly in processor s caches these data are being read from written to memory typically through a computer bus so far typically volatile storage components computer memory is communicating data transferred to from external storage typically through standard storage interfaces or networks e g fibre channel iscsi a storage array a common external storage unit typically has storage hierarchy of it own from a fast cache typically consisting of volatile and fast dram which is connected again via standard interfaces to drives possibly with different speeds like flash drives and magnetic disk drives non volatile the drives may be connected to magnetic tapes on which typically the least active parts of a large database may reside or database backup generations typically a correlation exists currently between storage speed and price while the faster storage is typically volatile edit data structures main article database storage structures this section requires expansion june 2011 a data structure is an abstract construct that embeds data in a well defined manner an efficient data structure allows to manipulate the data in efficient ways the data manipulation may include data insertion deletion updating and retrieval in various modes a certain data structure type may be very effective in certain operations and very ineffective in others a data structure type is selected upon dbms development to best meet the operations needed for the types of data it contains type of data structure selected for a certain task typically also takes into consideration the type of storage it resides in e g speed of access minimal size of storage chunk accessed etc in some dbmss database administrators have the flexibility to select among options of data structures to contain user data for performance reasons sometimes the data structures have selectable parameters to tune the database performance databases may store data in many data structure types 15 common examples are the following ordered unordered flat files hash tables b trees isam heaps edit application data and dbms data a typical dbms cannot store the data of the application it serves alone in order to handle the application data the dbms need to store these data in data structures that comprise specific data by themselves in addition the dbms needs its own data structures and many types of bookkeeping data like indexes and logs the dbms data are an integral part of the database and may comprise a substantial portion of it edit database indexing main article index database indexing is a technique for improving database performance the many types of indexes share the common property that they reduce the need to examine every entry when running a query in large databases this can reduce query time cost by orders of magnitude the simplest form of index is a sorted list of values that can be searched using a binary search with an adjacent reference to the location of the entry analogous to the index in the back of a book the same data can have multiple indexes an employee database could be indexed by last name and hire date indexes affect performance but not results database designers can add or remove indexes without changing application logic reducing maintenance costs as the database grows and database usage evolves given a particular query the dbms query optimizer is responsible for devising the most efficient strategy for finding matching data indexes can speed up data access but they consume space in the database and must be updated each time the data are altered indexes therefore can speed data access but slow data maintenance these two properties determine whether a given index is worth the cost edit database data clustering in many cases substantial performance improvement is gained if different types of database objects that are usually utilized together are laid in storage in proximity being clustered this usually allows to retrieve needed related objects from storage in minimum number of input operations each sometimes substantially time consuming even for in memory databases clustering provides performance advantage due to common utilization of large caches for input output operations in memory with similar resulting behavior for example it may be beneficial to cluster a record of an item in stock with all its respective order records the decision of whether to cluster certain objects or not depends on the objects utilization statistics object sizes caches sizes storage types etc in a relational database clustering the two respective relations items and orders results in saving the expensive execution of a join operation between the two relations whenever such a join is needed in a query the join result is already ready in storage by the clustering available to be utilized edit database materialized views main article materialized view often storage redundancy is employed to increase performance a common example is storing materialized views which consist of frequently needed external views or query results storing such views saves the expensive computing of them each time they are needed the downsides of materialized views are the overhead incurred when updating them to keep them synchronized with their original updated database data and the cost of storage redundancy edit database and database object replication main article database replication see also replication below occasionally a database employs storage redundancy by database objects replication with one or more copies to increase data availability both to improve performance of simultaneous multiple end user accesses to a same database object and to provide resiliency in a case of partial failure of a distributed database updates of a replicated object need to be synchronized across the object copies in many cases the entire database is replicated edit database transactions main article database transaction as with every software system a dbms that operates in a faulty computing environment is prone to failures of many kinds a failure can corrupt the respective database unless special measures are taken to prevent this a dbms achieves certain levels of fault tolerance by encapsulating operations within transactions the concept of a database transaction or atomic transaction has evolved in order to enable both a well understood database system behavior in a faulty environment where crashes can happen any time and recovery from a crash to a well understood database state a database transaction is a unit of work typically encapsulating a number of operations over a database e g reading a database object writing acquiring lock etc an abstraction supported in database and also other systems each transaction has well defined boundaries in terms of which program code executions are included in that transaction determined by the transaction s programmer via special transaction commands edit acid rules main article acid every database transaction obeys the following rules atomicity either the effects of all or none of its operations remain all or nothing semantics when a transaction is completed committed or aborted respectively in other words to the outside world a committed transaction appears by its effects on the database to be indivisible atomic and an aborted transaction does not leave effects on the database at all as if never existed consistency every transaction must leave the database in a consistent correct state i e maintain the predetermined integrity rules of the database constraints upon and among the database s objects a transaction must transform a database from one consistent state to another consistent state however it is the responsibility of the transaction s programmer to make sure that the transaction itself is correct i e performs correctly what it intends to perform from the application s point of view while the predefined integrity rules are enforced by the dbms thus since a database can be normally changed only by transactions all the database s states are consistent an aborted transaction does not change the database state it has started from as if it never existed atomicity above isolation transactions cannot interfere with each other as an end result of their executions moreover usually depending on concurrency control method the effects of an incomplete transaction are not even visible to another transaction providing isolation is the main goal of concurrency control durability effects of successful committed transactions must persist through crashes typically by recording the transaction s effects and its commit event in a non volatile memory edit isolation concurrency control and locking main articles concurrency control isolation database systems and serializability and two phase locking isolation provides the ability for multiple users to operate on the database at the same time without corrupting the data concurrency control comprises the underlying mechanisms in a dbms which handle isolation and guarantee related correctness it is heavily utilized by the database and storage engines see above both to guarantee the correct execution of concurrent transactions and different mechanisms the correctness of other dbms processes the transaction related mechanisms typically constrain the database data access operations timing transaction schedules to certain orders characterized as the serializability and recoverabiliry schedule properties constraining database access operation execution typically means reduced performance rates of execution and thus concurrency control mechanisms are typically designed to provide the best performance possible under the constraints often when possible without harming correctness the serializability property is compromised for better performance however recoverability cannot be compromised since such typically results in a quick database integrity violation locking is the most common transaction concurrency control method in dbmss used to provide both serializability and recoverability for correctness in order to access a database object a transaction first needs to acquire a lock for this object depending on the access operation type e g reading or writing an object and on the lock type acquiring the lock may be blocked and postponed if another transaction is holding a lock for that object edit query optimization main articles query optimization and query optimizer a query is a request for information from a database it can be as simple as finding the address of a person with ss 123 45 6789 or more complex like finding the average salary of all the employed married men in california between the ages 30 to 39 that earn less than their wives queries results are generated by accessing relevant database data and manipulating them in a way that yields the requested information since database structures are complex in most cases and especially for not very simple queries the needed data for a query can be collected from a database by accessing it in different ways through different data structures and in different orders each different way typically requires different processing time processing times of a same query may have large variance from a fraction of a second to hours depending on the way selected the purpose of query optimization which is an automated process is to find the way to process a given query in minimum time the large possible variance in time justifies performing query optimization though finding the exact optimal way to execute a query among all possibilities is typically very complex time consuming by itself may be too costly and often practically impossible thus query optimization typically tries to approximate the optimum by comparing several common sense alternatives to provide in a reasonable time a good enough plan which typically does not deviate much from the best possible result edit dbms support for the development and maintenance of a database and its application this section requires expansion may 2011 a dbms typically intends to provide convenient environment to develop and later maintain an application built around its respective database type a dbms either provides such tools or allows integration with such external tools examples for tools relate to database design application programming application program maintenance database performance analysis and monitoring database configuration monitoring dbms hardware configuration a dbms and related database may span computers networks and storage units and related database mapping especially for a distributed dbms storage allocation and database layout monitoring storage migration etc edit see also book databases comparison of database tools comparison of relational database management systems comparison of object database management systems data hierarchy data store database testing edit references jeffrey ullman and jennifer widom 1997 first course in database systems prentice hall inc simon amp schuster page 1 isbn 0 13 861337 0 c w bachmann the programmer as navigator graves steve cots databases for embedded systems embedded computing design magazine january 2007 retrieved on august 13 2008 telecommunication systems signs up as a reseller of timesten mobile operators and carriers gain real time platform for location based services business wire 2002 06 24 http findarticles com p articles mi m0ein is 2002 june 24 ai 87694370 argumentation in artificial intelligence by iyad rahwan guillermo r simari owl dl semantics http www obitko com tutorials ontologies semantic web owl dl semantics html retrieved 10 december 2010 introducing databases by stephen chu in conrick m 2006 health informatics transforming healthcare with technology thomson isbn 0 17 012731 1 p 69 date c j june 1 1999 when s an extension not an extension intelligent enterprise 2 8 http intelligent enterprise informationweek com db area archives 1999 990106 online1 jhtml jsessionid y2unk1qfkxmbtqe1ghrskh4atmy32jvn zhuge h 2008 the web resource space model web information systems engineering and internet technologies book series 4 springer isbn 160 978 0 387 72771 4 chapple mike sql fundamentals databases about com http databases about com od sql a sqlfundamentals htm retrieved 2009 01 28 structured query language sql international business machines october 27 2006 http publib boulder ibm com infocenter db2luw v9 index jsp topic com ibm db2 udb admin doc doc c0004100 htm retrieved 2007 06 10 wagner michael 2010 1 auflage sql xml 2006 evaluierung der standardkonformit t ausgew hlter datenbanksysteme diplomica verlag isbn 160 3 8366 9609 6 a b date 1990 pp 160 31 32 johann a makowsky victor m markowitz and nimrod rotics 1986 entity relationship consistency for relational schemas proceedings of the 1986 conference on database theory icdt 86 lecture notes in computer science 1986 volume 243 1986 pp 306 322 springer doi 10 1007 3 540 17187 8 43 lightstone teorey amp nadeau 2007 edit further reading ling liu and tamer m zsu eds 2009 encyclopedia of database systems 4100 p 160 60 illus isbn 978 0 387 49616 0 beynon davies p 2004 database systems 3rd edition palgrave houndmills basingstoke connolly thomas and carolyn begg database systems new york harlow 2002 date c j 2003 an introduction to database systems fifth edition addison wesley isbn 160 0 201 51381 1 gray j and reuter a transaction processing concepts and techniques 1st edition morgan kaufmann publishers 1992 kroenke david m and david j auer database concepts 3rd ed new york prentice 2007 lightstone s teorey t nadeau t 2007 physical database design the database professional s guide to exploiting indexes views storage and more morgan kaufmann press isbn 160 0 12 369389 6 teorey t lightstone s and nadeau t database modeling amp design logical design 4th edition morgan kaufmann press 2005 isbn 0 12 685352 5 edit external links find more about database at wikipedia s sister projects definitions and translations from wiktionary media from commons learning resources from wikiversity news stories from wikinews quotations from wikiquote source texts from wikisource textbooks from wikibooks database at the open directory project v t e database main requirements theory models database management system machine server application connection datasource dsn administrator lock types tools languages data definition data manipulation query information retrieval security activity monitoring audit forensics negative database design entities and relationships and enhanced notation normalization refactoring programming abstraction layer object relational mapping management virtualization tuning caching migration preservation integrity see also database centric architecture intelligent database two phase locking locks with ordered sharing load file publishing halloween problem log shipping book category wikiproject v t e database management systems database models database normalization database storage distributed dbms federated database system referential integrity relational algebra relational calculus relational database relational dbms relational model object relational database transaction processing concepts database acid crud null candidate key foreign key primary key superkey surrogate key armstrong s axioms objects relation table column row view transaction log trigger index stored procedure cursor partition components concurrency control data dictionary jdbc xqj odbc query language query optimizer query plan functions administration and automation query optimization replication database products object oriented comparison relational comparison document oriented nosql newsql v t e database models models flat hierarchical dimensional model network relational entity relationship and enhanced notation graph object oriented entity attribute value model other models associative multidimensional semantic star schema xml database implementations flat file deductive document oriented object relational temporal xml data stores triplestores v t e data warehouse 160 creating the data warehouse concepts database dimension dimensional modeling fact olap star schema aggregate variants anchor modeling column oriented dbms data vault modeling holap molap rolap operational data store elements data dictionary metadata data mart sixth normal form surrogate key fact fact table early arriving fact measure dimension dimension table degenerate slowly changing filling extract transform load etl extract transform load 160 using the data warehouse concepts business intelligence dashboard data mining decision support system dss olap cube languages data mining extensions dmx multidimensional expressions mdx xml for analysis xmla tools business intelligence tools reporting software spreadsheet 160 related people bill inmon ralph kimball products comparison of olap servers data warehousing products and their producers 