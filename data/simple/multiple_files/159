data transformation source transformation concepts metadata data mapping data transformation model transformation languages atl awk mofm2t qvt txl xml languages techniques and transforms identity synthesis refinement applications data migration data conversion etl program transformation application fields data warehouse software engineering software languages macro preprocessing template v t e this article is about data transformation in computer science metadata for statistical application see data transformation statistics in metadata and data warehouse a data transformation converts a set of data values from the data format of a source data system into the data format of a destination data system data transformation can be divided into two steps data mapping maps data elements from the source data system to the destination data system and captures any transformation that must occur code generation that creates the actual transformation program data element to data element mapping is frequently complicated by complex transformations that require one to many and many to one transformation rules the code generation step takes the data element mapping specification and creates an executable program that can be run on a computer system code generation can also create transformation in easy to maintain computer languages such as java or xslt a master data recast is another form of data transformation where the entire database of data values is transformed or recast without extracting the data from the database all data in a well designed database is directly or indirectly related to a limited set of master database tables by a network of foreign key constraints each foreign key constraint is dependent upon a unique database index from the parent database table therefore when the proper master database table is recast with a different unique index the directly and indirectly related data is also recast or restated the directly and indirectly related data may also still be viewed in the original form since the original unique index still exists with the master data also the database recast must be done in such a way as to not impact the applications architecture software when the data mapping is indirect via a mediating data model the process is also called data mediation contents 1 transformational languages 2 transforming source code 2 1 example 3 see also 4 references 5 external links edit transformational languages there are numerous languages available for performing data transformation many transformation languages require a grammar to be provided in many cases the grammar is structured using something closely resembling backus naur form bnf there are numerous languages available for such purposes varying in their accessibility cost and general usefulness examples of such languages include awk one of the oldest and popular txt data transform language perl a high level language with both procedural and object oriented syntax capable of powerful operations on binary or text data template languages specialized for transform data into documents see also template processor txl prototyping language based descriptions used for source code or data transformation xslt the standard xml data transformation language suitable by xquery in many applications although transformational languages are typically best suited for transformation something as simple as regular expressions can be used to achieve useful transformation a text editor like emacs or textpad supports the use of regular expressions with arguments this would allow all instances of a particular pattern to be replaced with another pattern using parts of the original pattern for example foo some string 42 gcommon bar someobj anotherobj foo another string 24 gcommon bar myobj myotherobj could both be transformed into a more compact form like foobar some string 42 someobj anotherobj foobar another string 24 myobj myotherobj in other words all instances of a function invocation of foo with three arguments followed by a function invocation with two invocations would be replaced with a single function invocation using some or all of the original set of arguments another advantage to using regular expressions is that they will not fail the null transform test that is using your transformational language of choice run a sample program through a transformation that doesn t perform any transformations many transformational languages will fail this test edit transforming source code program synthesis automatic programming and other fields use the data transformation strategies for translate adapt or even generate software source code inversely these source transformation tools can be used for data transform typically for transform document source code as html or another xml dialect see also template processors for further information on software source transformation see 1 chapter 2 4 or 2 generally the different types of transformations fall into one of two categories 3 translation a transformation from a language x into another language y rephrasing a rephrasing involves a transformation within the same language but merely stated a different way edit example a difficult problem to address in c is unstructured preprocessor directives these are preprocessor directives which do not contain blocks of code with simple grammatical descriptions like in this function definition void myfunc if x gt 17 printf test ifdef foo else endif if gwatch mtest 42 a really general solution to handling this is very hard because such preprocessor directives can essentially edit the underlying language in arbitrary ways however because such directives are not in practice used in completely arbitrary ways one can build practical tools for handling preprocessed languages the dms software reengineering toolkit is capable of handling structured macros and preprocessor conditionals brabrand and schwartzbach 2000 4 offer another approach substituting the c preprocessor by a metamorphic one edit see also concepts data conversion data mapping data element data migration data wrangling metadata model transformation transformation language refinement contrast 160 160 languages and typical transforms atl awk tabular data transforms identity transform qvt txl general xquery xml xslt xml 160 160 other file formats transformation and migration related wikiversity article edit references t cassidy 2004 concurrency analysis of java rmi using source transformation and verisoft http citeseerx ist psu edu viewdoc download doi 10 1 1 90 5755 amp rep rep1 amp type pdf j r cordy 2006 the txl source transformation language doi 10 1016 j scico 2006 04 002 eelco visser 2001 a survey of strategies in program transformation systems electronic notes in theoretical computer science 57 363 377 claus brabrand and michael i schwartzbach 2000 growing languages with metamorphic syntax macros brics report series rs 00 24 brics denmark issn 0909 0878 edit external links extraction and transformation at the open directory project v t e data warehouse 160 creating the data warehouse concepts database dimension dimensional modeling fact olap star schema aggregate variants anchor modeling column oriented dbms data vault modeling holap molap rolap operational data store elements data dictionary metadata data mart sixth normal form surrogate key fact fact table early arriving fact measure dimension dimension table degenerate slowly changing filling extract transform load etl extract transform load 160 using the data warehouse concepts business intelligence dashboard data mining decision support system dss olap cube languages data mining extensions dmx multidimensional expressions mdx xml for analysis xmla tools business intelligence tools reporting software spreadsheet 160 related people bill inmon ralph kimball products comparison of olap servers data warehousing products and their producers 