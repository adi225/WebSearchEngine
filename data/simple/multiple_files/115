programming redirects here for other uses see programming disambiguation software development process a software engineer programming at work activities and steps requirements specification architecture design implementation testing debugging deployment maintenance methodologies waterfall prototype model incremental iterative v model spiral scrum cleanroom rad dsdm rup xp agile lean dual vee model tdd fdd supporting disciplines configuration management documentation quality assurance sqa project management user experience design tools compiler debugger profiler gui designer ide build automation v t e wikiversity has learning materials about programming computer programming often shortened to programming scripting or coding is the process of designing writing testing debugging and maintaining the source code of computer programs this source code is written in one or more programming languages such as c c java python smalltalk etc the purpose of programming is to create a set of instructions that computers use to perform specific operations or to exhibit desired behaviors the process of writing source code often requires expertise in many different subjects including knowledge of the application domain specialized algorithms and formal logic within software engineering programming the implementation is regarded as one phase in a software development process there is an ongoing debate on the extent to which the writing of programs is an art form a craft or an engineering discipline 1 in general good programming is considered to be the measured application of all three with the goal of producing an efficient and evolvable software solution the criteria for efficient and evolvable vary considerably the discipline differs from many other technical professions in that programmers in general do not need to be licensed or pass any standardized or governmentally regulated certification tests in order to call themselves programmers or even software engineers because the discipline covers many areas which may or may not include critical applications it is debatable whether licensing is required for the profession as a whole in most cases the discipline is self governed by the entities which require the programming and sometimes very strict environments are defined e g united states air force use of adacore and security clearance however representing oneself as a professional software engineer without a license from an accredited institution is illegal in many parts of the world another ongoing debate is the extent to which the programming language used in writing computer programs affects the form that the final program takes this debate is analogous to that surrounding the sapir whorf hypothesis 2 in linguistics and cognitive science which postulates that a particular spoken language s nature influences the habitual thought of its speakers different language patterns yield different patterns of thought this idea challenges the possibility of representing the world perfectly with language because it acknowledges that the mechanisms of any language condition the thoughts of its speaker community contents 1 history 2 modern programming 2 1 quality requirements 2 2 readability of source code 2 3 algorithmic complexity 2 4 methodologies 2 5 measuring language usage 2 6 debugging 3 programming languages 4 programmers 5 see also 6 references 7 further reading 8 external links edit history see also history of programming languages ada lovelace created the first algorithm designed for processing by a computer and is usually recognized as history s first computer programmer ancient cultures had no conception of computing beyond simple arithmetic the only mechanical device that existed for numerical computation at the beginning of human history was the abacus invented in sumeria circa 2500 bc later the antikythera mechanism invented some time around 100 ad in ancient greece was the first mechanical calculator utilizing gears of various sizes and configuration to perform calculations 3 which tracked the metonic cycle still used in lunar to solar calendars and which is consistent for calculating the dates of the olympiads 4 the kurdish medieval scientist al jazari built programmable automata in 1206 ad one system employed in these devices was the use of pegs and cams placed into a wooden drum at specific locations which would sequentially trigger levers that in turn operated percussion instruments the output of this device was a small drummer playing various rhythms and drum patterns 5 6 the jacquard loom which joseph marie jacquard developed in 1801 uses a series of pasteboard cards with holes punched in them the hole pattern represented the pattern that the loom had to follow in weaving cloth the loom could produce entirely different weaves using different sets of cards charles babbage adopted the use of punched cards around 1830 to control his analytical engine the first computer program was written for the analytical engine by mathematician ada lovelace to calculate a sequence of bernoulli numbers 7 the synthesis of numerical calculation predetermined operation and output along with a way to organize and input instructions in a manner relatively easy for humans to conceive and produce led to the modern development of computer programming development of computer programming accelerated through the industrial revolution data and instructions were once stored on external punched cards which were kept in order and arranged in program decks in the 1880s herman hollerith invented the recording of data on a medium that could then be read by a machine prior uses of machine readable media above had been for lists of instructions not data to drive programmed machines such as jacquard looms and mechanized musical instruments after some initial trials with paper tape he settled on punched cards 8 to process these punched cards first known as hollerith cards he invented the keypunch sorter and tabulator unit record machines 9 these inventions were the foundation of the data processing industry in 1896 he founded the tabulating machine company which later became the core of ibm the addition of a control panel plugboard to his 1906 type i tabulator allowed it to do different jobs without having to be physically rebuilt by the late 1940s there were several unit record calculators such as the ibm 602 and ibm 604 whose control panels specified a sequence list of operations and thus were programmable machines the invention of the von neumann architecture allowed computer programs to be stored in computer memory early programs had to be painstakingly crafted using the instructions elementary operations of the particular machine often in binary notation every model of computer would likely use different instructions machine language to do the same task later assembly languages were developed that let the programmer specify each instruction in a text format entering abbreviations for each operation code instead of a number and specifying addresses in symbolic form e g add x total entering a program in assembly language is usually more convenient faster and less prone to human error than using machine language but because an assembly language is little more than a different notation for a machine language any two machines with different instruction sets also have different assembly languages wired control panel for an ibm 402 accounting machine in 1954 fortran was invented it was the first high level programming language to have a functional implementation as opposed to just a design on paper 10 11 a high level language is in very general terms any programming language that allows the programmer to write programs in terms that are more abstract than assembly language instructions i e at a level of abstraction higher than that of an assembly language it allowed programmers to specify calculations by entering a formula directly e g y x 2 5 x 9 the program text or source is converted into machine instructions using a special program called a compiler which translates the fortran program into machine language in fact the name fortran stands for formula translation many other languages were developed including some for commercial programming such as cobol programs were mostly still entered using punched cards or paper tape see computer programming in the punch card era by the late 1960s data storage devices and computer terminals became inexpensive enough that programs could be created by typing directly into the computers text editors were developed that allowed changes and corrections to be made much more easily than with punched cards usually an error in punching a card meant that the card had to be discarded and a new one punched to replace it modern programming languages like c are exponentially more powerful than their predecessors as time has progressed computers have made giant leaps in the area of processing power this has brought about newer programming languages that are more abstracted from the underlying hardware popular programming languages of the modern era include actionscript c c haskell html with php java javascript objective c perl python ruby smalltalk sql visual basic and dozens more 12 although these high level languages usually incur greater overhead the increase in speed of modern computers has made the use of these languages much more practical than in the past these increasingly abstracted languages typically are easier to learn and allow the programmer to develop applications much more efficiently and with less source code however high level languages are still impractical for a few programs such as those where low level hardware control is necessary or where maximum processing speed is vital computer programming has become a popular career in the developed world particularly in the united states europe scandinavia and japan due to the high labor cost of programmers in these countries some forms of programming have been increasingly subject to offshore outsourcing importing software and services from other countries usually at a lower wage making programming career decisions in developed countries more complicated while increasing economic opportunities for programmers in less developed areas particularly china and india edit modern programming this section relies largely or entirely upon a single source relevant discussion may be found on the talk page please help improve this article by introducing citations to additional sources august 2010 edit quality requirements whatever the approach to software development may be the final program must satisfy some fundamental properties the following properties are among the most relevant reliability how often the results of a program are correct this depends on conceptual correctness of algorithms and minimization of programming mistakes such as mistakes in resource management e g buffer overflows and race conditions and logic errors such as division by zero or off by one errors robustness how well a program anticipates problems not due to programmer error this includes situations such as incorrect inappropriate or corrupt data unavailability of needed resources such as memory operating system services and network connections and user error usability the ergonomics of a program the ease with which a person can use the program for its intended purpose or in some cases even unanticipated purposes such issues can make or break its success even regardless of other issues this involves a wide range of textual graphical and sometimes hardware elements that improve the clarity intuitiveness cohesiveness and completeness of a program s user interface portability the range of computer hardware and operating system platforms on which the source code of a program can be compiled interpreted and run this depends on differences in the programming facilities provided by the different platforms including hardware and operating system resources expected behaviour of the hardware and operating system and availability of platform specific compilers and sometimes libraries for the language of the source code maintainability the ease with which a program can be modified by its present or future developers in order to make improvements or customizations fix bugs and security holes or adapt it to new environments good practices during initial development make the difference in this regard this quality may not be directly apparent to the end user but it can significantly affect the fate of a program over the long term efficiency performance the amount of system resources a program consumes processor time memory space slow devices such as disks network bandwidth and to some extent even user interaction the less the better this also includes correct disposal of some resources such as cleaning up temporary files and lack of memory leaks edit readability of source code in computer programming readability refers to the ease with which a human reader can comprehend the purpose control flow and operation of source code it affects the aspects of quality above including portability usability and most importantly maintainability readability is important because programmers spend the majority of their time reading trying to understand and modifying existing source code rather than writing new source code unreadable code often leads to bugs inefficiencies and duplicated code a study 13 found that a few simple readability transformations made code shorter and drastically reduced the time to understand it following a consistent programming style often helps readability however readability is more than just programming style many factors having little or nothing to do with the ability of the computer to efficiently compile and execute the code contribute to readability 14 some of these factors include different indentation styles whitespace comments decomposition naming conventions for objects such as variables classes procedures etc various visual programming languages have also been developed with the intent to resolve readability concerns by adopting non traditional approaches to code structure and display edit algorithmic complexity the academic field and the engineering practice of computer programming are both largely concerned with discovering and implementing the most efficient algorithms for a given class of problem for this purpose algorithms are classified into orders using so called big o notation which expresses resource use such as execution time or memory consumption in terms of the size of an input expert programmers are familiar with a variety of well established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances edit methodologies the first step in most formal software development processes is requirements analysis followed by testing to determine value modeling implementation and failure elimination debugging there exist a lot of differing approaches for each of those tasks one approach popular for requirements analysis is use case analysis nowadays many programmers use forms of agile software development where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years there are many approaches to the software development process popular modeling techniques include object oriented analysis and design ooad and model driven architecture mda the unified modeling language uml is a notation used for both the ooad and mda a similar technique used for database design is entity relationship modeling er modeling implementation techniques include imperative languages object oriented or procedural functional languages and logic languages edit measuring language usage it is very difficult to determine what are the most popular of modern programming languages some languages are very popular for particular kinds of applications e g cobol is still strong in the corporate data center citation needed often on large mainframes fortran in engineering applications scripting languages in web development and c in embedded applications while some languages are regularly used to write many different kinds of applications also many applications use a mix of several languages in their construction and use new languages are generally designed around the syntax of a previous language with new functionality added for example c adds object orientedness to c and java adds memory management and bytecode to c methods of measuring programming language popularity include counting the number of job advertisements that mention the language 15 the number of books sold and courses teaching the language this overestimates the importance of newer languages and estimates of the number of existing lines of code written in the language this underestimates the number of users of business languages such as cobol edit debugging the bug from 1947 which is at the origin of a popular but incorrect etymology for the common term for a software defect debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages use of a static code analysis tool can help detect some possible problems debugging is often done with ides like eclipse kdevelop netbeans code blocks and visual studio standalone debuggers like gdb are also used and these often provide less of a visual environment usually using a command line edit programming languages main articles programming language and list of programming languages different programming languages support different styles of programming called programming paradigms the choice of language used is subject to many considerations such as company policy suitability to task availability of third party packages or individual preference ideally the programming language best suited for the task at hand will be selected trade offs from this ideal involve finding enough programmers who know the language to build a team the availability of compilers for that language and the efficiency with which programs written in a given language execute languages form an approximate spectrum from low level to high level low level languages are typically more machine oriented and faster to execute whereas high level languages are more abstract and easier to use but execute less quickly it is usually easier to code in high level languages than in low level ones allen downey in his book how to think like a computer scientist writes the details look different in different languages but a few basic instructions appear in just about every language input gather data from the keyboard a file or some other device output display data on the screen or send data to a file or other device arithmetic perform basic arithmetical operations like addition and multiplication conditional execution check for certain conditions and execute the appropriate sequence of statements repetition perform some action repeatedly usually with some variation many computer languages provide a mechanism to call functions provided by libraries such as in a so provided the functions in a library follow the appropriate run time conventions e g method of passing arguments then these functions may be written in any other language edit programmers main article programmer see also software developer 160 and software engineer computer programmers are those who write computer software their jobs usually involve coding compilation debugging documentation integration maintenance requirements analysis software architecture software testing specification edit see also book programming computer science portal computing portal computer networking portal computer programming portal main article outline of computer programming accu association for computing machinery computer networking computer programming in the punch card era computer science computing hello world program institution of analysts and programmers programming paradigms software engineering system programming the art of computer programming edit references paul graham 2003 hackers and painters http www paulgraham com hp html retrieved 2006 08 22 kenneth e iverson the originator of the apl programming language believed that the sapir whorf hypothesis applied to computer languages without actually mentioning the hypothesis by name his turing award lecture notation as a tool of thought was devoted to this theme arguing that more powerful notations aided thinking about computer algorithms iverson k e notation as a tool of thought communications of the acm 23 444 465 august 1980 ancient greek computer s inner workings deciphered national geographic news november 29 2006 freeth tony jones alexander steele john m bitsakis yanis july 31 2008 calendars with olympiad display and eclipse prediction on the antikythera mechanism nature 454 7204 614 617 doi 10 1038 nature07130 pmid 160 18668103 http www nature com nature journal v454 n7204 full nature07130 html a 13th century programmable robot dead link university of sheffield fowler charles b october 1967 the museum of music a history of mechanical instruments music educators journal music educators journal vol 54 no 2 54 2 45 49 doi 10 2307 3391092 jstor 160 3391092 fuegi j francis j 2003 lovelace amp babbage and the creation of the 1843 notes ieee annals of the history of computing 25 4 16 doi 10 1109 mahc 2003 1253887 edit columbia university computing history herman hollerith columbia edu http www columbia edu acis history hollerith html retrieved 2010 04 25 u s census bureau the hollerith machine 12 10 p m et 2007 03 20 fortran creator john backus dies tech and gadgets msnbc com msnbc http www msnbc msn com id 17704662 retrieved 2010 04 25 csc 302 99s 160 class 02 a brief history of programming languages math grin edu http www math grin edu rebelsky courses cs302 99s outlines outline 02 html retrieved 2010 04 25 james l elshoff michael marcotty improving computer program readability to aid modification communications of the acm v 25 n 8 p 512 521 aug 1982 multiple wiki readability docforge http docforge com wiki readability retrieved 2010 01 30 survey of job advertisements mentioning a given language edit further reading a k hartmann practical guide to computer simulations singapore world scientific 2009 a hunt d thomas and w cunningham the pragmatic programmer from journeyman to master amsterdam addison wesley longman 1999 brian w kernighan the practice of programming pearson 1999 weinberg gerald m the psychology of computer programming new york van nostrand reinhold 1971 edit external links wikibooks has a book on the topic of computer programming wikibooks has a book on the topic of windows programming wikiquote has a collection of quotations related to programming software engineering at the open directory project programming wikia how to think like a computer scientist by jeffrey elkner allen b downey and chris meyers v t e major fields of computer science mathematical foundations mathematical logic set theory number theory graph theory type theory category theory numerical analysis information theory combinatorics boolean algebra theory of computation automata theory computability theory computational complexity theory quantum computing theory algorithms data structures analysis of algorithms algorithm design computational geometry programming languages compilers parsers interpreters procedural programming object oriented programming functional programming logic programming programming paradigms concurrent parallel distributed systems multiprocessing grid computing concurrency control software engineering requirements analysis software design computer programming formal methods software testing software development process system architecture computer architecture computer organization operating systems telecommunication networking computer audio routing network topology cryptography databases database management systems relational databases sql transactions database indexes data mining artificial intelligence automated reasoning computational linguistics computer vision evolutionary computation expert systems machine learning natural language processing robotics computer graphics visualization computer animation image processing human computer interaction computer accessibility user interfaces wearable computing ubiquitous computing virtual reality scientific computing artificial life bioinformatics cognitive science computational chemistry computational neuroscience computational physics numerical algorithms symbolic mathematics note computer science can also be divided into different topics or fields according to the acm computing classification system v t e software engineering fields computer programming formal methods requirements analysis software deployment software design software maintenance software testing systems analysis concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software architecture software development methodology software development process software quality software quality assurance software archaeology structured analysis orientations agile aspect oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model rup scrum prototype model spiral model v model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers kent beck grady booch fred brooks barry boehm peter chen ward cunningham ole johan dahl tom demarco martin fowler c a r hoare watts humphrey michael a jackson ivar jacobson james martin stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon victor basili related fields computer science computer engineering enterprise engineering history management project management quality management software ergonomics systems engineering category commons 