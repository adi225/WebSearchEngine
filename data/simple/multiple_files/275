this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed march 2011 a database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of slower writes and increased storage space indices can be created using one or more columns of a database table providing the basis for both rapid random lookups and efficient access of ordered records in a relational database an index is a copy of one part of a table some databases extend the power of indexing by allowing indices to be created on functions or expressions for example an index could be created on upper last name which would only store the upper case versions of the last name field in the index another option sometimes supported is the use of filtered indices where index entries are created only for those records that satisfy some conditional expression a further aspect of flexibility is to permit indexing on user defined functions as well as expressions formed from an assortment of built in functions contents 1 usage 1 1 support for fast lookup 1 2 policing the database constraints 2 index architecture 2 1 non clustered 2 2 clustered 2 3 cluster 3 column order 4 applications and limitations 5 types of indexes 5 1 bitmap index 5 2 dense index 5 3 sparse index 5 4 reverse index 6 index implementations 6 1 index concurrency control 7 covering index 8 standardization 9 see also 10 references edit usage edit support for fast lookup most database software includes indexing technology that enables sub linear time lookup to improve performance as linear search is inefficient for large databases suppose a data store contains n data objects and it is desired to retrieve one of them based on the value of one of the object s fields a naive implementation would retrieve and examine each object until a match was found a successful lookup would retrieve half the objects on average an unsuccessful lookup all of them for each attempt this means that the number of operations in the worst case is o n or linear time since data stores commonly contain millions of objects and since lookup is a common operation it is often desirable to improve on this performance an index is any data structure that improves the performance of lookup there are many different data structures used for this purpose and in fact a substantial proportion of the field of computer science is devoted to the design and analysis of index data structures there are complex design trade offs involving lookup performance index size and index update performance many index designs exhibit logarithmic o log n lookup performance and in some applications it is possible to achieve flat o 1 performance edit policing the database constraints indices are used to police database constraints such as unique exclusion primary key and foreign key an index may be declared as unique which creates an implicit constraint on the underlying table database systems usually implicitly create an index on a set of columns declared primary key and some are capable of using an already existing index to police this constraint many database systems require that both referencing and referenced sets of columns in a foreign key constraint are indexed thus improving performance of inserts updates and deletes to the tables participating in the constraint some database systems support exclusion constraint which ensures that for a newly inserted or updated record a certain predicate would hold for no other record this may be used to implement a unique constraint with equality predicate or more complex constraints like ensuring that no overlapping time ranges or no intersecting geometry objects would be stored in the table an index supporting fast searching for records satisfying the predicate is required to police such a constraint 1 edit index architecture edit non clustered the data is present in arbitrary order but the logical ordering is specified by the index the data rows may be spread throughout the table regardless of the value of the indexed column or expression the non clustered index tree contains the index keys in sorted order with the leaf level of the index containing the pointer to the record page and the row number in the data page in page organized engines row offset in file organized engines in a non clustered index the physical order of the rows is not the same as the index order typically created on non primary key columns used in join where and order by clauses there can be more than one non clustered index on a database table edit clustered clustering alters the data block into a certain distinct order to match the index resulting in the row data being stored in order therefore only one clustered index can be created on a given database table clustered indices can greatly increase overall speed of retrieval but usually only where the data is accessed sequentially in the same or reverse order of the clustered index or when a range of items is selected since the physical records are in this sort order on disk the next row item in the sequence is immediately before or after the last one and so fewer data block reads are required the primary feature of a clustered index is therefore the ordering of the physical data rows in accordance with the index blocks that point to them some databases separate the data and index blocks into separate files others put two completely different data blocks within the same physical file s create an object where the physical order of rows is the same as the index order of the rows and the bottom leaf level of clustered index contains the actual data rows edit cluster when multiple databases and multiple tables are joined it s referred to as a cluster not to be confused with clustered index described above the records for the tables sharing the value of a cluster key shall be stored together in the same or nearby data blocks this may improve the joins of these tables on the cluster key since the matching records are stored together and less i o is required to locate them 2 the data layout in the tables which are parts of the cluster is defined by the cluster configuration a cluster can be keyed with a b tree index or a hash table the data block in which the table record will be stored is defined by the value of the cluster key edit column order the order in which columns are listed in the index definition is important it is possible to retrieve a set of row identifiers using only the first indexed column however it is not possible or efficient on most databases to retrieve the set of row identifiers using only the second or greater indexed column for example imagine a phone book that is organized by city first then by last name and then by first name if you are given the city you can easily extract the list of all phone numbers for that city however in this phone book it would be very tedious to find all the phone numbers for a given last name you would have to look within each city s section for the entries with that last name some databases can do this others just won t use the index edit applications and limitations indices are useful for many applications but come with some limitations consider the following sql statement select first name from people where last name smith to process this statement without an index the database software must look at the last name column on every row in the table this is known as a full table scan with an index the database simply follows the b tree data structure until the smith entry has been found this is much less computationally expensive than a full table scan consider this sql statement select email address from customers where email address like yahoo com this query would yield an email address for every customer whose email address ends with yahoo com but even if the email address column has been indexed the database must perform a full index scan this is because the index is built with the assumption that words go from left to right with a wildcard at the beginning of the search term the database software is unable to use the underlying b tree data structure in other words the where clause is not sargable this problem can be solved through the addition of another index created on reverse email address and a sql query like this select email address from customers where reverse email address like reverse yahoo com this puts the wild card at the right most part of the query now moc oohay which the index on reverse email address can satisfy edit types of indexes edit bitmap index main article bitmap index a bitmap index is a special kind of index that stores the bulk of its data as bit arrays bitmaps and answers most queries by performing bitwise logical operations on these bitmaps the most commonly used indexes such as b trees are most efficient if the values they index do not repeat or repeat a smaller number of times in contrast the bitmap index is designed for cases where the values of a variable repeat very frequently for example the gender field in a customer database usually contains two distinct values male or female for such variables the bitmap index can have a significant performance advantage over the commonly used trees edit dense index a dense index in databases is a file with pairs of keys and pointers for every record in the data file every key in this file is associated with a particular pointer to a record in the sorted data file in clustered indices with duplicate keys the dense index points to the first record with that key 3 edit sparse index a sparse index in databases is a file with pairs of keys and pointers for every block in the data file every key in this file is associated with a particular pointer to the block in the sorted data file in clustered indices with duplicate keys the sparse index points to the lowest search key in each block edit reverse index main article reverse index a reverse key index reverses the key value before entering it in the index e g the value 24538 becomes 83542 in the index reversing the key value is particularly useful for indexing data such as sequence numbers where new key values monotonically increase edit index implementations indices can be implemented using a variety of data structures popular indices include balanced trees b trees and hashes 4 in microsoft sql server the leaf node of the clustered index corresponds to the actual data not simply a pointer to data that resides elsewhere as is the case with a non clustered index 5 each relation can have a single clustered index and many unclustered indices 6 edit index concurrency control main article index locking an index is typically being accessed concurrently by several transactions and processes and thus needs concurrency control while in principle indexes can utilize the common database concurrency control methods specialized concurrency control methods for indexes exist which are applied in conjunction with the common methods for a substantial performance gain edit covering index in most cases an index is used to quickly locate the data record s from which the required data is read in other words the index is only used to locate data records in the table and not to return data a covering index is a special case where the index itself contains the required data field s and can return the data consider the following table other fields omitted id name other fields 12 plug 13 lamp 14 fuse to find the name for id 13 an index on id will be useful but the record must still be read to get the name however an index on id name contains the required data field and eliminates the need to look up the record a covering index can dramatically speed up data retrieval but may itself be large due to the additional keys which slow down data insertion amp update to reduce such index size some systems allow non key fields to be included in the index non key fields are not themselves part of the index ordering but only included at the leaf level allowing for a covering index with less overall index size edit standardization there is no standard about creating indexes because the iso sql standard does not cover physical aspects indexes are one of the physical parts of database conception among others like storage tablespace or filegroups rdbms vendors all give a create index syntax with some specific options which depends on functionalities they provide to customers edit see also index locking index search engine edit references postgresql 9 1 2 documentation create table overview of clusters oracle database concepts 10g release 1 10 1 database systems the complete book hector garcia molina jeffrey d ullman jennifer d widom gavin powell 2005 12 chapter 12 building fast performing data models beginning database design isbn 978 0 7645 7490 0 wrox publishing http searchsecurity techtarget com generic 0 295582 sid87 gci1184450 00 html clustered index structures sql server 2005 books online september 2007 http msdn2 microsoft com en us library ms177443 aspx daren bieniek randy dess mike hotek javier loria adam machanic antonio soto adolfo wiernik 2006 01 chapter 4 creating indices sql server 2005 implementation and management microsoft press http www microsoft com mspress books 9364 aspx v t e database management systems database models database normalization database storage distributed dbms federated database system referential integrity relational algebra relational calculus relational database relational dbms relational model object relational database transaction processing concepts database acid crud null candidate key foreign key primary key superkey surrogate key armstrong s axioms objects relation table column row view transaction log trigger index stored procedure cursor partition components concurrency control data dictionary jdbc xqj odbc query language query optimizer query plan functions administration and automation query optimization replication database products object oriented comparison relational comparison document oriented nosql newsql 