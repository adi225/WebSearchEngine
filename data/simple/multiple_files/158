a hash table in computer science a data structure is a particular way of storing and organizing data in a computer so that it can be used efficiently 1 2 different kinds of data structures are suited to different kinds of applications and some are highly specialized to specific tasks for example b trees are particularly well suited for implementation of databases while compiler implementations usually use hash tables to look up identifiers data structures provide a means to manage huge amounts of data efficiently such as large databases and internet indexing services usually efficient data structures are a key to designing efficient algorithms some formal design methods and programming languages emphasize data structures rather than algorithms as the key organizing factor in software design storing and retrieving can be carried out on data stored in both main memory and in secondary memory various data structures are available that are needed to be employed based on the need contents 1 overview 2 basic principles 3 language support 4 see also 5 references 6 further reading 7 external links edit overview an array data structure stores a number of elements in a specific order they are accessed using an integer to specify which element is required although the elements may be of almost any type arrays may be fixed length or expandable record also called tuple or struct records are among the simplest data structures a record is a value that contains other values typically in fixed number and sequence and typically indexed by names the elements of records are usually called fields or members a hash or dictionary or map is a more flexible variation on a record in which name value pairs can be added and deleted freely union a union type definition will specify which of a number of permitted primitive types may be stored in its instances e g float or long integer contrast with a record which could be defined to contain a float and an integer whereas in a union there is only one value at a time a tagged union also called a variant variant record discriminated union or disjoint union contains an additional field indicating its current type for enhanced type safety a set is an abstract data structure that can store specific values without any particular order and no repeated values values themselves are not retrieved from sets rather one tests a value for membership to obtain a boolean in or not in an object contains a number of data fields like a record and also a number of program code fragments for accessing or modifying them data structures not containing code like those above are called plain old data structure many others are possible but they tend to be further variations and compounds of the above edit basic principles data structures are generally based on the ability of a computer to fetch and store data at any place in its memory specified by an address a bit string that can be itself stored in memory and manipulated by the program thus the record and array data structures are based on computing the addresses of data items with arithmetic operations while the linked data structures are based on storing addresses of data items within the structure itself many data structures use both principles sometimes combined in non trivial ways as in xor linking the implementation of a data structure usually requires writing a set of procedures that create and manipulate instances of that structure the efficiency of a data structure cannot be analyzed separately from those operations this observation motivates the theoretical concept of an abstract data type a data structure that is defined indirectly by the operations that may be performed on it and the mathematical properties of those operations including their space and time cost edit language support most assembly languages and some low level languages such as bcpl basic combined programming language lack support for data structures many high level programming languages and some higher level assembly languages such as masm on the other hand have special syntax or other built in support for certain data structures such as vectors one dimensional arrays in the c language or multi dimensional arrays in pascal most programming languages feature some sort of library mechanism that allows data structure implementations to be reused by different programs modern languages usually come with standard libraries that implement the most common data structures examples are the c standard template library the java collections framework and microsoft s net framework modern languages also generally support modular programming the separation between the interface of a library module and its implementation some provide opaque data types that allow clients to hide implementation details object oriented programming languages such as c java and net framework may use classes for this purpose many known data structures have concurrent versions that allow multiple computing threads to access the data structure simultaneously edit see also book data structures list of data structures plain old data structure concurrent data structure data model dynamization linked data structure persistent data structure edit references paul e black ed entry for data structure in dictionary of algorithms and data structures u s national institute of standards and technology 15 december 2004 online version accessed may 21 2009 entry data structure in the encyclop dia britannica 2009 online entry accessed on may 21 2009 edit further reading peter brass advanced data structures cambridge university press 2008 donald knuth the art of computer programming vol 1 addison wesley 3rd edition 1997 dinesh mehta and sartaj sahni handbook of data structures and applications chapman and hall crc press 2007 niklaus wirth algorithms and data structures prentice hall 1985 edit external links find more about data structure at wikipedia s sister projects definitions and translations from wiktionary media from commons learning resources from wikiversity quotations from wikiquote source texts from wikisource textbooks from wikibooks uc berkeley video course on data structures descriptions from the dictionary of algorithms and data structures cse unr edu data structures course data structure tutorials with animations an examination of data structures from net perspective schaffer c data structures and algorithm analysis v t e data structures types collection container abstract list associative array multimap set multiset queue double ended queue priority queue double ended priority queue stack arrays dynamic array hashed array tree sparse array circular buffer bit array hash table linked linked list unrolled linked list xor linked list skip list association list trees b tree binary search tree self balancing aa avl red black splay heap binary binomial fibonacci r tree r r hilbert trie graphs directed acyclic word graph binary decision diagram list of data structures v t e data types uninterpreted bit byte trit tryte word numeric integer signedness fixed point floating point rational complex bignum interval decimal text character string null terminated pointer address physical virtual reference composite algebraic data type generalized array associative array class list object metaobject option type product record set union tagged other boolean bottom type collection enumerated type exception function type opaque data type recursive data type semaphore stream top type type class unit type void related topics type system abstract data type data structure protocol interface kind metaclass primitive data type subtyping generic type constructor type conversion parametric polymorphism v t e data model main role history architecture modeling properties organization structure theory patterns schemas conceptual logical physical types database data structure diagram dsd entity relationship erm and enhanced notation eerm geographic generic semantic related models data flow diagram dfd information model object model object role model orm unified modeling language models uml see also database design business process model core architecture data model enterprise model function model process model xml schema data format description language dfdl 