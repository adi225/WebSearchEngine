this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed september 2007 in theoretical computer science and mathematics the theory of computation is the branch that deals with whether and how efficiently problems can be solved on a model of computation using an algorithm the field is divided into three major branches automata theory computability theory and computational complexity theory 1 in order to perform a rigorous study of computation computer scientists work with a mathematical abstraction of computers called a model of computation there are several models in use but the most commonly examined is the turing machine computer scientists study the turing machine because it is simple to formulate can be analyzed and used to prove results and because it represents what many consider the most powerful possible reasonable model of computation see church turing thesis it might seem that the potentially infinite memory capacity is an unrealizable attribute but any decidable problem solved by a turing machine will always require only a finite amount of memory so in principle any problem that can be solved decided by a turing machine can be solved by a computer that has a bounded amount of memory relationship between computability theory complexity theory and formal language theory contents 1 history 2 branches 2 1 automata theory 2 2 computability theory 2 3 computational complexity theory 3 models of computation 4 references 5 further reading 6 external links edit history main article history of theory of computation the theory of computation can be considered the creation of models of all kinds in the field of computer science therefore mathematics and logic are used in the last century it became an independent academic discipline and was separated from mathematics some pioneers of the theory of computation were alonzo church alan turing stephen kleene john von neumann and claude shannon edit branches edit automata theory main article automata theory automata theory is the study of abstract machines or more appropriately abstract mathematical machines or systems and the computational problems that can be solved using these machines these abstract machines are called automata automata comes from the greek word which means that something is doing something by itself automata theory is also closely related to formal language theory as the automata are often classified by the class of formal languages they are able to recognize an automaton can be a finite representation of a formal language that may be an infinite set edit computability theory main article computability theory computability theory deals primarily with the question of the extent to which a problem is solvable on a computer the statement that the halting problem cannot be solved by a turing machine is one of the most important results in computability theory as it is an example of a concrete problem that is both easy to formulate and impossible to solve using a turing machine much of computability theory builds on the halting problem result another important step in computability theory was rice s theorem which states that for all non trivial properties of partial functions it is undecidable whether a turing machine computes a partial function with that property computability theory is closely related to the branch of mathematical logic called recursion theory which removes the restriction of studying only models of computation which are reducible to the turing model many mathematicians and computational theorists who study recursion theory will refer to it as computability theory edit computational complexity theory main article computational complexity theory complexity theory considers not only whether a problem can be solved at all on a computer but also how efficiently the problem can be solved two major aspects are considered time complexity and space complexity which are respectively how many steps does it take to perform a computation and how much memory is required to perform that computation in order to analyze how much time and space a given algorithm requires computer scientists express the time or space required to solve the problem as a function of the size of the input problem for example finding a particular number in a long list of numbers becomes harder as the list of numbers grows larger if we say there are n numbers in the list then if the list is not sorted or indexed in any way we may have to look at every number in order to find the number we re seeking we thus say that in order to solve this problem the computer needs to perform a number of steps that grows linearly in the size of the problem to simplify this problem computer scientists have adopted big o notation which allows functions to be compared in a way that ensures that particular aspects of a machine s construction do not need to be considered but rather only the asymptotic behavior as problems become large so in our previous example we might say that the problem requires steps to solve perhaps the most important open problem in all of computer science is the question of whether a certain broad class of problems denoted np can be solved efficiently this is discussed further at complexity classes p and np edit models of computation main article model of computation aside from a turing machine other equivalent see church turing thesis models of computation are in use lambda calculus a computation consists of an initial lambda expression or two if you want to separate the function and its input plus a finite sequence of lambda terms each deduced from the preceding term by one application of beta reduction combinatory logic is a concept which has many similarities to calculus but also important differences exist e g fixed point combinator y has normal form in combinatory logic but not in calculus combinatory logic was developed with great ambitions understanding the nature of paradoxes making foundations of mathematics more economic conceptually eliminating the notion of variables thus clarifying their role in mathematics mu recursive functions a computation consists of a mu recursive function i e its defining sequence any input value s and a sequence of recursive functions appearing in the defining sequence with inputs and outputs thus if in the defining sequence of a recursive function the functions and appear then terms of the form g 5 7 or h 3 2 10 might appear each entry in this sequence needs to be an application of a basic function or follow from the entries above by using composition primitive recursion or mu recursion for instance if then for f 5 3 to appear terms like g 5 6 and h 5 6 3 must occur above the computation terminates only if the final term gives the value of the recursive function applied to the inputs markov algorithm a string rewriting system that uses grammar like rules to operate on strings of symbols register machine is a theoretically interesting idealization of a computer there are several variants in most of them each register can hold a natural number of unlimited size and the instructions are simple and few in number e g only decrementation combined with conditional jump and incrementation exist and halting the lack of the infinite or dynamically growing external store seen at turing machines can be understood by replacing its role with g del numbering techniques the fact that each register holds a natural number allows the possibility of representing a complicated thing e g a sequence or a matrix etc by an appropriate huge natural number unambiguity of both representation and interpretation can be established by number theoretical foundations of these techniques p like turing machines p uses an infinite tape of symbols without random access and a rather minimalistic set of instructions but these instructions are very different thus unlike turing machines p does not need to maintain a distinct state because all memory like functionality can be provided only by the tape instead of rewriting the current symbol it can perform a modular arithmetic incrementation on it p has also a pair of instructions for a cycle inspecting the blank symbol despite its minimalistic nature it has become the parental formal language of an implemented and for entertainment used programming language called brainfuck in addition to the general computational models some simpler computational models are useful for special restricted applications regular expressions for example specify string patterns in many contexts from office productivity software to programming languages another formalism mathematically equivalent to regular expressions finite automata are used in circuit design and in some kinds of problem solving context free grammars specify programming language syntax non deterministic pushdown automata are another formalism equivalent to context free grammars primitive recursive functions are a defined subclass of the recursive functions different models of computation have the ability to do different tasks one way to measure the power of a computational model is to study the class of formal languages that the model can generate in such a way to the chomsky hierarchy of languages is obtained edit references sipser edit further reading textbooks aimed at computer scientists there are many textbooks in this area this list is by necessity incomplete hopcroft john e and jeffrey d ullman 2006 introduction to automata theory languages and computation 3rd ed reading ma addison wesley isbn 978 0 321 45536 9 one of the standard references in the field michael sipser 2006 introduction to the theory of computation 2ed pws publishing isbn 160 0 534 95097 3 eitan gurari 1989 an introduction to the theory of computation computer science press isbn 160 0 7167 8182 4 http www cse ohio state edu gurari theory bk theory bk html hein james l 1996 theory of computation sudbury ma jones amp bartlett isbn 978 0 86720 497 1 a gentle introduction to the field appropriate for second year undergraduate computer science students taylor r gregory 1998 models of computation and formal languages new york oxford university press isbn 978 0 19 510983 2 an unusually readable textbook appropriate for upper level undergraduates or beginning graduate students lewis f d 2007 essentials of theoretical computer science a textbook covering the topics of formal languages automata and grammars the emphasis appears to be on presenting an overview of the results and their applications rather than providing proofs of the results martin davis ron sigal elaine j weyuker computability complexity and languages fundamentals of theoretical computer science 2nd ed academic press 1994 isbn 0 12 206382 1 covers a wider range of topics than most other introductory books including program semantics and quantification theory aimed at graduate students books on computability theory from the wider mathematical perspective hartley rogers jr 1987 theory of recursive functions and effective computability mit press isbn 0 262 68052 1 s barry cooper 2004 computability theory chapman and hall crc isbn 160 1 58488 237 9 carl h smith a recursive introduction to the theory of computation springer 1994 isbn 0 387 94332 3 a shorter textbook suitable for graduate students in computer science historical perspective richard l epstein and walter a carnielli 2000 computability computable functions logic and the foundations of mathematics with computability a timeline 2nd ed wadsworth thomson learning isbn 160 0 534 54644 7 edit external links computability logic a theory of interactive computation the main web source on this subject v t e areas of mathematics areas arithmetic algebra elementary linear multilinear abstract geometry discrete algebraic differential finite calculus analysis set theory logic category theory number theory combinatorics graph theory topology lie theory differential equations dynamical systems mathematical physics numerical analysis computation information theory probability mathematical statistics mathematical optimization control theory game theory divisions pure mathematics applied mathematics discrete mathematics computational mathematics category mathematics portal outline lists 