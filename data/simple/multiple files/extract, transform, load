this article includes a list of references but its sources remain unclear because it has insufficient inline citations please help to improve this article by introducing more precise citations november 2011 this article may contain original research please improve it by verifying the claims made and adding references statements consisting only of original research may be removed december 2011 in computing extract transform and load etl refers to a process in database usage and especially in data warehousing that involves extracting data from outside sources transforming it to fit operational needs which can include quality levels loading it into the end target database more specifically operational data store data mart or data warehouse contents 1 extract 2 transform 3 load 4 real life etl cycle 5 challenges 6 performance 7 parallel processing 8 rerunnability recoverability 9 virtual etl 10 dealing with keys 11 tools 12 see also 13 references edit extract the first part of an etl process involves extracting the data from the source systems in many cases this is the most challenging aspect of etl since extracting data correctly sets the stage for how subsequent processes go further etl architecture pattern most data warehousing projects consolidate data from different source systems each separate system may also use a different data organization format common data source formats are relational databases and flat files but may include non relational database structures such as information management system ims or other data structures such as virtual storage access method vsam or indexed sequential access method isam or even fetching from outside sources such as through web spidering or screen scraping the streaming of the extracted data source and load on the fly to the destination database is another way of performing etl when no intermediate data storage is required in general the goal of the extraction phase is to convert the data into a single format which is appropriate for transformation processing an intrinsic part of the extraction involves the parsing of extracted data resulting in a check if the data meets an expected pattern or structure if not the data may be rejected entirely or in part edit transform the transform stage applies a series of rules or functions to the extracted data from the source to derive the data for loading into the end target some data sources will require very little or even no manipulation of data in other cases one or more of the following transformation types may be required to meet the business and technical needs of the target database selecting only certain columns to load or selecting null columns not to load for example if the source data has three columns also called attributes for example roll no age and salary then the extraction may take only roll no and salary similarly the extraction mechanism may ignore all those records where salary is not present salary null translating coded values e g if the source system stores 1 for male and 2 for female but the warehouse stores m for male and f for female encoding free form values e g mapping male to 1 deriving a new calculated value e g sale amount qty unit price sorting joining data from multiple sources e g lookup merge and deduplicating the data aggregation for example rollup summarizing multiple rows of data total sales for each store and for each region etc generating surrogate key values transposing or pivoting turning multiple columns into multiple rows or vice versa splitting a column into multiple columns e g converting a comma separated list specified as a string in one column into individual values in different columns disaggregation of repeating columns into a separate detail table e g moving a series of addresses in one record into single addresses in a set of records in a linked address table lookup and validate the relevant data from tables or referential files for slowly changing dimensions applying any form of simple or complex data validation if validation fails it may result in a full partial or no rejection of the data and thus none some or all the data is handed over to the next step depending on the rule design and exception handling many of the above transformations may result in exceptions for example when a code translation parses an unknown code in the extracted data edit load the load phase loads the data into the end target usually the data warehouse dw depending on the requirements of the organization this process varies widely some data warehouses may overwrite existing information with cumulative information frequently updating extract data is done on daily weekly or monthly basis other dw or even other parts of the same dw may add new data in a historical form for example hourly to understand this consider a dw that is required to maintain sales records of the last year then the dw will overwrite any data that is older than a year with newer data however the entry of data for any one year window will be made in a historical manner the timing and scope to replace or append are strategic design choices dependent on the time available and the business needs more complex systems can maintain a history and audit trail of all changes to the data loaded in the dw as the load phase interacts with a database the constraints defined in the database schema as well as in triggers activated upon data load apply for example uniqueness referential integrity mandatory fields which also contribute to the overall data quality performance of the etl process for example a financial institution might have information on a customer in several departments and each department might have that customer s information listed in a different way the membership department might list the customer by name whereas the accounting department might list the customer by number etl can bundle all this data and consolidate it into a uniform presentation such as for storing in a database or data warehouse another way that companies use etl is to move information to another application permanently for instance the new application might use another database vendor and most likely a very different database schema etl can be used to transform the data into a format suitable for the new application to use an example of this would be an expense and cost recovery system ecrs such as used by accountancies consultancies and lawyers the data usually ends up in the time and billing system although some businesses may also utilize the raw data for employee productivity reports to human resources personnel dept or equipment usage reports to facilities management edit real life etl cycle the typical real life etl cycle consists of the following execution steps cycle initiation build reference data extract from sources validate transform clean apply business rules check for data integrity create aggregates or disaggregates stage load into staging tables if used audit reports for example on compliance with business rules also in case of failure helps to diagnose repair publish to target tables archive clean up edit challenges etl processes can involve considerable complexity and significant operational problems can occur with improperly designed etl systems the range of data values or data quality in an operational system may exceed the expectations of designers at the time validation and transformation rules are specified data profiling of a source during data analysis can identify the data conditions that will need to be managed by transform rules specifications this will lead to an amendment of validation rules explicitly and implicitly implemented in the etl process data warehouses are typically assembled from a variety of data sources with different formats and purposes as such etl is a key process to bring all the data together in a standard homogeneous environment design analysts should establish the scalability of an etl system across the lifetime of its usage this includes understanding the volumes of data that will have to be processed within service level agreements the time available to extract from source systems may change which may mean the same amount of data may have to be processed in less time some etl systems have to scale to process terabytes of data to update data warehouses with tens of terabytes of data increasing volumes of data may require designs that can scale from daily batch to multiple day microbatch to integration with message queues or real time change data capture for continuous transformation and update edit performance etl vendors benchmark their record systems at multiple tb terabytes per hour or 1 gb per second using powerful servers with multiple cpus multiple hard drives multiple gigabit network connections and lots of memory the fastest etl record is currently held by syncsort 1 vertica and hp at 5 4tb in under an hour which is more than twice as fast as the earlier record held by microsoft and unisys in real life the slowest part of an etl process usually occurs in the database load phase databases may perform slowly because they have to take care of concurrency integrity maintenance and indices thus for better performance it may make sense to employ direct path extract method or bulk unload whenever is possible instead of querying the database to reduce the load on source system while getting high speed extract most of the transformation processing outside of the database bulk load operations whenever possible still even using bulk operations database access is usually the bottleneck in the etl process some common methods used to increase performance are partition tables and indices try to keep partitions similar in size watch for null values which can skew the partitioning do all validation in the etl layer before the load disable integrity checking disable constraint in the target database tables during the load disable triggers disable trigger in the target database tables during the load simulate their effect as a separate step generate ids in the etl layer not in the database drop the indices on a table or partition before the load and recreate them after the load sql drop index create index use parallel bulk load when possible works well when the table is partitioned or there are no indices note attempt to do parallel loads into the same table partition usually causes locks if not on the data rows then on indices if a requirement exists to do insertions updates or deletions find out which rows should be processed in which way in the etl layer and then process these three operations in the database separately you often can do bulk load for inserts but updates and deletes commonly go through an api using sql whether to do certain operations in the database or outside may involve a trade off for example removing duplicates using distinct may be slow in the database thus it makes sense to do it outside on the other side if using distinct will significantly x100 decrease the number of rows to be extracted then it makes sense to remove duplications as early as possible in the database before unloading data a common source of problems in etl is a big number of dependencies among etl jobs for example job b cannot start while job a is not finished you can usually achieve better performance by visualizing all processes on a graph and trying to reduce the graph making maximum use of parallelism and making chains of consecutive processing as short as possible again partitioning of big tables and of their indices can really help another common issue occurs when the data is spread between several databases and processing is done in those databases sequentially sometimes database replication may be involved as a method of copying data between databases and this can significantly slow down the whole process the common solution is to reduce the processing graph to only three layers sources central etl layer targets this allows processing to take maximum advantage of parallel processing for example if you need to load data into two databases you can run the loads in parallel instead of loading into 1st and then replicating into the 2nd of course sometimes processing must take place sequentially for example you usually need to get dimensional reference data before you can get and validate the rows for main fact tables edit parallel processing a recent update development in etl software is the implementation of parallel processing this has enabled a number of methods to improve overall performance of etl processes when dealing with large volumes of data etl applications implement three main types of parallelism data by splitting a single sequential file into smaller data files to provide parallel access pipeline allowing the simultaneous running of several components on the same data stream for example looking up a value on record 1 at the same time as adding two fields on record 2 component the simultaneous running of multiple processes on different data streams in the same job for example sorting one input file while removing duplicates on another file all three types of parallelism usually operate combined in a single job an additional difficulty comes with making sure that the data being uploaded is relatively consistent because multiple source databases may have different update cycles some may be updated every few minutes while others may take days or weeks an etl system may be required to hold back certain data until all sources are synchronized likewise where a warehouse may have to be reconciled to the contents in a source system or with the general ledger establishing synchronization and reconciliation points becomes necessary edit rerunnability recoverability data warehousing procedures usually subdivide a big etl process into smaller pieces running sequentially or in parallel to keep track of data flows it makes sense to tag each data row with row id and tag each piece of the process with run id in case of a failure having these ids will help to roll back and rerun the failed piece best practice also calls for checkpoints which are states when certain phases of the process are completed once at a checkpoint it is a good idea to write everything to disk clean out some temporary files log the state and so on edit virtual etl as of 2010 update data virtualization had begun to advance etl processing the application of data virtualization to etl allowed solving the most common etl tasks of data migration and application integration for multiple dispersed data sources so called virtual etl operates with the abstracted representation of the objects or entities gathered from the variety of relational semi structured and unstructured data sources etl tools can leverage object oriented modeling and work with entities representations persistently stored in a centrally located hub and spoke architecture such a collection that contains representations of the entities or objects gathered from the data sources for etl processing is called a metadata repository and it can reside in memory 2 or be made persistent by using a persistent metadata repository etl tools can transition from one time projects to persistent middleware performing data harmonization and data profiling consistently and in near real time citation needed edit dealing with keys keys are some of the most important objects in all relational databases as they tie everything together a primary key is a column which is the identifier for a given entity where a foreign key is a column in another table which refers a primary key these keys can also be made up from several columns in which case they are composite keys in many cases the primary key is an auto generated integer which has no meaning for the business entity being represented but solely exists for the purpose of the relational database commonly referred to as a surrogate key as there will usually be more than one datasource being loaded into the warehouse the keys are an important concern to be addressed your customers might be represented in several data sources and in one their ssn social security number might be the primary key their phone number in another and a surrogate in the third all of the customers information needs to be consolidated into one dimension table a recommended way to deal with the concern is to add a warehouse surrogate key which will be used as foreign key from the fact table 3 usually updates will occur to a dimension s source data which obviously must be reflected in the data warehouse if the primary key of the source data is required for reporting the dimension already contains that piece of information for each row if the source data uses a surrogate key the ware house must keep track of it even though it is never used in queries or reports that is done by creating a lookup table which contains the warehouse surrogate key and the originating key 4 this way the dimension is not polluted with surrogates from various source systems while the ability to update is preserved the lookup table is used in different ways depending on the nature of the source data there are 5 types to consider 5 where three selected ones are included here type 1 the dimension row is simply updated to match the current state of the source system the warehouse does not capture history the lookup table is used to identify which dimension row to update overwrite type 2 a new dimension row is added with the new state of the source system a new surrogate key is assigned source key is no longer unique in the lookup table fully logged a new dimension row is added with the new state of the source system while the previous dimension row is updated to reflect it is no longer active and record time of deactivation edit tools programmers can set up etl processes using almost any programming language but building such processes from scratch can become complex increasingly companies are buying etl tools to help in the creation of etl processes 6 by using an established etl framework one may increase one s chances of ending up with better connectivity and scalability citation needed a good etl tool must be able to communicate with the many different relational databases and read the various file formats used throughout an organization etl tools have started to migrate into enterprise application integration or even enterprise service bus systems that now cover much more than just the extraction transformation and loading of data many etl vendors now have data profiling data quality and metadata capabilities a common use case for etl tools include converting csv files to formats readable by relational databases a typical translation of millions of records is facilitated by etl tools that enable users to input csv like data feeds files and import it into a database with as little code as possible etl tools are typically used by a broad range of professionals from students in computer science looking to quickly import large data sets to database architects in charge of company account management etl tools have become a convenient tool that can be relied on to get maximum performance etl tools in most cases contain a gui that helps users conveniently transform data as opposed to writing large programs to parse files and modify data types which etl tools facilitate as much as possible citation needed edit see also architecture patterns ea reference architecture data cleansing data integration data mart data mediation data migration electronic data interchange edi enterprise architecture expense and cost recovery system ecrs legal electronic data exchange standard ledes metadata discovery online analytical processing spatial etl edit references new etl world record 5 4 tb loaded in under 1 hour syncsort virtual etl kimball the data warehouse lifecycle toolkit p 332 golfarelli rizzi data warehouse design p 291 golfarelli rizzi data warehouse design p 291 etl poll produces unexpected results v t e data warehouse 160 creating the data warehouse concepts database dimension dimensional modeling fact olap star schema aggregate variants anchor modeling column oriented dbms data vault modeling holap molap rolap operational data store elements data dictionary metadata data mart sixth normal form surrogate key fact fact table early arriving fact measure dimension dimension table degenerate slowly changing filling extract transform load etl extract transform load 160 using the data warehouse concepts business intelligence dashboard data mining decision support system dss olap cube languages data mining extensions dmx multidimensional expressions mdx xml for analysis xmla tools business intelligence tools reporting software spreadsheet 160 related people bill inmon ralph kimball products comparison of olap servers data warehousing products and their producers 