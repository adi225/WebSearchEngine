not to be confused with boolean ring this article is about the calculus of truth values for the algebraic structures see boolean algebra structure boolean algebra as developed in 1854 by george boole in his book an investigation of the laws of thought 1 is a variant of ordinary elementary algebra differing in its values operations and laws instead of the usual algebra of numbers boolean algebra is the algebra of truth values 0 and 1 or equivalently of subsets of a given set the operations are usually taken to be conjunction disjunction and negation with constants 0 and 1 and the laws are definable as those equations that hold for all values of their variables for example x y x x applications include mathematical logic digital logic computer programming set theory and statistics 2 according to huntington the moniker boolean algebra was first suggested by sheffer in 1913 3 boole s algebra predated the modern developments in abstract algebra and mathematical logic it is however seen as connected to the origins of both fields 4 in an abstract setting boolean algebra was perfected in the late 19th century by jevons schr der huntington and others until it reached the modern conception of an abstract mathematical structure 4 for example the empirical observation that one can manipulate expressions in the algebra of sets by translating them into expressions in boole s algebra is explained in modern terms by saying that the algebra of sets is a boolean algebra note the indefinite article in fact m h stone proved in 1936 that every boolean algebra is isomorphic to a field of sets in the 1930s while studying switching circuits claude shannon observed that one could also apply the rules of boole s algebra in this setting and he introduced switching algebra as a way to analyze and design circuits by algebraic means in terms of logic gates shannon already had at his disposal the abstract mathematical apparatus thus he cast his switching algebra as the two element boolean algebra in circuit engineering settings today there is little need to consider other boolean algebras thus switching algebra and boolean algebra are often used interchangeably 5 6 7 efficient implementation of boolean functions is a fundamental problem in the design of combinatorial logic circuits modern electronic design automation tools for vlsi circuits often rely on an efficient representation of boolean functions known as reduced ordered binary decision diagrams bdd for logic synthesis and formal verification 8 logic sentences that can be expressed in classical propositional calculus have an equivalent expression in boolean algebra thus boolean logic is sometimes used to denote propositional calculus performed in this way 9 10 11 boolean algebra is not sufficient to capture logic formulas using quantifiers like those from first order logic although the development of mathematical logic did not follow boole s program the connection between his algebra and logic was later put on firm ground in the setting of algebraic logic which also studies the algebraic systems of many other logics 4 the problem of determining whether the variables of a given boolean propositional formula can be assigned in such a way as to make the formula evaluate to true is called the boolean satisfiability problem sat and is of importance to theoretical computer science being the first problem shown to be np complete the closely related model of computation known as a boolean circuit relates time complexity of an algorithm to circuit complexity contents 1 values 2 operations 2 1 basic operations 2 2 derived operations 3 laws 3 1 monotone laws 3 2 nonmonotone laws 3 3 completeness 3 4 duality principle 4 diagrammatic representations 4 1 venn diagrams 4 2 digital logic gates 5 boolean algebras 5 1 concrete boolean algebras 5 2 subsets as bit vectors 5 3 the prototypical boolean algebra 5 4 boolean algebras the definition 5 5 representable boolean algebras 6 axiomatizing boolean algebra 7 propositional logic 7 1 applications 7 2 deductive systems for propositional logic 7 2 1 sequent calculus 8 applications 8 1 two valued logic 8 2 boolean operations 8 2 1 boolean searches 9 history 10 see also 11 references 12 further reading 13 external links edit values whereas elementary algebra deals mainly with real numbers boolean algebra deals with the values 0 and 1 these can be thought of as two integers or as the truth values false and true respectively in either case they are called bits or binary digits in contrast to the decimal digits 0 through 9 boolean algebra also deals with other values on which boolean operations can be defined such as sets or sequences of bits however boolean algebra is unlike many other systems of algebra in that it obeys exactly the same laws equational properties neither more nor fewer no matter which of these other values are employed much of the subject can therefore be introduced without reference to any values besides 0 and 1 12 other values are treated in the section on boolean algebras edit operations edit basic operations some operations of ordinary algebra in particular multiplication xy addition x 160 160 y and negation x have their counterparts in boolean algebra respectively the boolean operations and or and not also called conjunction x y or k xy disjunction x y or a xy and negation or complement x n x or sometimes 160 x some authors use instead the same arithmetic operations as ordinary algebra reinterpreted for boolean algebra treating xy as synonymous with x y and x y with x y conjunction x y behaves on 0 and 1 exactly as multiplication does for ordinary algebra if either x or y is 0 then x y is 0 but if both are 1 then x y is 1 disjunction x y works almost like addition with 0 0 0 and 1 0 1 and 0 1 1 however there is a difference 1 1 is not 2 but 1 complement resembles ordinary negation in that it exchanges values but whereas in ordinary algebra negation interchanges 1 and 1 2 and 2 etc while leaving 0 fixed in boolean algebra complement interchanges 0 and 1 one can think of ordinary negation as reflecting about 0 and boolean complement as reflecting about the midpoint of 0 and 1 complement can be defined arithmetically as x 1 x because the latter maps 0 to 1 and vice versa the behavior of x in summary the three basic boolean operations can be defined arithmetically as follows x y xy x y x y xy x 1 x alternatively the values of x y x y and x can be expressed without reference to arithmetic operations by tabulating their values with truth tables as follows figure 1 truth tables x y x y x y 0 0 0 0 1 0 0 1 0 1 0 1 1 1 1 1 x x 0 1 1 0 for the two binary operations and the truth tables list all four possible combinations of values for x and y one per line for each combination the truth tables tabulate the values of x y and x y the truth values of x are tabulated similarly except that only two lines are needed because there is only one variable yet another way of specifying these operations is with equations explicitly giving their values 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 0 edit derived operations we have so far seen three boolean operations we referred to these as basic meaning that they can be taken as a basis for other boolean operations that can be built up from them by composition the manner in which operations are combined or compounded here are some examples of operations composed from the basic operations x 160 160 y x 160 160 y x 160 160 y x 160 160 y 160 160 x 160 160 y x 160 160 y x 160 160 y these definitions give rise to the following truth tables giving the values of these operations for all four possible inputs x y x 160 160 y x 160 160 y x 160 160 y 0 0 1 0 1 1 0 0 1 0 0 1 1 1 0 1 1 1 0 1 the first operation x 160 160 y or c xy is called material implication if x is true then the value of x 160 160 y is taken to be that of y but if x is false then we ignore the value of y however we must return some truth value and there are only two choices so we choose the value that entails less namely true relevance logic addresses this by viewing an implication with a false premise as something other than either true or false the second operation x 160 160 y or j xy is called exclusive or to distinguish it from disjunction as the inclusive kind it excludes the possibility of both x and y defined in terms of arithmetic it is addition mod 160 2 where 1 160 160 1 160 0 the third operation the complement of exclusive or is equivalence or boolean equality x 160 160 y or e xy is true just when x and y have the same value hence x 160 160 y as its complement can be understood as x 160 160 y being true just when x and y are different its counterpart in arithmetic mod 2 is x y 1 edit laws a law of boolean algebra is an equation such as x y z x y z between two boolean terms where a boolean term is defined as an expression built up from variables and the constants 0 and 1 using the operations and the concept can be extended to terms involving other boolean operations such as and but such extensions are unnecessary for the purposes to which the laws are put such purposes include the definition of a boolean algebra as any model of the boolean laws and as a means for deriving new laws from old as in the derivation of x y z x z y from y z z y as treated in the section on axiomatization edit monotone laws boolean algebra satisfies many of the same laws as ordinary algebra when we match up with addition and with multiplication in particular the following laws are common to both kinds of algebra 13 associativity of x y z x y z associativity of x y z x y z commutativity of x y y x commutativity of x y y x distributivity of over x y z x y x z identity for x 0 x identity for x 1 x annihilator for x 0 0 boolean algebra however obeys some additional laws in particular the following 13 idempotence of x x x idempotence of x x x absorption 1 x x y x absorption 2 x x y x distributivity of over x y z x y x z annihilator for x 1 1 a consequence of the first of these laws is 1 1 1 which is false in ordinary algebra where 1 1 2 taking x 2 in the second law shows that it is not an ordinary algebra law either since 2 2 4 the remaining four laws can be falsified in ordinary algebra by taking all variables to be 1 for example in absorption law 1 the left hand side is 1 1 1 2 while the right hand side is 1 and so on all of the laws treated so far have been for conjunction and disjunction these operations have the property that changing either argument either leaves the output unchanged or the output changes in the same way as the input equivalently changing any variable from 0 to 1 never results in the output changing from 1 to 0 operations with this property are said to be monotone thus the axioms so far have all been for monotonic boolean logic nonmonotonicity enters via complement as follows 2 edit nonmonotone laws the complement operation is defined by the following two laws complementation 1 160 160 160 160 160 160 x x 0 160 160 160 160 160 160 160 160 160 complementation 2 x x 1 all properties of negation including the laws below follow from the above two laws alone 2 in both ordinary and boolean algebra negation works by exchanging pairs of elements whence in both algebras it satisfies the double negation law also called involution law double negation 160 160 160 160 160 x x 160 160 160 160 160 160 160 but whereas ordinary algebra satisfies the two laws x y xy x y x y boolean algebra satisfies de morgan s laws de morgan 1 x y x y de morgan 2 x y x y edit completeness at this point we can now claim to have defined boolean algebra in the sense that the laws we have listed up to now entail the rest of the subject the laws complementation 1 and 2 together with the monotone laws suffice for this purpose and can therefore be taken as one possible complete set of laws or axiomatization of boolean algebra every law of boolean algebra follows logically from these axioms furthermore boolean algebras can then be defined as the models of these axioms as treated in the section thereon to clarify writing down further laws of boolean algebra cannot give rise to any new consequences of these axioms nor can it rule out any model of them had we stopped listing laws too soon there would have been boolean laws that did not follow from those on our list and moreover there would have been models of the listed laws that were not boolean algebras this axiomatization is by no means the only one or even necessarily the most natural given that we did not pay attention to whether some of the axioms followed from others but simply chose to stop when we noticed we had enough laws treated further in the section on axiomatizations or the intermediate notion of axiom can be sidestepped altogether by defining a boolean law directly as any tautology understood as an equation that holds for all values of its variables over 0 and 1 all these definitions of boolean algebra can be shown to be equivalent boolean algebra has the interesting property that x y can be proved from any non tautology this is because the substitution instance of any non tautology obtained by instantiating its variables with constants 0 or 1 so as to witness its non tautologyhood reduces by equational reasoning to 0 1 for example the non tautologyhood of x y x is witnessed by x 1 and y 0 and so taking this as an axiom would allow us to infer 1 0 1 as a substitution instance of the axiom and hence 0 1 we can then show x y by the reasoning x x 1 x 0 0 1 y 1 y 0 y edit duality principle there is nothing magical about the choice of symbols for the values of boolean algebra we could rename 0 and 1 to say and and as long as we did so consistently throughout it would still be boolean algebra albeit with some obvious cosmetic differences but suppose we rename 0 and 1 to 1 and 0 respectively then it would still be boolean algebra and moreover operating on the same values however it would not be identical to our original boolean algebra because now we find behaving the way used to do and vice versa so there are still some cosmetic differences to show that we ve been fiddling with the notation despite the fact that we re still using 0s and 1s but if in addition to interchanging the names of the values we also interchange the names of the two binary operations now there is no trace of what we have done the end product is completely indistinguishable from what we started with we might notice that the columns for x y and x y in the truth tables had changed places but that switch is immaterial when values and operations can be paired up in a way that leaves everything important unchanged when all pairs are switched simultaneously we call the members of each pair dual to each other thus 0 and 1 are dual and and are dual the duality principle also called de morgan duality asserts that boolean algebra is unchanged when all dual pairs are interchanged one change we did not need to make as part of this interchange was to complement we say that complement is a self dual operation the identity or do nothing operation x copy the input to the output is also self dual a more complicated example of a self dual operation is x y y z z x it can be shown that self dual operations must take an odd number of arguments thus there can be no self dual binary operation the principle of duality can be explained from a group theory perspective by fact that there are exactly four functions that are one to one mappings automorphisms of the set of boolean polynomials back to itself the identity function the complement function the dual function and the contradual function complemented dual these four functions form a group under function composition isomorphic to the klein four group acting on the set of boolean polynomials 14 edit diagrammatic representations edit venn diagrams a venn diagram 15 is a representation of a boolean operation using shaded overlapping regions there is one region for each variable all circular in the examples here the interior and exterior of region x corresponds respectively to the values 1 true and 0 false for variable x the shading indicates the value of the operation for each combination of regions with dark denoting 1 and light 0 some authors use the opposite convention the three venn diagrams in the figure below represent respectively conjunction x y disjunction x y and complement x figure 2 venn diagrams for conjunction disjunction and complement for conjunction the region inside both circles is shaded to indicate that x y is 1 when both variables are 1 the other regions are left unshaded to indicate that x y is 0 for the other three combinations the second diagram represents disjunction x y by shading those regions that lie inside either or both circles the third diagram represents complement x by shading the region not inside the circle while we have not shown the venn diagrams for the constants 0 and 1 they are trivial being respectively a white box and a dark box neither one containing a circle however we could put a circle for x in those boxes in which case each would denote a function of one argument x which returns the same value independently of x called a constant function as far as their outputs are concerned constants and constant functions are indistinguishable the difference is that a constant takes no arguments called a zeroary or nullary operation while a constant function takes one argument which it ignores and is a unary operation venn diagrams are helpful in visualizing laws the commutativity laws for and can be seen from the symmetry of the diagrams a binary operation that was not commutative would not have a symmetric diagram because interchanging x and y would have the effect of reflecting the diagram horizontally and any failure of commutativity would then appear as a failure of symmetry idempotence of and can be visualized by sliding the two circles together and noting that the shaded area then becomes the whole circle for both and to see the first absorption law x x y x start with the diagram in the middle for x y and note that the portion of the shaded area in common with the x circle is the whole of the x circle for the second absorption law x x y x start with the left diagram for x y and note that shading the whole of the x circle results in just the x circle being shaded since the previous shading was inside the x circle the double negation law can be seen by complementing the shading in the third diagram for x which shades the x circle to visualize the first de morgan s law x y x y start with the middle diagram for x y and complement its shading so that only the region outside both circles is shaded which is what the right hand side of the law describes the result is the same as if we shaded that region which is both outside the x circle and outside the y circle i e the conjunction of their exteriors which is what the left hand side of the law describes the second de morgan s law x y x y works the same way with the two diagrams interchanged the first complement law x x 0 says that the interior and exterior of the x circle have no overlap the second complement law x x 1 says that everything is either inside or outside the x circle edit digital logic gates digital logic is the application of the boolean algebra of 0 and 1 to electronic hardware consisting of logic gates connected to form a circuit diagram each gate implements a boolean operation and is depicted schematically by a shape indicating the operation the shapes associated with the gates for conjunction and gates disjunction or gates and complement inverters are as follows 16 the lines on the left of each gate represent input wires or ports the value of the input is represented by a voltage on the lead for so called active high logic 0 is represented by a voltage close to zero or ground while 1 is represented by a voltage close to the supply voltage active low reverses this the line on the right of each gate represents the output port which normally follows the same voltage conventions as the input ports complement is implemented with an inverter gate the triangle denotes the operation that simply copies the input to the output the small circle on the output denotes the actual inversion complementing the input the convention of putting such a circle on any port means that the signal passing through this port is complemented on the way through whether it is an input or output port there being eight ways of labeling the three ports of an and gate or or gate with inverters this convention gives a wide range of possible boolean operations realized as such gates so decorated not all combinations are distinct however any labeling of and gate ports with inverters realizes the same boolean operation as the opposite labeling of or gate ports a given port of the and gate is labeled with an inverter if and only if the corresponding port of the or gate is not so labeled this follows from de morgan s laws if we complement all ports on every gate and interchange and gates and or gates as in figure 4 below we end up with the same operations as we started with illustrating both de morgan s laws and the duality principle note that we did not need to change the triangle part of the inverter illustrating self duality for complement because of the pairwise identification of gates via the duality principle even though 16 schematic symbols can be manufactured from the two basic binary gates and and or by furnishing their ports with inverters circles they only represent eight boolean operations namely those operations with an odd number of ones in their truth table altogether there are 16 binary boolean operations the other eight being those with an even number of ones in their truth table namely the following the constant 0 viewed as a binary operation that ignores both its inputs has no ones the six operations x y x y as binary operations that ignore one input x y and x y have two ones and the constant 1 has four ones edit boolean algebras main article boolean algebra structure the term algebra denotes both a subject namely the subject of algebra and an object namely an algebraic structure whereas the foregoing has addressed the subject of boolean algebra this section deals with mathematical objects called boolean algebras defined in full generality as any model of the boolean laws we begin with a special case of the notion definable without reference to the laws namely concrete boolean algebras and then give the formal definition of the general notion edit concrete boolean algebras a concrete boolean algebra or field of sets is any nonempty set of subsets of a given set x closed under the set operations of union intersection and complement relative to x 2 as an aside historically x itself was required to be nonempty as well to exclude the degenerate or one element boolean algebra which is the one exception to the rule that all boolean algebras satisfy the same equations since the degenerate algebra satisfies every equation however this exclusion conflicts with the preferred purely equational definition of boolean algebra there being no way to rule out the one element algebra using only equations 160 0 160 160 1 does not count being a negated equation hence modern authors allow the degenerate boolean algebra and let x be empty example 1 the power set 2 x of x consisting of all subsets of x here x may be any set empty finite infinite or even uncountable example 2 the empty set and x this two element algebra shows that a concrete boolean algebra can be finite even when it consists of subsets of an infinite set it can be seen that every field of subsets of x must contain the empty set and x hence no smaller example is possible other than the degenerate algebra obtained by taking x to be empty so as to make the empty set and x coincide example 3 the set of finite and cofinite sets of integers where a cofinite set is one omitting only finitely many integers this is clearly closed under complement and is closed under union because the union of a cofinite set with any set is cofinite while the union of two finite sets is finite intersection behaves like union with finite and cofinite interchanged example 4 for a less trivial example of the point made by example 2 consider a venn diagram formed by n closed curves partitioning the diagram into 2 n regions and let x be the infinite set of all points in the plane not on any curve but somewhere within the diagram the interior of each region is thus an infinite subset of x and every point in x is in exactly one region then the set of all 2 2 n possible unions of regions including the empty set obtained as the union of the empty set of regions and x obtained as the union of all 2 n regions is closed under union intersection and complement relative to x and therefore forms a concrete boolean algebra again we have finitely many subsets of an infinite set forming a concrete boolean algebra with example 2 arising as the case n 0 of no curves edit subsets as bit vectors a subset y of x can be identified with an indexed family of bits with index set x with the bit indexed by x x being 1 or 0 according to whether or not x y this is the so called characteristic function notion of a subset for example a 32 bit computer word consists of 32 bits indexed by the set 0 1 2 31 with 0 and 31 indexing the low and high order bits respectively for a smaller example if x a b c where a b c are viewed as bit positions in that order from left to right the eight subsets c b b c a a c a b and a b c of x can be identified with the respective bit vectors 000 001 010 011 100 101 110 and 111 bit vectors indexed by the set of natural numbers are infinite sequences of bits while those indexed by the reals in the unit interval 0 1 are packed too densely to be able to write conventionally but nonetheless form well defined indexed families imagine coloring every point of the interval 0 1 either black or white independently the black points then form an arbitrary subset of 0 1 from this bit vector viewpoint a concrete boolean algebra can be defined equivalently as a nonempty set of bit vectors all of the same length more generally indexed by the same set and closed under the bit vector operations of bitwise and as in 1010 0110 0010 1010 0110 1110 and 1010 0101 the bit vector realizations of intersection union and complement respectively edit the prototypical boolean algebra main article two element boolean algebra the set 0 1 and its boolean operations as treated above can be understood as the special case of bit vectors of length one which by the identification of bit vectors with subsets can also be understood as the two subsets of a one element set we call this the prototypical boolean algebra justified by the following observation the laws satisfied by all nondegenerate concrete boolean algebras coincide with those satisfied by the prototypical boolean algebra this observation is easily proved as follows certainly any law satisfied by all concrete boolean algebras is satisfied by the prototypical one since it is concrete conversely any law that fails for some concrete boolean algebra must have failed at a particular bit position in which case that position by itself furnishes a one bit counterexample to that law nondegeneracy ensures the existence of at least one bit position because there is only one empty bit vector the final goal of the next section can be understood as eliminating concrete from the above observation we shall however reach that goal via the surprisingly stronger observation that up to isomorphism all boolean algebras are concrete edit boolean algebras the definition the boolean algebras we have seen so far have all been concrete consisting of bit vectors or equivalently of subsets of some set such a boolean algebra consists of a set and operations on that set which can be shown to satisfy the laws of boolean algebra instead of showing that the boolean laws are satisfied we can instead postulate a set x two binary operations on x and one unary operation and require that those operations satisfy the laws of boolean algebra the elements of x need not be bit vectors or subsets but can be anything at all this leads to the more general abstract definition a boolean algebra is any set with binary operations and and a unary operation thereon satisfying the boolean laws 17 for the purposes of this definition it is irrelevant how the operations came to satisfy the laws whether by fiat or proof all concrete boolean algebras satisfy the laws by proof rather than fiat whence every concrete boolean algebra is a boolean algebra according to our definitions this axiomatic definition of a boolean algebra as a set and certain operations satisfying certain laws or axioms is entirely analogous to the abstract definitions of group ring field etc characteristic of modern or abstract algebra given any complete axiomatization of boolean algebra such as the axioms for a complemented distributive lattice a sufficient condition for an algebraic structure of this kind to satisfy all the boolean laws is that it satisfy just those axioms the following is therefore an equivalent definition a boolean algebra is a complemented distributive lattice the section on axiomatization lists other axiomatizations any of which can be made the basis of an equivalent definition edit representable boolean algebras although every concrete boolean algebra is a boolean algebra not every boolean algebra need be concrete let n be a square free positive integer one not divisible by the square of an integer for example 30 but not 12 the operations of greatest common divisor least common multiple and division into n that is x n x can be shown to satisfy all the boolean laws when their arguments range over the positive divisors of n hence those divisors form a boolean algebra these divisors are not subsets of a set making the divisors of n a boolean algebra that is not concrete according to our definitions however if we represent each divisor of n by the set of its prime factors we find that this nonconcrete boolean algebra is isomorphic to the concrete boolean algebra consisting of all sets of prime factors of n with union corresponding to least common multiple intersection to greatest common divisor and complement to division into n so this example while not technically concrete is at least morally concrete via this representation called an isomorphism this example is an instance of the following notion a boolean algebra is called representable when it is isomorphic to a concrete boolean algebra the obvious next question is answered positively as follows every boolean algebra is representable that is up to isomorphism abstract and concrete boolean algebras are the same thing this quite nontrivial result depends on the boolean prime ideal theorem a choice principle slightly weaker than the axiom of choice and is treated in more detail in the article stone s representation theorem for boolean algebras this strong relationship implies a weaker result strengthening the observation in the previous subsection to the following easy consequence of representability the laws satisfied by all boolean algebras coincide with those satisfied by the prototypical boolean algebra it is weaker in the sense that it does not of itself imply representability boolean algebras are special here for example a relation algebra is a boolean algebra with additional structure but it is not the case that every relation algebra is representable in the sense appropriate to relation algebras edit axiomatizing boolean algebra main articles axiomatization of boolean algebras and boolean algebras canonically defined the above definition of an abstract boolean algebra as a set and operations satisfying the boolean laws raises the question what are those laws a simple minded answer is all boolean laws which can be defined as all equations that hold for the boolean algebra of 0 and 1 since there are infinitely many such laws this is not a terribly satisfactory answer in practice leading to the next question does it suffice to require only finitely many laws to hold in the case of boolean algebras the answer is yes in particular the finitely many equations we have listed above suffice we say that boolean algebra is finitely axiomatizable or finitely based can this list be made shorter yet again the answer is yes to begin with some of the above laws are implied by some of the others a sufficient subset of the above laws consists of the pairs of associativity commutativity and absorption laws distributivity of over or the other distributivity law one suffices and the two complement laws in fact this is the traditional axiomatization of boolean algebra as a complemented distributive lattice by introducing additional laws not listed above it becomes possible to shorten the list yet further in 1933 edward huntington showed that if the basic operations are taken to be x y and x with x y considered a derived operation e g via de morgan s law in the form x y x y then the equation x y x y x along with the two equations expressing associativity and commutativity of completely axiomatized boolean algebra when the only basic operation is the binary nand operation x y stephen wolfram has proposed in his book a new kind of science the single axiom xy z x xz x z as a one equation axiomatization of boolean algebra where for convenience here xy denotes the nand rather than the and of x and y edit propositional logic main article propositional calculus propositional logic is a logical system that is intimately connected to boolean algebra 2 many syntactic concepts of boolean algebra carry over to propositional logic with only minor changes in notation and terminology while the semantics of propositional logic are defined via boolean algebras in a way that the tautologies theorems of propositional logic correspond to equational theorems of boolean algebra syntactically every boolean term corresponds to a propositional formula of propositional logic in this translation between boolean algebra and propositional logic boolean variables x y become propositional variables or atoms p q boolean terms such as x y become propositional formulas p q 0 becomes false or and 1 becomes true or t it is convenient when referring to generic propositions to use greek letters as metavariables variables outside the language of propositional calculus used when talking about propositional calculus to denote propositions the semantics of propositional logic rely on truth assignment s the essential idea of a truth assignment is that the propositional variables are mapped to elements of a fixed boolean algebra and then the truth value of a propositional formula using these letters is the element of the boolean algebra that is obtained by computing the value of the boolean term corresponding to the formula in classical semantics only the two element boolean algebra is used while in boolean valued semantics arbitrary boolean algebras are considered a tautology is a propositional formula that is assigned truth value 1 by every truth assignment of its propositional variables to an arbitrary boolean algebra or equivalently every truth assignment to the two element boolean algebra these semantics permit a translation between tautologies of propositional logic and equational theorems of boolean algebra every tautology of propositional logic can be expressed as the boolean equation 1 which will be a theorem of boolean algebra conversely every theorem of boolean algebra corresponds to the tautologies and if is in the language these last tautologies can also be written as or as two separate theorems and if is available then the single tautology can be used edit applications one motivating application of propositional calculus is the analysis of propositions and deductive arguments in natural language whereas the proposition if x 3 then x 1 4 depends on the meanings of such symbols as and 1 the proposition if x 3 then x 3 does not it is true merely by virtue of its structure and remains true whether x 3 is replaced by x 4 or the moon is made of green cheese the generic or abstract form of this tautology is if p then p or in the language of boolean algebra p p replacing p by x 3 or any other proposition is called instantiation of p by that proposition the result of instantiating p in an abstract proposition is called an instance of the proposition thus x 3 x 3 is a tautology by virtue of being an instance of the abstract tautology p p all occurrences of the instantiated variable must be instantiated with the same proposition to avoid such nonsense as p x 3 or x 3 x 4 propositional calculus restricts attention to abstract propositions those built up from propositional variables using boolean operations instantiation is still possible within propositional calculus but only by instantiating propositional variables by abstract propositions such as instantiating q by q p in p q p to yield the instance p q p p the availability of instantiation as part of the machinery of propositional calculus avoids the need for metavariables within the language of propositional calculus since ordinary propositional variables can be considered within the language to denote arbitrary propositions the metavariables themselves are outside the reach of instantiation not being part of the language of propositional calculus but rather part of the same language for talking about it that this sentence is written in where we need to be able to distinguish propositional variables and their instantiations as being distinct syntactic entities edit deductive systems for propositional logic an axiomatization of propositional calculus is a set of tautologies called axioms and one or more inference rules for producing new tautologies from old a proof in an axiom system a is a finite nonempty sequence of propositions each of which is either an instance of an axiom of a or follows by some rule of a from propositions appearing earlier in the proof thereby disallowing circular reasoning the last proposition is the theorem proved by the proof every nonempty initial segment of a proof is itself a proof whence every proposition in a proof is itself a theorem an axiomatization is sound when every theorem is a tautology and complete when every tautology is a theorem 18 edit sequent calculus main article sequent calculus propositional calculus is commonly organized as a hilbert system whose operations are just those of boolean algebra and whose theorems are boolean tautologies those boolean terms equal to the boolean constant 1 another form is sequent calculus which has two sorts propositions as in ordinary propositional calculus and pairs of lists of propositions called sequents such as a b a c a b c the two halves of a sequent are called the antecedent and the succedent respectively the customary metavariable denoting an antecedent or part thereof is and for a succedent thus a would denote a sequent whose succedent is a list and whose antecedent is a list with an additional proposition a appended after it the antecedent is interpreted as the conjunction of its propositions the succedent as the disjunction of its propositions and the sequent itself as the entailment of the succedent by the antecedent entailment differs from implication in that whereas the latter is a binary operation that returns a value in a boolean algebra the former is a binary relation which either holds or does not hold in this sense entailment is an external form of implication meaning external to the boolean algebra thinking of the reader of the sequent as also being external and interpreting and comparing antecedents and succedents in some boolean algebra the natural interpretation of is as in the partial order of the boolean algebra defined by x y just when x y y this ability to mix external implication and internal implication in the one logic is among the essential differences between sequent calculus and propositional calculus 19 edit applications edit two valued logic boolean algebra as the calculus of two values is fundamental to digital logic computer programming and mathematical logic and is also used in other areas of mathematics such as set theory and statistics 2 digital logic codes its symbols in various ways as voltages on wires in high speed circuits and capacitive storage devices as orientations of a magnetic domain in ferromagnetic storage devices as holes in punched cards or paper tape and so on now it is possible to code more than two symbols in any given medium for example one might use respectively 0 1 2 and 3 volts to code a four symbol alphabet on a wire or holes of different sizes in a punched card in practice however the tight constraints of high speed small size and low power combine to make noise a major factor this makes it hard to distinguish between symbols when there are many of them at a single site rather than attempting to distinguish between four voltages on one wire digital designers have settled on two voltages per wire high and low to obtain four symbols one uses two wires and so on programmers programming in machine code assembly language and other programming languages that expose the low level digital structure of the data registers operate on whatever symbols were chosen for the hardware invariably bit vectors in modern computers for the above reasons such languages support both the numeric operations of addition multiplication etc performed on words interpreted as integers as well as the logical operations of disjunction conjunction etc performed bit wise on words interpreted as bit vectors programmers therefore have the option of working in and applying the laws of either numeric algebra or boolean algebra as needed a core differentiating feature is carry propagation with the former but not the latter other areas where two values is a good choice are the law and mathematics in everyday relaxed conversation nuanced or complex answers such as maybe or only on the weekend are acceptable in more focused situations such as a court of law or theorem based mathematics however it is deemed advantageous to frame questions so as to admit a simple yes or no answer is the defendant guilty or not guilty is the proposition true or false and to disallow any other answer however much of a straitjacket this might prove in practice for the respondent the principle of the simple yes no question has become a central feature of both judicial and mathematical logic making two valued logic deserving of organization and study in its own right a central concept of set theory is membership now an organization may permit multiple degrees of membership such as novice associate and full with sets however an element is either in or out the candidates for membership in a set work just like the wires in a digital computer each candidate is either a member or a nonmember just as each wire is either high or low algebra being a fundamental tool in any area amenable to mathematical treatment these considerations combine to make the algebra of two values of fundamental importance to computer hardware mathematical logic and set theory two valued logic can be extended to multi valued logic notably by replacing the boolean domain 0 160 1 with the unit interval 0 1 in which case rather than only taking values 0 or 1 any value between and including 0 and 1 can be assumed algebraically negation not is replaced with 1 160 160 x conjunction and is replaced with multiplication and disjunction or is defined via de morgan s law interpreting these values as logical truth values yields a multi valued logic which forms the basis for fuzzy logic and probabilistic logic in these interpretations a value is interpreted as the degree of truth to what extent a proposition is true or the probability that the proposition is true edit boolean operations the original application for boolean operations was mathematical logic where it combines the truth values true or false of individual formulas natural languages such as english have words for several boolean operations in particular conjunction and disjunction or negation not and implication implies but not is synonymous with and not when used to combine situational assertions such as the block is on the table and cats drink milk which naively are either true or false the meanings of these logical connectives often have the meaning of their logical counterparts however with descriptions of behavior such as jim walked through the door one starts to notice differences such as failure of commutativity for example the conjunction of jim opened the door with jim walked through the door in that order is not equivalent to their conjunction in the other order since and usually means and then in such cases questions can be similar the order is the sky blue and why is the sky blue makes more sense than the reverse order conjunctive commands about behavior are like behavioral assertions as in get dressed and go to school disjunctive commands such love me or leave me or fish or cut bait tend to be asymmetric via the implication that one alternative is less preferable conjoined nouns such as tea and milk generally describe aggregation as with set union while tea or milk is a choice however context can reverse these senses as in your choices are coffee and tea which usually means the same as your choices are coffee or tea alternatives double negation as in i don t not like milk rarely means literally i do like milk but rather conveys some sort of hedging as though to imply that there is a third possibility not not p can be loosely interpreted as surely p and although p necessarily implies not not p the converse is suspect in english much as with intuitionistic logic in view of the highly idiosyncratic usage of conjunctions in natural languages boolean algebra cannot be considered a reliable framework for interpreting them boolean operations are used in digital logic to combine the bits carried on individual wires thereby interpreting them over 0 1 when a vector of n identical binary gates are used to combine two bit vectors each of n bits the individual bit operations can be understood collectively as a single operation on values from a boolean algebra with 2 n elements naive set theory interprets boolean operations as acting on subsets of a given set x as we saw earlier this behavior exactly parallels the coordinate wise combinations of bit vectors with the union of two sets corresponding to the disjunction of two bit vectors and so on the 256 element free boolean algebra on three generators is deployed in computer displays based on raster graphics which use bit blit to manipulate whole regions consisting of pixels relying on boolean operations to specify how the source region should be combined with the destination typically with the help of a third region called the mask modern video cards offer all 2 2 3 160 160 256 ternary operations for this purpose with the choice of operation being a one byte 8 bit parameter the constants src 0xaa or 10101010 dst 0xcc or 11001100 and msk 0xf0 or 11110000 allow boolean operations such as src dst amp msk meaning xor the source and destination and then and the result with the mask to be written directly as a constant denoting a byte calculated at compile time 0x60 in the src dst amp msk example 0x66 if just src dst etc at run time the video card interprets the byte as the raster operation indicated by the original expression in a uniform way that requires remarkably little hardware and which takes time completely independent of the complexity of the expression solid modeling systems for computer aided design offer a variety of methods for building objects from other objects combination by boolean operations being one of them in this method the space in which objects exist is understood as a set s of voxels the three dimensional analogue of pixels in two dimensional graphics and shapes are defined as subsets of s allowing objects to be combined as sets via union intersection etc one obvious use is in building a complex shape from simple shapes simply as the union of the latter another use is in sculpting understood as removal of material any grinding milling routing or drilling operation that can be performed with physical machinery on physical materials can be simulated on the computer with the boolean operation x 160 160 y or x 160 160 y which in set theory is set difference remove the elements of y from those of x thus given two shapes one to be machined and the other the material to be removed the result of machining the former to remove the latter is described simply as their set difference edit boolean searches search engine queries also employ boolean logic for this application each web page on the internet may be considered to be an element of a set the following examples use a syntax supported by google 20 doublequotes are used to combine whitespace separated words into a single search term 21 whitespace is used to specify logical and as it is the default operator for joining search terms search term 1 search term 2 the or keyword is used for logical or search term 1 or search term 2 the minus sign is used for logical not and not search term 1 search term 2 edit history this section is empty you can help by adding to it october 2012 edit see also mathematics portal list of boolean algebra topics boolean algebra structure logic design propositional calculus heyting algebra intuitionistic logic relation algebra edit references boole george 2003 1854 an investigation of the laws of thought prometheus books isbn 160 978 1 59102 089 9 a b c d e f givant steven halmos paul 2009 introduction to boolean algebras undergraduate texts in mathematics springer isbn 160 978 0 387 40293 2 cf footnote on page 278 the name boolean algebra or boolean algebras for the calculus originated by boole extended by schr der and perfected by whitehead seems to have been first suggested by sheffer in 1913 quoted from e v huntington january 1933 new sets of independent postulates for the algebra of logic with special reference to whitehead and russell s principia mathematica http www ams org journals tran 1933 035 01 s0002 9947 1933 1501684 x s0002 9947 1933 1501684 x pdf a b c j michael dunn gary m hardegree 2001 algebraic methods in philosophical logic oxford university press us p 160 2 isbn 160 978 0 19 853192 0 http books google com books id aokwhbiluic amp pg pa2 norman balabanian bradley carlson 2001 digital logic design principles john wiley pp 160 39 40 isbn 160 978 0 471 29351 4 online sample rajaraman amp radhakrishnan introduction to digital computer design an 5th ed phi learning pvt ltd p 160 65 isbn 160 978 81 203 3409 0 http books google com books id 8mvcogssjcc amp pg pa65 john a camara 2010 electrical and electronics reference manual for the electrical and computer pe exam www ppi2pass com p 160 41 isbn 160 978 1 59126 166 7 http books google com books id rfhwheu0jfsc amp pg sa41 pa3 shin ichi minato saburo muroga 2007 binary decision diagrams in wai kai chen the vlsi handbook 2nd ed crc press isbn 160 978 0 8493 4199 1 chapter 29 alan parkes 2002 introduction to languages machines and logic computable languages abstract machines and formal logic springer p 160 276 isbn 160 978 1 85233 464 2 http books google com books id suqxky8kpcqc amp pg pa276 jon barwise john etchemendy gerard allwein dave barker plummer albert liu 1999 language proof and logic csli publications isbn 160 978 1 889119 08 3 ben goertzel 1994 chaotic logic language thought and reality from the perspective of complex systems science springer p 160 48 isbn 160 978 0 306 44690 0 http books google com books id zvowoxdunp8c amp pg pa48 halmos paul 1963 lectures on boolean algebras van nostrand a b o regan gerard 2008 a brief history of computing springer p 160 33 isbn 160 978 1 84800 083 4 http books google com books id 081h96f1enmc amp pg pa33 steven r givant paul richard halmos 2009 introduction to boolean algebras springer pp 160 21 22 isbn 160 978 0 387 40293 2 http books google com books id orilyf8sf2sc amp pg pa22 j venn on the diagrammatic and mechanical representation of propositions and reasonings philosophical magazine and journal of science series 5 vol 10 no 59 july 1880 shannon claude 1949 the synthesis of two terminal switching circuits bell system technical journal 28 59 98 koppelberg sabine 1989 general theory of boolean algebras handbook of boolean algebras vol 1 ed j donald monk with robert bonnet amsterdam north holland isbn 160 978 0 444 70261 6 hausman alan howard kahane paul tidman 2010 2007 logic and philosophy a modern introduction wadsworth cengage learning isbn 160 0 495 60158 6 girard jean yves paul taylor yves lafont 1990 1989 proofs and types cambridge university press cambridge tracts in theoretical computer science 7 isbn 160 0 521 37181 3 http www paultaylor eu stable proofs 2btypes html not all search engines support the same query syntax additionally some organizations such as google provide specialized search engines that support alternate or extended syntax see e g syntax cheatsheet google codesearch supports regular expressions doublequote delimited search terms are called exact phrase searches in the google documentation edit further reading j eldon whitesitt 1995 boolean algebra and its applications courier dover publications isbn 160 978 0 486 68483 3 suitable introduction for students in applied fields dwinger philip 1971 introduction to boolean algebras w rzburg physica verlag sikorski roman 1969 boolean algebras 3 e ed berlin springer verlag isbn 160 978 0 387 04469 9 boche ski j zef maria 1959 a pr cis of mathematical logic translated from the french and german editions by otto bird dordrecht south holland d reidel historical perspective george boole 1848 the calculus of logic cambridge and dublin mathematical journal iii 183 98 theodore hailperin 1986 boole s logic and probability a critical exposition from the standpoint of contemporary algebra logic and probability theory 2nd ed elsevier isbn 160 978 0 444 87952 3 dov m gabbay john woods ed 2004 the rise of modern logic from leibniz to frege handbook of the history of logic 3 elsevier isbn 160 978 0 444 51611 4 several relevant chapters by hailperin valencia and grattan guinesss calixto badesa 2004 the birth of model theory l wenheim s theorem in the frame of the theory of relatives princeton university press isbn 160 978 0 691 05853 5 chapter 1 algebra of classes and propositional calculus burris stanley 2009 the algebra of logic tradition stanford encyclopedia of philosophy radomir s stankovic jaakko astola 2011 from boolean logic to switching circuits and automata towards modern information technology springer isbn 160 978 3 642 11681 0 http books google com books id uagvec2jgtic edit external links the wikibook how to search has a page on the topic of boolean logic the wikibook electronics has a page on the topic of boolean algebra how stuff works boolean logic science and technology boolean algebra contains a list and proof of boolean theorems and laws v t e digital systems components logic gate combinational logic sequential logic digital circuit integrated circuit ic theory boolean algebra logic synthesis digital signal processing computer architecture applications digital audio digital photography digital video electronic literature 