it has been suggested that genetic algorithms in economics be merged into this article or section discuss proposed since december 2010 in the computer science field of artificial intelligence a genetic algorithm ga is a search heuristic that mimics the process of natural evolution this heuristic is routinely used to generate useful solutions to optimization and search problems 1 genetic algorithms belong to the larger class of evolutionary algorithms ea which generate solutions to optimization problems using techniques inspired by natural evolution such as inheritance mutation selection and crossover genetic algorithms find application in bioinformatics phylogenetics computational science engineering economics chemistry manufacturing mathematics physics pharmacometrics and other fields contents 1 methodology 1 1 initialization 1 2 selection 1 3 genetic operators 1 4 termination 2 the building block hypothesis 3 limitations 4 variants 4 1 linkage learning 5 problem domains 6 history 7 related techniques 7 1 parent fields 7 2 related fields 7 2 1 evolutionary algorithms 7 2 2 swarm intelligence 7 2 3 other evolutionary computing algorithms 7 2 4 other metaheuristic methods 7 2 5 other stochastic optimisation methods 8 see also 9 references 10 bibliography 11 external links 11 1 resources 11 2 tutorials 11 3 examples edit methodology in a genetic algorithm a population of candidate solutions called individuals creatures or phenotypes to an optimization problem is evolved toward better solutions each candidate solution has a set of properties its chromosomes or genotype which can be mutated and altered traditionally solutions are represented in binary as strings of 0s and 1s but other encodings are also possible 2 the evolution usually starts from a population of randomly generated individuals and happens in generations in each generation the fitness of every individual in the population is evaluated the more fit individuals are stochastically selected from the current population and each individual s genome is modified recombined and possibly randomly mutated to form a new population the new population is then used in the next iteration of the algorithm commonly the algorithm terminates when either a maximum number of generations has been produced or a satisfactory fitness level has been reached for the population a typical genetic algorithm requires a genetic representation of the solution domain a fitness function to evaluate the solution domain a standard representation of each candidate solution is as an array of bits 2 arrays of other types and structures can be used in essentially the same way the main property that makes these genetic representations convenient is that their parts are easily aligned due to their fixed size which facilitates simple crossover operations variable length representations may also be used but crossover implementation is more complex in this case tree like representations are explored in genetic programming and graph form representations are explored in evolutionary programming a mix of both linear chromosomes and trees is explored in gene expression programming once the genetic representation and the fitness function are defined a ga proceeds to initialize a population of solutions and then to improve it through repetitive application of the mutation crossover inversion and selection operators edit initialization initially many individual solutions are usually randomly generated to form an initial population the population size depends on the nature of the problem but typically contains several hundreds or thousands of possible solutions traditionally the population is generated randomly allowing the entire range of possible solutions the search space occasionally the solutions may be seeded in areas where optimal solutions are likely to be found edit selection main article selection genetic algorithm during each successive generation a proportion of the existing population is selected to breed a new generation individual solutions are selected through a fitness based process where fitter solutions as measured by a fitness function are typically more likely to be selected certain selection methods rate the fitness of each solution and preferentially select the best solutions other methods rate only a random sample of the population as the former process may be very time consuming the fitness function is defined over the genetic representation and measures the quality of the represented solution the fitness function is always problem dependent for instance in the knapsack problem one wants to maximize the total value of objects that can be put in a knapsack of some fixed capacity a representation of a solution might be an array of bits where each bit represents a different object and the value of the bit 0 or 1 represents whether or not the object is in the knapsack not every such representation is valid as the size of objects may exceed the capacity of the knapsack the fitness of the solution is the sum of values of all objects in the knapsack if the representation is valid or 0 otherwise in some problems it is hard or even impossible to define the fitness expression in these cases a simulation may be used to determine the fitness function value of a phenotype e g computational fluid dynamics is used to determine the air resistance of a vehicle whose shape is encoded as the phenotype or even interactive genetic algorithms are used edit genetic operators main articles crossover genetic algorithm and mutation genetic algorithm the next step is to generate a second generation population of solutions from those selected through genetic operators crossover also called recombination and or mutation for each new solution to be produced a pair of parent solutions is selected for breeding from the pool selected previously by producing a child solution using the above methods of crossover and mutation a new solution is created which typically shares many of the characteristics of its parents new parents are selected for each new child and the process continues until a new population of solutions of appropriate size is generated although reproduction methods that are based on the use of two parents are more biology inspired some research 3 4 suggests that more than two parents generate higher quality chromosomes these processes ultimately result in the next generation population of chromosomes that is different from the initial generation generally the average fitness will have increased by this procedure for the population since only the best organisms from the first generation are selected for breeding along with a small proportion of less fit solutions for reasons already mentioned above opinion is divided over the importance of crossover versus mutation there are many references in fogel 2006 that support the importance of mutation based search although crossover and mutation are known as the main genetic operators it is possible to use other operators such as regrouping colonization extinction or migration in genetic algorithms 5 it is worth tuning parameters such as the mutation probability crossover probability and population size to find reasonable settings for the problem class being worked on a very small mutation rate may lead to genetic drift which is non ergodic in nature a recombination rate that is too high may lead to premature convergence of the genetic algorithm a mutation rate that is too high may lead to loss of good solutions unless there is elitist selection there are theoretical but not yet practical upper and lower bounds for these parameters that can help guide selection citation needed edit termination this generational process is repeated until a termination condition has been reached common terminating conditions are a solution is found that satisfies minimum criteria fixed number of generations reached allocated budget computation time money reached the highest ranking solution s fitness is reaching or has reached a plateau such that successive iterations no longer produce better results manual inspection combinations of the above edit the building block hypothesis genetic algorithms are simple to implement but their behavior is difficult to understand in particular it is difficult to understand why these algorithms frequently succeed at generating solutions of high fitness when applied to practical problems the building block hypothesis bbh consists of a description of a heuristic that performs adaptation by identifying and recombining building blocks i e low order low defining length schemata with above average fitness a hypothesis that a genetic algorithm performs adaptation by implicitly and efficiently implementing this heuristic goldberg describes the heuristic as follows short low order and highly fit schemata are sampled recombined crossed over and resampled to form strings of potentially higher fitness in a way by working with these particular schemata the building blocks we have reduced the complexity of our problem instead of building high performance strings by trying every conceivable combination we construct better and better strings from the best partial solutions of past samplings because highly fit schemata of low defining length and low order play such an important role in the action of genetic algorithms we have already given them a special name building blocks just as a child creates magnificent fortresses through the arrangement of simple blocks of wood so does a genetic algorithm seek near optimal performance through the juxtaposition of short low order high performance schemata or building blocks 6 edit limitations there are several limitations of the use of a genetic algorithm compared to alternative optimization algorithms repeated fitness function evaluation for complex problems is often the most prohibitive and limiting segment of artificial evolutionary algorithms finding the optimal solution to complex high dimensional multimodal problems often requires very expensive fitness function evaluations in real world problems such as structural optimization problems one single function evaluation may require several hours to several days of complete simulation typical optimization methods can not deal with such types of problem in this case it may be necessary to forgo an exact evaluation and use an approximated fitness that is computationally efficient it is apparent that amalgamation of approximate models may be one of the most promising approaches to convincingly use ga to solve complex real life problems genetic algorithms do not scale well with complexity that is where the number of elements which are exposed to mutation is large there is often an exponential increase in search space size this makes it extremely difficult to use the technique on problems such as designing an engine a house or plane in order to make such problems tractable to evolutionary search they must be broken down into the simplest representation possible hence we typically see evolutionary algorithms encoding designs for fan blades instead of engines building shapes instead of detailed construction plans airfoils instead of whole aircraft designs the second problem of complexity is the issue of how to protect parts that have evolved to represent good solutions from further destructive mutation particularly when their fitness assessment requires them to combine well with other parts it has been suggested by some citation needed in the community that a developmental approach to evolved solutions could overcome some of the issues of protection but this remains an open research question the better solution is only in comparison to other solutions as a result the stop criterion is not clear in every problem in many problems gas may have a tendency to converge towards local optima or even arbitrary points rather than the global optimum of the problem this means that it does not know how to sacrifice short term fitness to gain longer term fitness the likelihood of this occurring depends on the shape of the fitness landscape certain problems may provide an easy ascent towards a global optimum others may make it easier for the function to find the local optima this problem may be alleviated by using a different fitness function increasing the rate of mutation or by using selection techniques that maintain a diverse population of solutions although the no free lunch theorem 7 proves citation needed that there is no general solution to this problem a common technique to maintain diversity is to impose a niche penalty wherein any group of individuals of sufficient similarity niche radius have a penalty added which will reduce the representation of that group in subsequent generations permitting other less similar individuals to be maintained in the population this trick however may not be effective depending on the landscape of the problem another possible technique would be to simply replace part of the population with randomly generated individuals when most of the population is too similar to each other diversity is important in genetic algorithms and genetic programming because crossing over a homogeneous population does not yield new solutions in evolution strategies and evolutionary programming diversity is not essential because of a greater reliance on mutation operating on dynamic data sets is difficult as genomes begin to converge early on towards solutions which may no longer be valid for later data several methods have been proposed to remedy this by increasing genetic diversity somehow and preventing early convergence either by increasing the probability of mutation when the solution quality drops called triggered hypermutation or by occasionally introducing entirely new randomly generated elements into the gene pool called random immigrants again evolution strategies and evolutionary programming can be implemented with a so called comma strategy in which parents are not maintained and new parents are selected only from offspring this can be more effective on dynamic problems gas cannot effectively solve problems in which the only fitness measure is a single right wrong measure like decision problems as there is no way to converge on the solution no hill to climb in these cases a random search may find a solution as quickly as a ga however if the situation allows the success failure trial to be repeated giving possibly different results then the ratio of successes to failures provides a suitable fitness measure for specific optimization problems and problem instances other optimization algorithms may find better solutions than genetic algorithms given the same amount of computation time alternative and complementary algorithms include evolution strategies evolutionary programming simulated annealing gaussian adaptation hill climbing and swarm intelligence e g ant colony optimization particle swarm optimization and methods based on integer linear programming the question of which if any problems are suited to genetic algorithms in the sense that such algorithms are better than others is open and controversial edit variants the simplest algorithm represents each chromosome as a bit string typically numeric parameters can be represented by integers though it is possible to use floating point representations the floating point representation is natural to evolution strategies and evolutionary programming the notion of real valued genetic algorithms has been offered but is really a misnomer because it does not really represent the building block theory that was proposed by john henry holland in the 1970s this theory is not without support though based on theoretical and experimental results see below the basic algorithm performs crossover and mutation at the bit level other variants treat the chromosome as a list of numbers which are indexes into an instruction table nodes in a linked list hashes objects or any other imaginable data structure crossover and mutation are performed so as to respect data element boundaries for most data types specific variation operators can be designed different chromosomal data types seem to work better or worse for different specific problem domains when bit string representations of integers are used gray coding is often employed in this way small changes in the integer can be readily effected through mutations or crossovers this has been found to help prevent premature convergence at so called hamming walls in which too many simultaneous mutations or crossover events must occur in order to change the chromosome to a better solution other approaches involve using arrays of real valued numbers instead of bit strings to represent chromosomes theoretically the smaller the alphabet the better the performance but paradoxically good results have been obtained from using real valued chromosomes a very successful slight variant of the general process of constructing a new population is to allow some of the better organisms from the current generation to carry over to the next unaltered this strategy is known as elitist selection parallel implementations of genetic algorithms come in two flavours coarse grained parallel genetic algorithms assume a population on each of the computer nodes and migration of individuals among the nodes fine grained parallel genetic algorithms assume an individual on each processor node which acts with neighboring individuals for selection and reproduction other variants like genetic algorithms for online optimization problems introduce time dependence or noise in the fitness function genetic algorithms with adaptive parameters adaptive genetic algorithms agas is another significant and promising variant of genetic algorithms the probabilities of crossover pc and mutation pm greatly determine the degree of solution accuracy and the convergence speed that genetic algorithms can obtain instead of using fixed values of pc and pm agas utilize the population information in each generation and adaptively adjust the pc and pm in order to maintain the population diversity as well as to sustain the convergence capacity in aga adaptive genetic algorithm 8 the adjustment of pc and pm depends on the fitness values of the solutions in caga clustering based adaptive genetic algorithm 9 through the use of clustering analysis to judge the optimization states of the population the adjustment of pc and pm depends on these optimization states it can be quite effective to combine ga with other optimization methods ga tends to be quite good at finding generally good global solutions but quite inefficient at finding the last few mutations to find the absolute optimum other techniques such as simple hill climbing are quite efficient at finding absolute optimum in a limited region alternating ga and hill climbing can improve the efficiency of ga while overcoming the lack of robustness of hill climbing this means that the rules of genetic variation may have a different meaning in the natural case for instance provided that steps are stored in consecutive order crossing over may sum a number of steps from maternal dna adding a number of steps from paternal dna and so on this is like adding vectors that more probably may follow a ridge in the phenotypic landscape thus the efficiency of the process may be increased by many orders of magnitude moreover the inversion operator has the opportunity to place steps in consecutive order or any other suitable order in favour of survival or efficiency see for instance 10 or example in travelling salesman problem in particular the use of an edge recombination operator a variation where the population as a whole is evolved rather than its individual members is known as gene pool recombination edit linkage learning a number of variations have been developed to attempt to improve performance of gas on problems with a high degree of fitness epistasis i e where the fitness of a solution consists of interacting subsets of its variables such algorithms aim to learn before exploiting these beneficial phenotypic interactions as such they are aligned with the building block hypothesis in adaptively reducing disruptive recombination prominent examples of this approach include the mga 11 gemga 12 and llga 13 edit problem domains problems which appear to be particularly appropriate for solution by genetic algorithms include timetabling and scheduling problems and many scheduling software packages are based on gas citation needed gas have also been applied to engineering genetic algorithms are often applied as an approach to solve global optimization problems as a general rule of thumb genetic algorithms might be useful in problem domains that have a complex fitness landscape as mixing i e mutation in combination with crossover is designed to move the population away from local optima that a traditional hill climbing algorithm might get stuck in observe that commonly used crossover operators cannot change any uniform population mutation alone can provide ergodicity of the overall genetic algorithm process seen as a markov chain examples of problems solved by genetic algorithms include mirrors designed to funnel sunlight to a solar collector antennae designed to pick up radio signals in space and walking methods for computer figures many of their solutions have been highly effective unlike anything a human engineer would have produced and inscrutable as to how they arrived at that solution edit history computer simulations of evolution started as early as in 1954 with the work of nils aall barricelli who was using the computer at the institute for advanced study in princeton new jersey 14 15 his 1954 publication was not widely noticed starting in 1957 16 the australian quantitative geneticist alex fraser published a series of papers on simulation of artificial selection of organisms with multiple loci controlling a measurable trait from these beginnings computer simulation of evolution by biologists became more common in the early 1960s and the methods were described in books by fraser and burnell 1970 17 and crosby 1973 18 fraser s simulations included all of the essential elements of modern genetic algorithms in addition hans joachim bremermann published a series of papers in the 1960s that also adopted a population of solution to optimization problems undergoing recombination mutation and selection bremermann s research also included the elements of modern genetic algorithms 19 other noteworthy early pioneers include richard friedberg george friedman and michael conrad many early papers are reprinted by fogel 1998 20 although barricelli in work he reported in 1963 had simulated the evolution of ability to play a simple game 21 artificial evolution became a widely recognized optimization method as a result of the work of ingo rechenberg and hans paul schwefel in the 1960s and early 1970s rechenberg s group was able to solve complex engineering problems through evolution strategies 22 23 24 25 another approach was the evolutionary programming technique of lawrence j fogel which was proposed for generating artificial intelligence evolutionary programming originally used finite state machines for predicting environments and used variation and selection to optimize the predictive logics genetic algorithms in particular became popular through the work of john holland in the early 1970s and particularly his book adaptation in natural and artificial systems 1975 his work originated with studies of cellular automata conducted by holland and his students at the university of michigan holland introduced a formalized framework for predicting the quality of the next generation known as holland s schema theorem research in gas remained largely theoretical until the mid 1980s when the first international conference on genetic algorithms was held in pittsburgh pennsylvania as academic interest grew the dramatic increase in desktop computational power allowed for practical application of the new technique in the late 1980s general electric started selling the world s first genetic algorithm product a mainframe based toolkit designed for industrial processes in 1989 axcelis inc released evolver the world s first commercial ga product for desktop computers the new york times technology writer john markoff wrote 26 about evolver in 1990 edit related techniques see also list of genetic algorithm applications edit parent fields genetic algorithms are a sub field of evolutionary algorithms evolutionary computing metaheuristics stochastic optimization optimization edit related fields edit evolutionary algorithms this section needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed may 2011 evolutionary algorithms is a sub field of evolutionary computing evolution strategies es see rechenberg 1994 evolve individuals by means of mutation and intermediate or discrete recombination es algorithms are designed particularly to solve problems in the real value domain they use self adaptation to adjust control parameters of the search de randomization of self adaptation has led to the contemporary covariance matrix adaptation evolution strategy cma es evolutionary programming ep involves populations of solutions with primarily mutation and selection and arbitrary representations they use self adaptation to adjust parameters and can include other variation operations such as combining information from multiple parents gene expression programming gep also uses populations of computer programs these complex computer programs are encoded in simpler linear chromosomes of fixed length which are afterwards expressed as expression trees expression trees or computer programs evolve because the chromosomes undergo mutation and recombination in a manner similar to the canonical ga but thanks to the special organization of gep chromosomes these genetic modifications always result in valid computer programs 27 genetic programming gp is a related technique popularized by john koza in which computer programs rather than function parameters are optimized genetic programming often uses tree based internal data structures to represent the computer programs for adaptation instead of the list structures typical of genetic algorithms grouping genetic algorithm gga is an evolution of the ga where the focus is shifted from individual items like in classical gas to groups or subset of items 28 the idea behind this ga evolution proposed by emanuel falkenauer is that solving some complex problems a k a clustering or partitioning problems where a set of items must be split into disjoint group of items in an optimal way would better be achieved by making characteristics of the groups of items equivalent to genes these kind of problems include bin packing line balancing clustering with respect to a distance measure equal piles etc on which classic gas proved to perform poorly making genes equivalent to groups implies chromosomes that are in general of variable length and special genetic operators that manipulate whole groups of items for bin packing in particular a gga hybridized with the dominance criterion of martello and toth is arguably the best technique to date interactive evolutionary algorithms are evolutionary algorithms that use human evaluation they are usually applied to domains where it is hard to design a computational fitness function for example evolving images music artistic designs and forms to fit users aesthetic preference edit swarm intelligence swarm intelligence is a sub field of evolutionary computing ant colony optimization aco uses many ants or agents to traverse the solution space and find locally productive areas while usually inferior to genetic algorithms and other forms of local search it is able to produce results in problems where no global or up to date perspective can be obtained and thus the other methods cannot be applied citation needed particle swarm optimization pso is a computational method for multi parameter optimization which also uses population based approach a population swarm of candidate solutions particles moves in the search space and the movement of the particles is influenced both by their own best known position and swarm s global best known position like genetic algorithms the pso method depends on information sharing among population members in some problems the pso is often more computationally efficient than the gas especially in unconstrained problems with continuous variables 29 intelligent water drops or the iwd algorithm 30 is a nature inspired optimization algorithm inspired from natural water drops which change their environment to find the near optimal or optimal path to their destination the memory is the river s bed and what is modified by the water drops is the amount of soil on the river s bed edit other evolutionary computing algorithms evolutionary computation is a sub field of the metaheuristic methods harmony search hs is an algorithm mimicking the behaviour of musicians in the process of improvisation memetic algorithm ma also called hybrid genetic algorithm among others is a relatively new evolutionary method where local search is applied during the evolutionary cycle the idea of memetic algorithms comes from memes which unlike genes can adapt themselves in some problem areas they are shown to be more efficient than traditional evolutionary algorithms bacteriologic algorithms ba inspired by evolutionary ecology and more particularly bacteriologic adaptation evolutionary ecology is the study of living organisms in the context of their environment with the aim of discovering how they adapt its basic concept is that in a heterogeneous environment you can t find one individual that fits the whole environment so you need to reason at the population level it is also believed bas could be successfully applied to complex positioning problems antennas for cell phones urban planning and so on or data mining 31 cultural algorithm ca consists of the population component almost identical to that of the genetic algorithm and in addition a knowledge component called the belief space differential search algorithm ds inspired by migration of superorganisms 32 gaussian adaptation normal or natural adaptation abbreviated na to avoid confusion with ga is intended for the maximisation of manufacturing yield of signal processing systems it may also be used for ordinary parametric optimisation it relies on a certain theorem valid for all regions of acceptability and all gaussian distributions the efficiency of na relies on information theory and a certain theorem of efficiency its efficiency is defined as information divided by the work needed to get the information 33 because na maximises mean fitness rather than the fitness of the individual the landscape is smoothed such that valleys between peaks may disappear therefore it has a certain ambition to avoid local peaks in the fitness landscape na is also good at climbing sharp crests by adaptation of the moment matrix because na may maximise the disorder average information of the gaussian simultaneously keeping the mean fitness constant edit other metaheuristic methods metaheuristic methods broadly fall within stochastic optimisation methods simulated annealing sa is a related global optimization technique that traverses the search space by testing random mutations on an individual solution a mutation that increases fitness is always accepted a mutation that lowers fitness is accepted probabilistically based on the difference in fitness and a decreasing temperature parameter in sa parlance one speaks of seeking the lowest energy instead of the maximum fitness sa can also be used within a standard ga algorithm by starting with a relatively high rate of mutation and decreasing it over time along a given schedule tabu search ts is similar to simulated annealing in that both traverse the solution space by testing mutations of an individual solution while simulated annealing generates only one mutated solution tabu search generates many mutated solutions and moves to the solution with the lowest energy of those generated in order to prevent cycling and encourage greater movement through the solution space a tabu list is maintained of partial or complete solutions it is forbidden to move to a solution that contains elements of the tabu list which is updated as the solution traverses the solution space extremal optimization eo unlike gas which work with a population of candidate solutions eo evolves a single solution and makes local modifications to the worst components this requires that a suitable representation be selected which permits individual solution components to be assigned a quality measure fitness the governing principle behind this algorithm is that of emergent improvement through selectively removing low quality components and replacing them with a randomly selected component this is decidedly at odds with a ga that selects good solutions in an attempt to make better solutions edit other stochastic optimisation methods the cross entropy ce method generates candidates solutions via a parameterized probability distribution the parameters are updated via cross entropy minimization so as to generate better samples in the next iteration reactive search optimization rso advocates the integration of sub symbolic machine learning techniques into search heuristics for solving complex optimization problems the word reactive hints at a ready response to events during the search through an internal online feedback loop for the self tuning of critical parameters methodologies of interest for reactive search include machine learning and statistics in particular reinforcement learning active or query learning neural networks and meta heuristics edit see also list of genetic algorithm applications propagation of schema universal darwinism edit references mitchell 1996 p 160 2 a b whitley 1994 p 160 66 eiben a e et al 1994 genetic algorithms with multi parent recombination ppsn iii proceedings of the international conference on evolutionary computation the third conference on parallel problem solving from nature 78 87 isbn 3 540 58484 6 ting chuan kang 2005 on the mean convergence time of multi parent genetic algorithms without selection advances in artificial life 403 412 isbn 978 3 540 28848 0 akbari ziarati 2010 a multilevel evolutionary algorithm for optimizing numerical functions ijiec 2 2011 419 430 1 goldberg 1989 p 160 41 wolpert d h macready w g 1995 no free lunch theorems for optimisation santa fe institute sfi tr 05 010 santa fe srinivas m and patnaik l adaptive probabilities of crossover and mutation in genetic algorithms ieee transactions on system man and cybernetics vol 24 no 4 pp 656 667 1994 zhang j chung h and lo w l clustering based adaptive crossover and mutation probabilities for genetic algorithms ieee transactions on evolutionary computation vol 11 no 3 pp 326 335 2007 evolution in a nutshell d e goldberg b korb and k deb messy genetic algorithms motivation analysis and first results complex systems 5 3 493 530 october 1989 gene expression the missing link in evolutionary computation g harik learning linkage to efficiently solve problems of bounded difficulty using genetic algorithms phd thesis dept computer science university of michigan ann arbour 1997 barricelli nils aall 1954 esempi numerici di processi di evoluzione methodos 45 68 barricelli nils aall 1957 symbiogenetic evolution processes realized by artificial methods methodos 143 182 fraser alex 1957 simulation of genetic systems by automatic digital computers i introduction aust j biol sci 10 484 491 fraser alex donald burnell 1970 computer models in genetics new york mcgraw hill isbn 160 0 07 021904 4 crosby jack l 1973 computer simulation in genetics london john wiley amp sons isbn 160 0 471 18880 8 02 27 96 uc berkeley s hans bremermann professor emeritus and pioneer in mathematical biology has died at 69 fogel david b editor 1998 evolutionary computation the fossil record new york ieee press isbn 160 0 7803 3481 7 barricelli nils aall 1963 numerical testing of evolution theories part ii preliminary tests of performance symbiogenesis and terrestrial life acta biotheoretica 16 99 126 rechenberg ingo 1973 evolutionsstrategie stuttgart holzmann froboog isbn 160 3 7728 0373 3 schwefel hans paul 1974 numerische optimierung von computer modellen phd thesis schwefel hans paul 1977 numerische optimierung von computor modellen mittels der evolutionsstrategie 160 mit einer vergleichenden einf hrung in die hill climbing und zufallsstrategie basel stuttgart birkh user isbn 160 3 7643 0876 1 schwefel hans paul 1981 numerical optimization of computer models translation of 1977 numerische optimierung von computor modellen mittels der evolutionsstrategie chichester 160 new york wiley isbn 160 0 471 09988 0 markoff john 1990 08 29 what s the best answer it s survival of the fittest new york times http www nytimes com 1990 08 29 business business technology what s the best answer it s survival of the fittest html retrieved 2009 08 09 ferreira c gene expression programming a new adaptive algorithm for solving problems complex systems vol 13 issue 2 87 129 http www gene expression programming com webpapers gep pdf falkenauer emanuel 1997 genetic algorithms and grouping problems chichester england john wiley amp sons ltd isbn 160 978 0 471 97150 4 rania hassan babak cohanim olivier de weck gerhard vente r 2005 a comparison of particle swarm optimization and the genetic algorithm hamed shah hosseini the intelligent water drops algorithm a nature inspired swarm based optimization algorithm international journal of bio inspired computation ijbic vol 1 no 2009 2 dead link baudry benoit franck fleurey jean marc j z quel and yves le traon march april 2005 automatic test case optimization a bacteriologic algorithm pdf ieee software ieee computer society 22 2 76 82 doi 10 1109 ms 2005 30 http www irisa fr triskell publis 2005 baudry05d pdf retrieved 2009 08 09 civicioglu p 2012 transforming geocentric cartesian coordinates to geodetic coordinates by using differential search algorithm computers amp geosciences 46 229 247 doi 10 1016 j cageo 2011 12 011 kjellstr m g december 1991 on the efficiency of gaussian adaptation journal of optimization theory and applications 71 3 589 597 doi 10 1007 bf00941405 edit bibliography this article includes a list of references but its sources remain unclear because it has insufficient inline citations please help to improve this article by introducing more precise citations june 2010 banzhaf wolfgang nordin peter keller robert francone frank 1998 genetic programming an introduction san francisco ca morgan kaufmann isbn 160 978 1558605107 bies robert r muldoon matthew f pollock bruce g manuck steven smith gwenn and sale mark e 2006 a genetic algorithm based hybrid machine learning approach to model selection journal of pharmacokinetics and pharmacodynamics netherlands springer 196 221 cha sung hyuk tappert charles c 2009 a genetic algorithm for constructing compact binary decision trees journal of pattern recognition research 4 1 1 13 http www jprr org index php jprr article view 44 25 fraser alex s 1957 simulation of genetic systems by automatic digital computers i introduction australian journal of biological sciences 10 484 491 goldberg david 1989 genetic algorithms in search optimization and machine learning reading ma addison wesley professional isbn 160 978 0201157673 goldberg david 2002 the design of innovation lessons from and for competent genetic algorithms norwell ma kluwer academic publishers isbn 160 978 1402070983 fogel david evolutionary computation toward a new philosophy of machine intelligence 3rd ed piscataway nj ieee press isbn 160 978 0471669517 holland john 1992 adaptation in natural and artificial systems cambridge ma mit press isbn 160 978 0262581110 koza john 1992 genetic programming on the programming of computers by means of natural selection cambridge ma mit press isbn 160 978 0262111706 michalewicz zbigniew 1996 genetic algorithms data structures evolution programs springer verlag isbn 160 978 3540606765 mitchell melanie 1996 an introduction to genetic algorithms cambridge ma mit press isbn 160 9780585030944 poli r langdon w b mcphee n f 2008 a field guide to genetic programming lulu com freely available from the internet isbn 160 978 1 4092 0073 4 rechenberg ingo 1994 evolutionsstrategie 94 stuttgart fromman holzboog schmitt lothar m nehaniv chrystopher l fujii robert h 1998 linear analysis of genetic algorithms theoretical computer science 208 111 148 schmitt lothar m 2001 theory of genetic algorithms theoretical computer science 259 1 61 schmitt lothar m 2004 theory of genetic algorithms ii models for genetic operators over the string tensor representation of populations and convergence to global optima for arbitrary fitness function under scaling theoretical computer science 310 181 231 schwefel hans paul 1974 numerische optimierung von computer modellen phd thesis reprinted by birkh user 1977 vose michael 1999 the simple genetic algorithm foundations and theory cambridge ma mit press isbn 160 978 0262220583 whitley darrell 1994 a genetic algorithm tutorial statistics and computing 4 2 65 85 doi 10 1007 bf00175354 hingston philip barone luigi michalewicz zbigniew 2008 design by evolution advances in evolutionary design springer isbn 160 978 3540741091 eiben agoston smith james 2003 introduction to evolutionary computing springer isbn 160 978 3540401841 edit external links this article s use of external links may not follow wikipedia s policies or guidelines please improve this article by removing excessive or inappropriate external links and converting useful links where appropriate into footnote references january 2010 edit resources digitalbiology net vertical search engine for ga gp resources genetic algorithms index the site genetic programming notebook provides a structured resource pointer to web pages in genetic algorithms field edit tutorials genetic algorithms computer programs that evolve in ways that resemble natural selection can solve complex problems even their creators do not fully understand an excellent introduction to ga by john holland and with an application to the prisoner s dilemma an online interactive ga demonstrator to practise or learn how a ga works learn step by step or watch global convergence in batch change population size crossover rate mutation rate and selection mechanism and add constraints a genetic algorithm tutorial by darrell whitley computer science department colorado state university an excellent tutorial with lots of theory essentials of metaheuristics 2009 225 p free open text by sean luke global optimization algorithms theory and application edit examples introduction to genetic algorithms with interactive java applets for experimenting with gas online cross discipline example applications for gas with references an interactive applet featuring evolving vehicles v t e metaheuristics for combinatorial problems genetic algorithm simulated annealing ant colony optimization local search genetic programming v t e metaheuristics for real valued problems genetic algorithm evolutionary programming particle swarm optimization differential evolution cma es local search v t e major subfields of optimization convex programming integer programming quadratic programming nonlinear programming stochastic programming robust optimization combinatorial optimization infinite dimensional optimization metaheuristics constraint satisfaction multiobjective optimization 