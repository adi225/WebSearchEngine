computational complexity theory is a branch of the theory of computation in theoretical computer science and mathematics that focuses on classifying computational problems according to their inherent difficulty and relating those classes to each other in this context a computational problem is understood to be a task that is in principle amenable to being solved by a computer i e the problem can be stated by a set of mathematical instructions informally a computational problem consists of problem instances and solutions to these problem instances for example primality testing is the problem of determining whether a given number is prime or not the instances of this problem are natural numbers and the solution to an instance is yes or no based on whether the number is prime or not a problem is regarded as inherently difficult if its solution requires significant resources whatever the algorithm used the theory formalizes this intuition by introducing mathematical models of computation to study these problems and quantifying the amount of resources needed to solve them such as time and storage other complexity measures are also used such as the amount of communication used in communication complexity the number of gates in a circuit used in circuit complexity and the number of processors used in parallel computing one of the roles of computational complexity theory is to determine the practical limits on what computers can and cannot do closely related fields in theoretical computer science are analysis of algorithms and computability theory a key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem more precisely it tries to classify problems that can or cannot be solved with appropriately restricted resources in turn imposing restrictions on the available resources is what distinguishes computational complexity from computability theory the latter theory asks what kind of problems can in principle be solved algorithmically contents 1 computational problems 1 1 problem instances 1 2 representing problem instances 1 3 decision problems as formal languages 1 4 function problems 1 5 measuring the size of an instance 2 machine models and complexity measures 2 1 turing machine 2 2 other machine models 2 3 complexity measures 2 4 best worst and average case complexity 2 5 upper and lower bounds on the complexity of problems 3 complexity classes 3 1 defining complexity classes 3 2 important complexity classes 3 3 hierarchy theorems 3 4 reduction 4 important open problems 4 1 p versus np problem 4 2 problems in np not known to be in p or np complete 4 3 separations between other complexity classes 5 intractability 6 continuous complexity theory 7 history 8 see also 9 notes 10 references 10 1 textbooks 10 2 surveys 11 external links edit computational problems an optimal traveling salesperson tour through germany s 15 largest cities it is the shortest among 43 589 145 600 nb 1 possible tours visiting each city exactly once edit problem instances a computational problem can be viewed as an infinite collection of instances together with a solution for every instance the input string for a computational problem is referred to as a problem instance and should not be confused with the problem itself in computational complexity theory a problem refers to the abstract question to be solved in contrast an instance of this problem is a rather concrete utterance which can serve as the input for a decision problem for example consider the problem of primality testing the instance is a number e g 15 and the solution is yes if the number is prime and no otherwise in this case no stated another way the instance is a particular input to the problem and the solution is the output corresponding to the given input to further highlight the difference between a problem and an instance consider the following instance of the decision version of the traveling salesman problem is there a route of at most 2000 kilometres in length passing through all of germany s 15 largest cities the quantitative answer to this particular problem instance is of little use for solving other instances of the problem such as asking for a round trip through all sites in milan whose total length is at most 10 160 km for this reason complexity theory addresses computational problems and not particular problem instances edit representing problem instances when considering computational problems a problem instance is a string over an alphabet usually the alphabet is taken to be the binary alphabet i e the set 0 1 and thus the strings are bitstrings as in a real world computer mathematical objects other than bitstrings must be suitably encoded for example integers can be represented in binary notation and graphs can be encoded directly via their adjacency matrices or by encoding their adjacency lists in binary even though some proofs of complexity theoretic theorems regularly assume some concrete choice of input encoding one tries to keep the discussion abstract enough to be independent of the choice of encoding this can be achieved by ensuring that different representations can be transformed into each other efficiently edit decision problems as formal languages a decision problem has only two possible outputs yes or no or alternately 1 or 0 on any input decision problems are one of the central objects of study in computational complexity theory a decision problem is a special type of computational problem whose answer is either yes or no or alternately either 1 or 0 a decision problem can be viewed as a formal language where the members of the language are instances whose answer is yes and the non members are those instances whose output is no the objective is to decide with the aid of an algorithm whether a given input string is a member of the formal language under consideration if the algorithm deciding this problem returns the answer yes the algorithm is said to accept the input string otherwise it is said to reject the input an example of a decision problem is the following the input is an arbitrary graph the problem consists in deciding whether the given graph is connected or not the formal language associated with this decision problem is then the set of all connected graphs of course to obtain a precise definition of this language one has to decide how graphs are encoded as binary strings edit function problems a function problem is a computational problem where a single output of a total function is expected for every input but the output is more complex than that of a decision problem that is it isn t just yes or no notable examples include the traveling salesman problem and the integer factorization problem it is tempting to think that the notion of function problems is much richer than the notion of decision problems however this is not really the case since function problems can be recast as decision problems for example the multiplication of two integers can be expressed as the set of triples a 160 b 160 c such that the relation a 160 160 b 160 160 c holds deciding whether a given triple is member of this set corresponds to solving the problem of multiplying two numbers similarly finding the minimum value of a mathematical function f x is equivalent to a search on k for the problem of determining whether a feasible point exists for f x k edit measuring the size of an instance to measure the difficulty of solving a computational problem one may wish to see how much time the best algorithm requires to solve the problem however the running time may in general depend on the instance in particular larger instances will require more time to solve thus the time required to solve a problem or the space required or any measure of complexity is calculated as function of the size of the instance this is usually taken to be the size of the input in bits complexity theory is interested in how algorithms scale with an increase in the input size for instance in the problem of finding whether a graph is connected how much more time does it take to solve a problem for a graph with 2 n vertices compared to the time taken for a graph with n vertices if the input size is n the time taken can be expressed as a function of n since the time taken on different inputs of the same size can be different the worst case time complexity t n is defined to be the maximum time taken over all inputs of size n if t n is a polynomial in n then the algorithm is said to be a polynomial time algorithm cobham s thesis says that a problem can be solved with a feasible amount of resources if it admits a polynomial time algorithm edit machine models and complexity measures edit turing machine an artistic representation of a turing machine main article turing machine a turing machine is a mathematical model of a general computing machine it is a theoretical device that manipulates symbols contained on a strip of tape turing machines are not intended as a practical computing technology but rather as a thought experiment representing a computing machine anything from an advanced supercomputer to a mathematician with a pencil and paper it is believed that if a problem can be solved by an algorithm there exists a turing machine that solves the problem indeed this is the statement of the church turing thesis furthermore it is known that everything that can be computed on other models of computation known to us today such as a ram machine conway s game of life cellular automata or any programming language can be computed on a turing machine since turing machines are easy to analyze mathematically and are believed to be as powerful as any other model of computation the turing machine is the most commonly used model in complexity theory many types of turing machines are used to define complexity classes such as deterministic turing machines probabilistic turing machines non deterministic turing machines quantum turing machines symmetric turing machines and alternating turing machines they are all equally powerful in principle but when resources such as time or space are bounded some of these may be more powerful than others a deterministic turing machine is the most basic turing machine which uses a fixed set of rules to determine its future actions a probabilistic turing machine is a deterministic turing machine with an extra supply of random bits the ability to make probabilistic decisions often helps algorithms solve problems more efficiently algorithms that use random bits are called randomized algorithms a non deterministic turing machine is a deterministic turing machine with an added feature of non determinism which allows a turing machine to have multiple possible future actions from a given state one way to view non determinism is that the turing machine branches into many possible computational paths at each step and if it solves the problem in any of these branches it is said to have solved the problem clearly this model is not meant to be a physically realizable model it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes for examples see nondeterministic algorithm edit other machine models many machine models different from the standard multi tape turing machines have been proposed in the literature for example random access machines perhaps surprisingly each of these models can be converted to another without providing any extra computational power the time and memory consumption of these alternate models may vary 1 what all these models have in common is that the machines operate deterministically however some computational problems are easier to analyze in terms of more unusual resources for example a nondeterministic turing machine is a computational model that is allowed to branch out to check many different possibilities at once the nondeterministic turing machine has very little to do with how we physically want to compute algorithms but its branching exactly captures many of the mathematical models we want to analyze so that nondeterministic time is a very important resource in analyzing computational problems edit complexity measures for a precise definition of what it means to solve a problem using a given amount of time and space a computational model such as the deterministic turing machine is used the time required by a deterministic turing machine m on input x is the total number of state transitions or steps the machine makes before it halts and outputs the answer yes or no a turing machine m is said to operate within time f n if the time required by m on each input of length n is at most f n a decision problem a can be solved in time f n if there exists a turing machine operating in time f n that solves the problem since complexity theory is interested in classifying problems based on their difficulty one defines sets of problems based on some criteria for instance the set of problems solvable within time f n on a deterministic turing machine is then denoted by dtime f n analogous definitions can be made for space requirements although time and space are the most well known complexity resources any complexity measure can be viewed as a computational resource complexity measures are very generally defined by the blum complexity axioms other complexity measures used in complexity theory include communication complexity circuit complexity and decision tree complexity edit best worst and average case complexity visualization of the quicksort algorithm that has average case performance the best worst and average case complexity refer to three different ways of measuring the time complexity or any other complexity measure of different inputs of the same size since some inputs of size n may be faster to solve than others we define the following complexities best case complexity this is the complexity of solving the problem for the best input of size n worst case complexity this is the complexity of solving the problem for the worst input of size n average case complexity this is the complexity of solving the problem on an average this complexity is only defined with respect to a probability distribution over the inputs for instance if all inputs of the same size are assumed to be equally likely to appear the average case complexity can be defined with respect to the uniform distribution over all inputs of size n for example consider the deterministic sorting algorithm quicksort this solves the problem of sorting a list of integers that is given as the input the worst case is when the input is sorted or sorted in reverse order and the algorithm takes time o n 2 for this case if we assume that all possible permutations of the input list are equally likely the average time taken for sorting is o n log n the best case occurs when each pivoting divides the list in half also needing o n log n time edit upper and lower bounds on the complexity of problems to classify the computation time or similar resources such as space consumption one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem the complexity of an algorithm is usually taken to be its worst case complexity unless specified otherwise analyzing a particular algorithm falls under the field of analysis of algorithms to show an upper bound t n on the time complexity of a problem one needs to show only that there is a particular algorithm with running time at most t n however proving lower bounds is much more difficult since lower bounds make a statement about all possible algorithms that solve a given problem the phrase all possible algorithms includes not just the algorithms known today but any algorithm that might be discovered in the future to show a lower bound of t n for a problem requires showing that no algorithm can have time complexity lower than t n upper and lower bounds are usually stated using the big o notation which hides constant factors and smaller terms this makes the bounds independent of the specific details of the computational model used for instance if t n 160 160 7 n 2 160 160 15 n 160 160 40 in big o notation one would write t n 160 160 o n 2 edit complexity classes edit defining complexity classes a complexity class is a set of problems of related complexity simpler complexity classes are defined by the following factors the type of computational problem the most commonly used problems are decision problems however complexity classes can be defined based on function problems counting problems optimization problems promise problems etc the model of computation the most common model of computation is the deterministic turing machine but many complexity classes are based on nondeterministic turing machines boolean circuits quantum turing machines monotone circuits etc the resource or resources that are being bounded and the bounds these two properties are usually stated together such as polynomial time logarithmic space constant depth etc of course some complexity classes have complex definitions that do not fit into this framework thus a typical complexity class has a definition like the following the set of decision problems solvable by a deterministic turing machine within time f n this complexity class is known as dtime f n but bounding the computation time above by some concrete function f n often yields complexity classes that depend on the chosen machine model for instance the language xx x is any binary string can be solved in linear time on a multi tape turing machine but necessarily requires quadratic time in the model of single tape turing machines if we allow polynomial variations in running time cobham edmonds thesis states that the time complexities in any two reasonable and general models of computation are polynomially related goldreich 2008 chapter 1 2 this forms the basis for the complexity class p which is the set of decision problems solvable by a deterministic turing machine within polynomial time the corresponding set of function problems is fp edit important complexity classes a representation of the relation among complexity classes many important complexity classes can be defined by bounding the time or space used by the algorithm some important complexity classes of decision problems defined in this manner are the following complexity class model of computation resource constraint dtime f n deterministic turing machine time f n p deterministic turing machine time poly n exptime deterministic turing machine time 2 poly n ntime f n non deterministic turing machine time f n np non deterministic turing machine time poly n nexptime non deterministic turing machine time 2 poly n dspace f n deterministic turing machine space f n l deterministic turing machine space o log n pspace deterministic turing machine space poly n expspace deterministic turing machine space 2 poly n nspace f n non deterministic turing machine space f n nl non deterministic turing machine space o log n npspace non deterministic turing machine space poly n nexpspace non deterministic turing machine space 2 poly n it turns out that pspace npspace and expspace nexpspace by savitch s theorem other important complexity classes include bpp zpp and rp which are defined using probabilistic turing machines ac and nc which are defined using boolean circuits and bqp and qma which are defined using quantum turing machines p is an important complexity class of counting problems not decision problems classes like ip and am are defined using interactive proof systems all is the class of all decision problems edit hierarchy theorems main articles time hierarchy theorem and space hierarchy theorem for the complexity classes defined in this way it is desirable to prove that relaxing the requirements on say computation time indeed defines a bigger set of problems in particular although dtime n is contained in dtime n 2 it would be interesting to know if the inclusion is strict for time and space requirements the answer to such questions is given by the time and space hierarchy theorems respectively they are called hierarchy theorems because they induce a proper hierarchy on the classes defined by constraining the respective resources thus there are pairs of complexity classes such that one is properly included in the other having deduced such proper set inclusions we can proceed to make quantitative statements about how much more additional time or space is needed in order to increase the number of problems that can be solved more precisely the time hierarchy theorem states that the space hierarchy theorem states that the time and space hierarchy theorems form the basis for most separation results of complexity classes for instance the time hierarchy theorem tells us that p is strictly contained in exptime and the space hierarchy theorem tells us that l is strictly contained in pspace edit reduction main article reduction complexity many complexity classes are defined using the concept of a reduction a reduction is a transformation of one problem into another problem it captures the informal notion of a problem being at least as difficult as another problem for instance if a problem x can be solved using an algorithm for y x is no more difficult than y and we say that x reduces to y there are many different types of reductions based on the method of reduction such as cook reductions karp reductions and levin reductions and the bound on the complexity of reductions such as polynomial time reductions or log space reductions the most commonly used reduction is a polynomial time reduction this means that the reduction process takes polynomial time for example the problem of squaring an integer can be reduced to the problem of multiplying two integers this means an algorithm for multiplying two integers can be used to square an integer indeed this can be done by giving the same input to both inputs of the multiplication algorithm thus we see that squaring is not more difficult than multiplication since squaring can be reduced to multiplication this motivates the concept of a problem being hard for a complexity class a problem x is hard for a class of problems c if every problem in c can be reduced to x thus no problem in c is harder than x since an algorithm for x allows us to solve any problem in c of course the notion of hard problems depends on the type of reduction being used for complexity classes larger than p polynomial time reductions are commonly used in particular the set of problems that are hard for np is the set of np hard problems if a problem x is in c and hard for c then x is said to be complete for c this means that x is the hardest problem in c since many problems could be equally hard one might say that x is one of the hardest problems in c thus the class of np complete problems contains the most difficult problems in np in the sense that they are the ones most likely not to be in p because the problem p 160 160 np is not solved being able to reduce a known np complete problem 2 to another problem 1 would indicate that there is no known polynomial time solution for 1 this is because a polynomial time solution to 1 would yield a polynomial time solution to 2 similarly because all np problems can be reduced to the set finding an np complete problem that can be solved in polynomial time would mean that p 160 160 np 2 edit important open problems diagram of complexity classes provided that p 160 160 np the existence of problems in np outside both p and np complete in this case was established by ladner 3 edit p versus np problem main article p versus np problem the complexity class p is often seen as a mathematical abstraction modeling those computational tasks that admit an efficient algorithm this hypothesis is called the cobham edmonds thesis the complexity class np on the other hand contains many problems that people would like to solve efficiently but for which no efficient algorithm is known such as the boolean satisfiability problem the hamiltonian path problem and the vertex cover problem since deterministic turing machines are special nondeterministic turing machines it is easily observed that each problem in p is also member of the class np the question of whether p equals np is one of the most important open questions in theoretical computer science because of the wide implications of a solution 2 if the answer is yes many important problems can be shown to have more efficient solutions these include various types of integer programming problems in operations research many problems in logistics protein structure prediction in biology 4 and the ability to find formal proofs of pure mathematics theorems 5 the p versus np problem is one of the millennium prize problems proposed by the clay mathematics institute there is a us 1 000 000 prize for resolving the problem 6 edit problems in np not known to be in p or np complete it was shown by ladner that if p np then there exist problems in np that are neither in p nor np complete 3 such problems are called np intermediate problems the graph isomorphism problem the discrete logarithm problem and the integer factorization problem are examples of problems believed to be np intermediate they are some of the very few np problems not known to be in p or to be np complete the graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic an important unsolved problem in complexity theory is whether the graph isomorphism problem is in p np complete or np intermediate the answer is not known but it is believed that the problem is at least not np complete 7 if graph isomorphism is np complete the polynomial time hierarchy collapses to its second level 8 since it is widely believed that the polynomial hierarchy does not collapse to any finite level it is believed that graph isomorphism is not np complete the best algorithm for this problem due to laszlo babai and eugene luks has run time 2 o n log n for graphs with n vertices the integer factorization problem is the computational problem of determining the prime factorization of a given integer phrased as a decision problem it is the problem of deciding whether the input has a factor less than k no efficient integer factorization algorithm is known and this fact forms the basis of several modern cryptographic systems such as the rsa algorithm the integer factorization problem is in np and in co np and even in up and co up 9 if the problem is np complete the polynomial time hierarchy will collapse to its first level i e np will equal co np the best known algorithm for integer factorization is the general number field sieve which takes time o e 64 9 1 3 n log 2 1 3 log n log 2 2 3 to factor an n bit integer however the best known quantum algorithm for this problem shor s algorithm does run in polynomial time unfortunately this fact doesn t say much about where the problem lies with respect to non quantum complexity classes edit separations between other complexity classes many known complexity classes are suspected to be unequal but this has not been proved for instance p np pp pspace but it is possible that p pspace if p is not equal to np then p is not equal to pspace either since there are many known complexity classes between p and pspace such as rp bpp pp bqp ma ph etc it is possible that all these complexity classes collapse to one class proving that any of these classes are unequal would be a major breakthrough in complexity theory along the same lines co np is the class containing the complement problems i e problems with the yes no answers reversed of np problems it is believed 10 that np is not equal to co np however it has not yet been proven it has been shown that if these two complexity classes are not equal then p is not equal to np similarly it is not known if l the set of all problems that can be solved in logarithmic space is strictly contained in p or equal to p again there are many complexity classes between the two such as nl and nc and it is not known if they are distinct or equal classes it is suspected that p and bpp are equal however it is currently open if bpp nexp edit intractability see also combinatorial explosion problems that can be solved in theory e g given infinite time but which in practice take too long for their solutions to be useful are known as intractable problems 11 in complexity theory problems that lack polynomial time solutions are considered to be intractable for more than the smallest inputs in fact the cobham edmonds thesis states that only those problems that can be solved in polynomial time can be feasibly computed on some computational device problems that are known to be intractable in this sense include those that are exptime hard if np is not the same as p then the np complete problems are also intractable in this sense to see why exponential time algorithms might be unusable in practice consider a program that makes 2 n operations before halting for small n say 100 and assuming for the sake of example that the computer does 10 12 operations each second the program would run for about 4 160 160 10 10 years which is roughly the age of the universe even with a much faster computer the program would only be useful for very small instances and in that sense the intractability of a problem is somewhat independent of technological progress nevertheless a polynomial time algorithm is not always practical if its running time is say n 15 it is unreasonable to consider it efficient and it is still useless except on small instances what intractability means in practice is open to debate saying that a problem is not in p does not imply that all large cases of the problem are hard or even that most of them are for example the decision problem in presburger arithmetic has been shown not to be in p yet algorithms have been written that solve the problem in reasonable times in most cases similarly algorithms can solve the np complete knapsack problem over a wide range of sizes in less than quadratic time and sat solvers routinely handle large instances of the np complete boolean satisfiability problem edit continuous complexity theory continuous complexity theory can refer to complexity theory of problems that involve continuous functions that are approximated by discretizations as studied in numerical analysis one approach to complexity theory of numerical analysis 12 is information based complexity continuous complexity theory can also refer to complexity theory of the use of analog computation which uses continuous dynamical systems and differential equations 13 control theory can be considered a form of computation and differential equations are used in the modelling of continuous time and hybrid discrete continuous time systems 14 edit history the analysis of algorithms has been studied long before the invention of computers gabriel lam gave a running time analysis of the euclidean algorithm in 1844 before the actual research explicitly devoted to the complexity of algorithmic problems started off numerous foundations were laid out by various researchers most influential among these was the definition of turing machines by alan turing in 1936 which turned out to be a very robust and flexible notion of computer fortnow amp homer 2003 date the beginning of systematic studies in computational complexity to the seminal paper on the computational complexity of algorithms by juris hartmanis and richard stearns 1965 which laid out the definitions of time and space complexity and proved the hierarchy theorems also in 1965 edmonds defined a good algorithm as one with running time bounded by a polynomial of the input size 15 according to fortnow amp homer 2003 earlier papers studying problems solvable by turing machines with specific bounded resources include john myhill s definition of linear bounded automata myhill 1960 raymond smullyan s study of rudimentary sets 1961 as well as hisao yamada s paper 16 on real time computations 1962 somewhat earlier boris trakhtenbrot 1956 a pioneer in the field from the ussr studied another specific complexity measure 17 as he remembers however my initial interest in automata theory was increasingly set aside in favor of computational complexity an exciting fusion of combinatorial methods inherited from switching theory with the conceptual arsenal of the theory of algorithms these ideas had occurred to me earlier in 1955 when i coined the term signalizing function which is nowadays commonly known as complexity measure boris trakhtenbrot 160 from logic to theoretical computer science an update in pillars of computer science lncs 4800 springer 2008 in 1967 manuel blum developed an axiomatic complexity theory based on his axioms and proved an important result the so called speed up theorem the field really began to flourish in 1971 when the us researcher stephen cook and working independently leonid levin in the ussr proved that there exist practically relevant problems that are np complete in 1972 richard karp took this idea a leap forward with his landmark paper reducibility among combinatorial problems in which he showed that 21 diverse combinatorial and graph theoretical problems each infamous for its computational intractability are np complete 18 edit see also relationship between computability theory complexity theory and formal language theory list of computability and complexity topics list of important publications in theoretical computer science unsolved problems in computer science category computational problems list of complexity classes structural complexity theory descriptive complexity theory quantum complexity theory context of computational complexity parameterized complexity game complexity proof complexity transcomputational problem edit notes take one city and take all possible orders of the other 14 cities then divide by two because it does not matter in which direction in time they come after each other 14 2 43 589 145 600 edit references see arora amp barak 2009 chapter 1 the computational model and why it doesn t matter a b see sipser 2006 chapter 7 time complexity a b ladner richard e 1975 on the structure of polynomial time reducibility pdf journal of the acm jacm 22 1 151 171 doi 10 1145 321864 321877 http delivery acm org 10 1145 330000 321877 p155 ladner pdf key1 321877 amp key2 7146531911 amp coll amp dl acm amp cfid 15151515 amp cftoken 6184618 berger bonnie a leighton t 1998 protein folding in the hydrophobic hydrophilic hp model is np complete journal of computational biology 5 1 p27 40 doi 10 1089 cmb 1998 5 27 pmid 160 9541869 cook stephen april 2000 the p versus np problem clay mathematics institute http www claymath org millennium p vs np official problem description pdf retrieved 2006 10 18 jaffe arthur m 2006 the millennium grand challenge in mathematics notices of the ams 53 6 http www ams org notices 200606 fea jaffe pdf retrieved 2006 10 18 arvind vikraman kurur piyush p 2006 graph isomorphism is in spp information and computation 204 5 835 852 doi 10 1016 j ic 2006 02 002 uwe sch ning graph isomorphism is in the low hierarchy proceedings of the 4th annual symposium on theoretical aspects of computer science 1987 114 124 also journal of computer and system sciences vol 37 1988 312 323 lance fortnow computational complexity blog complexity class of the week factoring september 13 2002 http weblog fortnow com 2002 09 complexity class of week factoring html boaz barak s course on computational complexity lecture 2 hopcroft j e motwani r and ullman j d 2007 introduction to automata theory languages and computation addison wesley boston san francisco new york page 368 smale steve 1997 complexity theory and numerical analysis acta numerica cambridge univ press citeseerx 10 1 1 33 4678 a survey on continuous time computations olivier bournez manuel campagnolo new computational paradigms changing conceptions of what is computable cooper s b and l o we b and sorbi a eds new york springer verlag pages 383 423 2008 tomlin claire j mitchell ian bayen alexandre m oishi meeko july 2003 computational techniques for the verification of hybrid systems proceedings of the ieee 91 7 citeseerx 10 1 1 70 4296 richard m karp combinatorics complexity and randomness 1985 turing award lecture yamada h 1962 real time computation and recursive functions not real time computable ieee transactions on electronic computers ec 11 6 753 760 doi 10 1109 tec 1962 5219459 edit trakhtenbrot b a signalizing functions and tabular operators uchionnye zapiski penzenskogo pedinstituta transactions of the penza pedagogoical institute 4 75 87 1956 in russian richard m karp 1972 reducibility among combinatorial problems in r e miller and j w thatcher editors complexity of computer computations new york plenum pp 160 85 103 http www cs berkeley edu luca cs172 karp pdf edit textbooks arora sanjeev barak boaz 2009 computational complexity a modern approach cambridge isbn 160 978 0 521 42426 4 zbl 160 1193 68112 http www cs princeton edu theory complexity downey rod fellows michael 1999 parameterized complexity berlin new york springer verlag http www springer com sgw cda frontpage 0 11855 5 0 22 1519914 0 00 html referer www springer de 2fcgi bin 2fsearch book pl 3fisbn 3d0 387 94883 x du ding zhu ko ker i 2000 theory of computational complexity john wiley amp sons isbn 160 978 0 471 34506 0 goldreich oded 2008 computational complexity a conceptual perspective cambridge university press http www wisdom weizmann ac il oded cc book html van leeuwen jan ed 1990 handbook of theoretical computer science vol a algorithms and complexity mit press isbn 160 978 0 444 88071 0 papadimitriou christos 1994 computational complexity 1st ed addison wesley isbn 160 0 201 53082 1 sipser michael 2006 introduction to the theory of computation 2nd ed usa thomson course technology isbn 160 0 534 95097 3 garey michael r johnson david s 1979 computers and intractability a guide to the theory of np completeness w 160 h 160 freeman isbn 160 0 7167 1045 5 edit surveys khalil hatem ulery dana 1976 a review of current studies on complexity of algorithms for partial differential equations acm 76 proceedings of the 1976 annual conference pp 160 197 doi 10 1145 800191 805573 http portal acm org citation cfm id 800191 805573 cook stephen 1983 an overview of computational complexity commun acm acm 26 6 400 408 doi 10 1145 358141 358144 issn 160 0001 0782 fortnow lance homer steven 2003 a short history of computational complexity bulletin of the eatcs 80 95 133 http people cs uchicago edu fortnow papers history pdf mertens stephan 2002 computational complexity for physicists computing in science and engg piscataway nj usa ieee educational activities department 4 3 31 47 arxiv cond mat 0012185 doi 10 1109 5992 998639 issn 160 1521 9615 edit external links the complexity zoo v t e important complexity classes more considered feasible dlogtime ac 0 acc 0 tc 0 l sl rl nl nc sc cc p p complete zpp rp bpp bqp suspected infeasible up np np complete np hard co np co np complete am ph pp p p complete ip pspace pspace complete considered infeasible exptime nexptime expspace elementary pr r re all class hierarchies polynomial hierarchy exponential hierarchy grzegorczyk hierarchy arithmetic hierarchy boolean hierarchy families of classes dtime ntime dspace nspace probabilistically checkable proof interactive proof system 