object oriented programming language redirects here for a list of object oriented programming languages see list of object oriented programming languages programming paradigms action agent oriented aspect oriented automata based component based flow based pipelined concatenative concurrent computing relativistic programming data driven declarative contrast imperative constraint dataflow cell oriented spreadsheets reactive intensional functional logic abductive logic answer set constraint logic functional logic inductive logic end user programming event driven service oriented time driven expression oriented feature oriented function level contrast value level generic imperative contrast declarative procedural language oriented discipline specific domain specific grammar oriented dialecting intentional metaprogramming automatic reflective attribute oriented homoiconic template policy based non structured contrast structured array nondeterministic parallel computing process oriented programming in the large and small semantic structured contrast non structured modular contrast monolithic object oriented by separation of concerns aspect oriented role oriented subject oriented class based prototype based recursive value level contrast function level v t e object oriented programming oop is a programming paradigm that represents concepts as objects that have data fields attributes that describe the object and associated procedures known as methods objects which are usually instances of classes are used to interact with one another to design applications and computer programs 1 2 contents 1 overview 2 history 3 fundamental features and concepts 3 1 decoupling 4 additional features 5 formal semantics 6 oop languages 6 1 oop in dynamic languages 7 design patterns 7 1 inheritance and behavioral subtyping 7 2 gang of four design patterns 7 3 object orientation and databases 7 4 real world modeling and relationships 7 5 oop and control flow 7 6 responsibility vs data driven design 8 criticism 9 object oriented programming code gallery 10 see also 11 references 12 further reading 13 external links edit overview this section needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed june 2012 an object oriented program may be viewed as a collection of interacting objects as opposed to the conventional model in which a program is seen as a list of tasks subroutines to perform in oop each object is capable of receiving messages processing data and sending messages to other objects each object can be viewed as an independent machine with a distinct role or responsibility the actions or methods on these objects are closely associated with the object for example oop data structures tend to carry their own operators around with them or at least inherit them from a similar object or class except when they have to be serialized simple non oop programs may be one long list of statements or commands more complex programs will often group smaller sections of these statements into functions or subroutines each of which might perform a particular task with designs of this sort it is common for some of the program s data to be global i e accessible from any part of the program as programs grow in size allowing any function to modify any piece of data means that bugs can have wide reaching effects in contrast the object oriented approach encourages the programmer to place data where it is not directly accessible by the rest of the program instead the data is accessed by calling specially written functions commonly called methods which are bundled in with the data these act as the intermediaries for retrieving or modifying the data they control the programming construct that combines data with a set of methods for accessing and managing those data is called an object the practice of using subroutines to examine or modify certain kinds of data was also used in non oop modular programming well before the widespread use of object oriented programming an object oriented program will usually contain different types of objects each type corresponding to a particular kind of complex data to be managed or perhaps to a real world object or concept such as a bank account a hockey player or a bulldozer a program might well contain multiple copies of each type of object one for each of the real world objects the program is dealing with for instance there could be one bank account object for each real world account at a particular bank each copy of the bank account object would be alike in the methods it offers for manipulating or reading its data but the data inside each object would differ reflecting the different history of each account objects can be thought of as wrapping their data within a set of functions designed to ensure that the data are used appropriately and to assist in that use the object s methods will typically include checks and safeguards that are specific to the types of data the object contains an object can also offer simple to use standardized methods for performing particular operations on its data while concealing the specifics of how those tasks are accomplished in this way alterations can be made to the internal structure or methods of an object without requiring that the rest of the program be modified this approach can also be used to offer standardized methods across different types of objects as an example several different types of objects might offer print methods each type of object might implement that print method in a different way reflecting the different kinds of data each contains but all the different print methods might be called in the same standardized manner from elsewhere in the program these features become especially useful when more than one programmer is contributing code to a project or when the goal is to reuse code between projects object oriented programming has roots that can be traced to the 1960s as hardware and software became increasingly complex manageability often became a concern researchers studied ways to maintain software quality and developed object oriented programming in part to address common problems by strongly emphasizing discrete reusable units of programming logic citation needed the technology focuses on data rather than processes with programs composed of self sufficient modules classes each instance of which objects contains all the information needed to manipulate its own data structure members this is in contrast to the existing modular programming that had been dominant for many years that focused on the function of a module rather than specifically the data but equally provided for code reuse and self sufficient reusable units of programming logic enabling collaboration through the use of linked modules subroutines edit history the terms objects and oriented in something like the modern sense of object oriented programming seem to make their first appearance at mit in the late 1950s and early 1960s in the environment of the artificial intelligence group as early as 1960 object could refer to identified items lisp atoms with properties attributes 3 4 alan kay was later to cite a detailed understanding of lisp internals as a strong influence on his thinking in 1966 5 another early mit example was sketchpad created by ivan sutherland in 1960 61 in the glossary of the 1963 technical report based on his dissertation about sketchpad sutherland defined notions of object and instance with the class concept covered by master or definition albeit specialized to graphical interaction 6 also an mit algol version aed 0 linked data structures plexes in that dialect directly with procedures prefiguring what were later termed messages methods and member functions 7 8 objects as a formal concept in programming were introduced in the 1960s in simula 67 a major revision of simula i a programming language designed for discrete event simulation created by ole johan dahl and kristen nygaard of the norwegian computing center in oslo 9 simula 67 was influenced by simscript and c a r tony hoare s proposed record classes 7 10 simula introduced the notion of classes and instances or objects as well as subclasses virtual methods coroutines and discrete event simulation as part of an explicit programming paradigm the language also used automatic garbage collection that had been invented earlier for the functional programming language lisp simula was used for physical modeling such as models to study and improve the movement of ships and their content through cargo ports the ideas of simula 67 influenced many later languages including smalltalk derivatives of lisp clos object pascal and c the smalltalk language which was developed at xerox parc by alan kay and others in the 1970s introduced the term object oriented programming to represent the pervasive use of objects and messages as the basis for computation smalltalk creators were influenced by the ideas introduced in simula 67 but smalltalk was designed to be a fully dynamic system in which classes could be created and modified dynamically rather than statically as in simula 67 11 smalltalk and with it oop were introduced to a wider audience by the august 1981 issue of byte magazine in the 1970s kay s smalltalk work had influenced the lisp community to incorporate object based techniques that were introduced to developers via the lisp machine experimentation with various extensions to lisp like loops and flavors introducing multiple inheritance and mixins eventually led to the common lisp object system clos a part of the first standardized object oriented programming language ansi common lisp which integrates functional programming and object oriented programming and allows extension via a meta object protocol in the 1980s there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful examples include the intel iapx 432 and the linn smart rekursiv in 1985 bertrand meyer produced the first design of the eiffel language focused on software quality eiffel is among the purely object oriented languages but differs in the sense that the language itself is not only a programming language but a notation supporting the entire software lifecycle meyer described the eiffel software development method based on a small number of key ideas from software engineering and computer science in object oriented software construction essential to the quality focus of eiffel is meyer s reliability mechanism design by contract which is an integral part of both the method and language object oriented programming developed as the dominant programming methodology in the early and mid 1990s when programming languages supporting the techniques became widely available these included visual foxpro 3 0 12 13 14 c citation needed and delphi citation needed its dominance was further enhanced by the rising popularity of graphical user interfaces which rely heavily upon object oriented programming techniques an example of a closely related dynamic gui library and oop language can be found in the cocoa frameworks on mac os x written in objective c an object oriented dynamic messaging extension to c based on smalltalk oop toolkits also enhanced the popularity of event driven programming although this concept is not limited to oop some who feel that association with guis real or perceived was what propelled oop into the programming mainstream at eth z rich niklaus wirth and his colleagues had also been investigating such topics as data abstraction and modular programming although this had been in common use in the 1960s or earlier modula 2 1978 included both and their succeeding design oberon included a distinctive approach to object orientation classes and such the approach is unlike how smalltalk and very unlike how c object oriented features have been added to many existing languages during that time including ada basic fortran pascal and others adding these features to languages that were not initially designed for them often led to problems with compatibility and maintainability of code more recently a number of languages have emerged that are primarily object oriented yet compatible with procedural methodology such as python and ruby probably the most commercially important recent object oriented languages are visual basic net vb net and c both designed for microsoft s net platform and java developed by sun microsystems both frameworks show the benefit of using oop by creating an abstraction from implementation in their own way vb net and c support cross language inheritance allowing classes defined in one language to subclass classes defined in the other language developers usually compile java to bytecode allowing java to run on any operating system for which a java virtual machine is available vb net and c make use of the strategy pattern to accomplish cross language inheritance whereas java makes use of the adapter pattern citation needed just as procedural programming led to refinements of techniques such as structured programming modern object oriented software design methods include refinements citation needed such as the use of design patterns design by contract and modeling languages such as uml edit fundamental features and concepts see also list of object oriented programming terms a survey by deborah j armstrong of nearly 40 years of computing literature identified a number of fundamental concepts found in the strong majority of definitions of oop 15 not all of these concepts are to be found in all object oriented programming languages for example object oriented programming that uses classes is sometimes called class based programming while prototype based programming does not typically use classes as a result a significantly different yet analogous terminology is used to define the concepts of object and instance benjamin c pierce and some other researchers view as futile any attempt to distill oop to a minimal set of features he nonetheless identifies fundamental features that support the oop programming style in most object oriented languages 16 dynamic dispatch when a method is invoked on an object the object itself determines what code gets executed by looking up the method at run time in a table associated with the object this feature distinguishes an object from an abstract data type or module which has a fixed static implementation of the operations for all instances it is a programming methodology that gives modular component development while at the same time being very efficient encapsulation or multi methods in which case the state is kept separate subtype polymorphism object inheritance or delegation open recursion a special variable syntactically it may be a keyword usually called this or self that allows a method body to invoke another method body of the same object this variable is late bound it allows a method defined in one class to invoke another method that is defined later in some subclass thereof similarly in his 2003 book concepts in programming languages john c mitchell identifies four main features dynamic dispatch abstraction subtype polymorphism and inheritance 17 michael lee scott in programming language pragmatics considers only encapsulation inheritance and dynamic dispatch 18 additional concepts used in object oriented programming include classes of objects instances of classes methods which act on the attached objects message passing abstraction edit decoupling decoupling refers to careful controls that separate code modules from particular use cases which increases code re usability a common use of decoupling in oop is to polymorphically decouple the encapsulation see bridge pattern and adapter pattern for example using a method interface which an encapsulated object must satisfy as opposed to using the object s class edit additional features encapsulation enforces modularity encapsulation is refers to the creation of self contained modules that bind processing functions to the data these user defined data types are called classes and one instance of a class is an object for example in a payroll system a class could be manager and pat and jan could be two instances two objects of the manager class encapsulation ensures good code modularity which keeps routines separate and less prone to conflict with each other inheritance passes knowledge down classes are created in hierarchies and inheritance allows the structure and methods in one class to be passed down the hierarchy that means less programming is required when adding functions to complex systems if a step is added at the bottom of a hierarchy then only the processing and data associated with that unique step needs to be added everything else about that step is inherited the ability to reuse existing objects is considered a major advantage of object technology polymorphism takes any shape object oriented programming allows procedures about objects to be created whose exact type is not known until runtime for example a screen cursor may change its shape from an arrow to a line depending on the program mode the routine to move the cursor on screen in response to mouse movement would be written for cursor and polymorphism allows that cursor to take on whatever shape is required at runtime it also allows new shapes to be easily integrated oop languages used for simulating system behavior in the late 1960s simula was the first object oriented language in the 1970s xerox s smalltalk was the first object oriented programming language and was used to create the graphical user interface gui today c and java are the major oop languages while c visual basic net python and javascript are also popular actor and eiffel were earlier oop languages edit formal semantics see also formal semantics of programming languages there have been several attempts at formalizing the concepts used in object oriented programming the following concepts and constructs have been used as interpretations of oop concepts coalgebraic data types 19 abstract data types which have existential types allow the definition of modules but these do not support dynamic dispatch recursive types encapsulated state inheritance records are basis for understanding objects if function literals can be stored in fields like in functional programming languages but the actual calculi need be considerably more complex to incorporate essential features of oop several extensions of system f lt that deal with mutable objects have been studied 20 these allow both subtype polymorphism and parametric polymorphism generics attempts to find a consensus definition or theory behind objects have not proven very successful however see abadi amp cardelli a theory of objects 20 for formal definitions of many oop concepts and constructs and often diverge widely for example some definitions focus on mental activities and some on program structuring one of the simpler definitions is that oop is the act of using map data structures or arrays that can contain functions and pointers to other maps all with some syntactic and scoping sugar on top inheritance can be performed by cloning the maps sometimes called prototyping object gt gt objects are the run time entities in an object oriented system they may represent a person a place a bank account a table of data or any item that the program has to handle edit oop languages this section does not cite any references or sources please help improve this section by adding citations to reliable sources unsourced material may be challenged and removed august 2009 see also list of object oriented programming languages simula 1967 is generally accepted as the first language to have the primary features of an object oriented language it was created for making simulation programs in which what came to be called objects were the most important information representation smalltalk 1972 to 1980 is arguably the canonical example and the one with which much of the theory of object oriented programming was developed concerning the degree of object orientation the following distinctions can be made languages called pure oo languages because everything in them is treated consistently as an object from primitives such as characters and punctuation all the way up to whole classes prototypes blocks modules etc they were designed specifically to facilitate even enforce oo methods examples eiffel emerald 21 jade obix ruby scala smalltalk languages designed mainly for oo programming but with some procedural elements examples c java c vb net python languages that are historically procedural languages but have been extended with some oo features examples visual basic derived from basic fortran perl cobol 2002 php abap languages with most of the features of objects classes methods inheritance reusability but in a distinctly original form examples oberon oberon 1 or oberon 2 and common lisp languages with abstract data type support but not all features of object orientation sometimes called object based languages examples modula 2 pliant clu edit oop in dynamic languages in recent years object oriented programming has become especially popular in dynamic programming languages python ruby and groovy are dynamic languages built on oop principles while perl and php have been adding object oriented features since perl 5 and php 4 and coldfusion since version 5 the document object model of html xhtml and xml documents on the internet has bindings to the popular javascript ecmascript language javascript is perhaps the best known prototype based programming language which employs cloning from prototypes rather than inheriting from a class another scripting language that takes this approach is lua earlier versions of actionscript a partial superset of the ecma 262 r3 otherwise known as ecmascript also used a prototype based object model edit design patterns challenges of object oriented design are addressed by several methodologies most common is known as the design patterns codified by gamma et al more broadly the term design patterns can be used to refer to any general repeatable solution to a commonly occurring problem in software design some of these commonly occurring problems have implications and solutions particular to object oriented development edit inheritance and behavioral subtyping see also object oriented design it is intuitive to assume that inheritance creates a semantic is a relationship and thus to infer that objects instantiated from subclasses can always be safely used instead of those instantiated from the superclass this intuition is unfortunately false in most oop languages in particular in all those that allow mutable objects subtype polymorphism as enforced by the type checker in oop languages with mutable objects cannot guarantee behavioral subtyping in any context behavioral subtyping is undecidable in general so it cannot be implemented by a program compiler class or object hierarchies need to be carefully designed considering possible incorrect uses that cannot be detected syntactically this issue is known as the liskov substitution principle edit gang of four design patterns main article design pattern computer science design patterns elements of reusable object oriented software is an influential book published in 1995 by erich gamma richard helm ralph johnson and john vlissides often referred to humorously as the gang of four along with exploring the capabilities and pitfalls of object oriented programming it describes 23 common programming problems and patterns for solving them as of april 2007 the book was in its 36th printing the book describes the following patterns creational patterns 5 factory method pattern abstract factory pattern singleton pattern builder pattern prototype pattern structural patterns 7 adapter pattern bridge pattern composite pattern decorator pattern facade pattern flyweight pattern proxy pattern behavioral patterns 11 chain of responsibility pattern command pattern interpreter pattern iterator pattern mediator pattern memento pattern observer pattern state pattern strategy pattern template method pattern visitor pattern edit object orientation and databases main articles object relational impedance mismatch object relational mapping and object database both object oriented programming and relational database management systems rdbmss are extremely common in software today update since relational databases don t store objects directly though some rdbmss have object oriented features to approximate this there is a general need to bridge the two worlds the problem of bridging object oriented programming accesses and data patterns with relational databases is known as object relational impedance mismatch there are a number of approaches to cope with this problem but no general solution without downsides 22 one of the most common approaches is object relational mapping as found in libraries like java data objects and ruby on rails activerecord there are also object databases that can be used to replace rdbmss but these have not been as technically and commercially successful as rdbmss edit real world modeling and relationships oop can be used to associate real world objects and processes with digital counterparts however not everyone agrees that oop facilitates direct real world mapping see negative criticism section or that real world mapping is even a worthy goal bertrand meyer argues in object oriented software construction 23 that a program is not a model of the world but a model of some part of the world reality is a cousin twice removed at the same time some principal limitations of oop had been noted 24 for example the circle ellipse problem is difficult to handle using oop s concept of inheritance however niklaus wirth who popularized the adage now known as wirth s law software is getting slower more rapidly than hardware becomes faster said of oop in his paper good ideas through the looking glass this paradigm closely reflects the structure of systems in the real world and it is therefore well suited to model complex systems with complex behaviours contrast kiss principle steve yegge and others noted that natural languages lack the oop approach of strictly prioritizing things objects nouns before actions methods verbs 25 this problem may cause oop to suffer more convoluted solutions than procedural programming 26 edit oop and control flow oop was developed to increase the reusability and maintainability of source code 27 transparent representation of the control flow had no priority and was meant to be handled by a compiler with the increasing relevance of parallel hardware and multithreaded coding developer transparent control flow becomes more important something hard to achieve with oop 28 29 30 31 edit responsibility vs data driven design responsibility driven design defines classes in terms of a contract that is a class should be defined around a responsibility and the information that it shares this is contrasted by wirfs brock and wilkerson with data driven design where classes are defined around the data structures that must be held the authors hold that responsibility driven design is preferable edit criticism a number of well known researchers and programmers have analysed the utility of oop here is an incomplete list luca cardelli wrote a paper titled bad engineering properties of object oriented languages 32 richard stallman wrote in 1995 adding oop to emacs is not clearly an improvement i used oop when working on the lisp machine window systems and i disagree with the usual view that it is a superior way to program 33 a study by potok et al 34 has shown no significant difference in productivity between oop and procedural approaches christopher j date stated that critical comparison of oop to other technologies relational in particular is difficult because of lack of an agreed upon and rigorous definition of oop 35 date and darwen 36 propose a theoretical foundation on oop that uses oop as a kind of customizable type system to support rdbms alexander stepanov suggested that oop provides a mathematically limited viewpoint and called it almost as much of a hoax as artificial intelligence i have yet to see an interesting piece of code that comes from these oo people in a sense i am unfair to ai i learned a lot of stuff from the mit ai lab crowd they have done some really fundamental work 37 paul graham has suggested that the purpose of oop is to act as a herding mechanism that keeps mediocre programmers in mediocre organizations from doing too much damage this is at the expense of slowing down productive programmers who know how to use more powerful and more compact techniques 38 joe armstrong the principal inventor of erlang is quoted as saying the problem with object oriented languages is they ve got all this implicit environment that they carry around with them you wanted a banana but what you got was a gorilla holding the banana and the entire jungle 39 richard mansfield author and former editor of compute magazine states that like countless other intellectual fads over the years relevance communism modernism and so on history is littered with them oop will be with us until eventually reality asserts itself but considering how oop currently pervades both universities and workplaces oop may well prove to be a durable delusion entire generations of indoctrinated programmers continue to march out of the academy committed to oop and nothing but oop for the rest of their lives 40 he also is quoted as saying oop is to writing a program what going through airport security is to flying 41 steve yegge making a roundabout comparison with functional programming writes object oriented programming puts the nouns first and foremost why would you go to such lengths to put one part of speech on a pedestal why should one kind of concept take precedence over another it s not as if oop has suddenly made verbs less important in the way we actually think it s a strangely skewed perspective 42 rich hickey creator of clojure described object systems as overly simplistic models of the real world he emphasized the inability of oop to model time properly which is getting increasingly problematic as software systems become more concurrent 43 carnegie mellon university professor robert harper in march 2011 wrote this semester dan licata and i are co teaching a new course on functional programming for first year prospective cs majors object oriented programming is eliminated entirely from the introductory curriculum because it is both anti modular and anti parallel by its very nature and hence unsuitable for a modern cs curriculum a proposed new course on object oriented design methodology will be offered at the sophomore level for those students who wish to study this topic 44 edit object oriented programming code gallery edit see also this article may be in need of reorganization to comply with wikipedia s layout guidelines please help by editing the article to make improvements to the overall structure november 2012 computer programming portal aspect oriented programming cades circle ellipse problem comparison of programming languages object oriented programming comparison of programming paradigms component based software engineering concurrent object oriented programming constructor overloading corba dcom design by contract grasp idef4 interface based programming interface description language structured programming lepus3 modular programming object association object database object oriented analysis and design object relational impedance mismatch and the third manifesto object relational mapping procedural programming refactoring solid system object model visual foxpro zzt oop jeroo edit references kindler e krivy i 2011 object oriented simulation of systems with sophisticated control international journal of general systems pp 160 313 343 lewis john loftus william 2008 java software solutions foundations of programming design 6th ed pearson education inc isbn 160 0 321 53205 8 section 1 6 object oriented programming mccarthy j brayton r edwards d fox p hodes l luckham d maling k park d et al march 1960 lisp i programmers manual boston massachusetts artificial intelligence group m i t computation center and research laboratory p 160 88f http history siam org sup fox 1960 lisp pdf in the local m i t patois association lists of atomic symbols are also referred to as property lists and atomic symbols are sometimes called objects mccarthy john abrahams paul w edwards daniel j hart swapnil d levin michael i 1962 lisp 1 5 programmer s manual mit press p 160 105 isbn 160 0 262 13011 4 http community computerhistory org scc projects lisp book lisp 201 5 20programmers 20manual pdf object a synonym for atomic symbol dr alan kay on the meaning of object oriented programming 2003 http www purl org stefan ram pub doc kay oop en retrieved 11 february 2010 sutherland i e 30 january 1963 sketchpad a man machine graphical communication system pdf technical report no 296 lincoln laboratory massachusetts institute of technology via defense technical information center stinet dtic mil http handle dtic mil 100 2 ad404549 retrieved 3 november 2007 a b the development of the simula languages kristen nygaard ole johan dahl p 254 uni kl ac at ross doug the first software engineering language lcs ai lab timeline mit computer science and artificial intelligence laboratory http www csail mit edu timeline timeline php query event amp id 19 retrieved 13 may 2010 holmevik jan rune 1994 compiling simula a historical study of technological genesis ieee annals in the history of computing 16 4 25 37 doi 10 1109 85 329756 http www idi ntnu no grupper su publ simula holmevik simula ieeeannals94 pdf retrieved 12 may 2010 hoare c a nov 1965 record handling algol bulletin 21 39 69 doi 10 1145 1061032 1061041 kay alan the early history of smalltalk http gagne homedns org tgagne contrib earlyhistoryst html retrieved 13 september 2007 1995 june visual foxpro 3 0 foxpro evolves from a procedural language to an object oriented language visual foxpro 3 0 introduces a database container seamless client server capabilities support for activex technologies and ole automation and null support summary of fox releases foxpro history web site foxprohistory org 1995 reviewers guide to visual foxpro 3 0 dfpug de armstrong the quarks of object oriented development in descending order of popularity the quarks are inheritance object class encapsulation method message passing polymorphism abstraction pierce benjamin 2002 types and programming languages mit press isbn 160 0 262 16209 1 section 18 1 what is object oriented programming john c mitchell concepts in programming languages cambridge university press 2003 isbn 0 521 78098 5 p 278 michael lee scott programming language pragmatics edition 2 morgan kaufmann 2006 isbn 0 12 633951 1 p 470 vikas poll erik subtyping and inheritance for categorical datatypes http www cs ru nl e poll papers kyoto97 pdf retrieved 5 june 2011 a b abadi martin cardelli luca 1996 a theory of objects springer verlag new york inc isbn 160 0 387 94775 2 http portal acm org citation cfm id 547964 amp dl acm amp coll portal retrieved 21 april 2010 the emerald programming language http www emeraldprogramminglanguage org neward ted 26 june 2006 the vietnam of computer science interoperability happens http blogs tedneward com 2006 06 26 the vietnam of computer science aspx retrieved 2 june 2010 meyer second edition p 230 m trofimov ooop the third o solution open oop first class omg 1993 vol 3 issue 3 p 14 yegge steve 30 march 2006 execution in the kingdom of nouns steve yegge blogspot com http steve yegge blogspot com 2006 03 execution in kingdom of nouns html retrieved 3 july 2010 boronczyk timothy 11 june 2009 what s wrong with oop zaemis blogspot com http zaemis blogspot com 2009 06 whats wrong with oop html retrieved 3 july 2010 ambler scott 1 january 1998 a realistic look at object oriented reuse www drdobbs com http www drdobbs com 184415594 retrieved 4 july 2010 shelly asaf 22 august 2008 flaws of object oriented modeling intel software network http software intel com en us blogs 2008 08 22 flaws of object oriented modeling retrieved 4 july 2010 james justin 1 october 2007 multithreading is a verb not a noun techrepublic com http blogs techrepublic com com programming and development p 518 retrieved 4 july 2010 shelly asaf 22 august 2008 how to multicore programming multiprocessing visual c class design guidelines member functions support microsoft com http support microsoft com scid kb 3ben us 3b558117 retrieved 4 july 2010 robert harper 17 april 2011 some thoughts on teaching fp existential type blog http existentialtype wordpress com 2011 04 17 some advice on teaching fp retrieved 5 december 2011 cardelli luca 1996 bad engineering properties of object oriented languages acm comput surv acm 28 4es 150 doi 10 1145 242224 242415 issn 160 0360 0300 http lucacardelli name papers badpropertiesofoo html retrieved 21 april 2010 stallman richard 16 january 1995 mode inheritance cloning hooks amp oop google groups discussion http groups google com group comp emacs xemacs browse thread thread d0af257a2837640c 37f251537fafbb03 lnk st amp q 22richard stallman 22 oop amp rnum 5 amp hl en 37f251537fafbb03 retrieved 21 june 2008 potok thomas mladen vouk andy rindos 1999 productivity analysis of object oriented software developed in a commercial environment software practice and experience 29 10 833 847 doi 10 1002 sici 1097 024x 199908 29 10 lt 833 aid spe258 gt 3 0 co 2 p http www csm ornl gov v8q homepage papers 20old spetep 20printable pdf retrieved 21 april 2010 c j date introduction to database systems 6th ed page 650 c j date hugh darwen foundation for future database systems the third manifesto 2nd edition stepanov alexander stlport an interview with a stepanov http www stlport org resources stepanovusa html retrieved 21 april 2010 graham paul why arc isn t especially object oriented paulgraham com http www paulgraham com noop html retrieved 13 november 2009 armstrong joe in coders at work reflections on the craft of programming peter seibel ed codersatwork com accessed 13 november 2009 mansfield richard has oop failed 2005 available at 4js com accessed 13 november 2009 mansfield richard oop is much better in theory than in practice 2005 available at devx com accessed 7 january 2010 stevey s blog rants rich hickey jvm languages summit 2009 keynote are we there yet november 2009 teaching fp to freshmen from harper s blog about teaching introductory computer science 1 edit further reading wikiversity has learning materials about object oriented programming at topic object oriented programming weisfeld matt 2009 the object oriented thought process third edition addison wesley isbn 160 0 672 33016 4 schach stephen 2006 object oriented and classical software engineering seventh edition mcgraw hill isbn 160 0 07 319126 4 abadi martin luca cardelli 1998 a theory of objects springer verlag isbn 160 0 387 94775 2 abelson harold gerald jay sussman 1997 structure and interpretation of computer programs mit press isbn 160 0 262 01153 0 http mitpress mit edu sicp armstrong deborah j february 2006 the quarks of object oriented development communications of the acm 49 2 123 128 doi 10 1145 1113034 1113040 issn 160 0001 0782 http portal acm org citation cfm id 1113040 retrieved 8 august 2006 booch grady 1997 object oriented analysis and design with applications addison wesley isbn 160 0 8053 5340 2 eeles peter oliver sims 1998 building business objects john wiley amp sons isbn 160 0 471 19176 0 gamma erich richard helm ralph johnson john vlissides 1995 design patterns elements of reusable object oriented software addison wesley isbn 160 0 201 63361 2 harmon paul william morrissey 1996 the object technology casebook lessons from award winning business applications john wiley amp sons isbn 160 0 471 14717 6 jacobson ivar 1992 object oriented software engineering a use case driven approach addison wesley isbn 160 0 201 54435 0 kay alan the early history of smalltalk http gagne homedns org 7etgagne contrib earlyhistoryst html meyer bertrand 1997 object oriented software construction prentice hall isbn 160 0 13 629155 4 rumbaugh james michael blaha william premerlani frederick eddy william lorensen 1991 object oriented modeling and design prentice hall isbn 160 0 13 629841 9 taylor david a 1992 object oriented information systems planning and implementation john wiley amp sons isbn 160 0 471 54364 0 schreiner axel tobias 1993 object oriented programming with ansi c hanser isbn 160 3 446 17426 5 hdl 1850 8544 edit external links wikibooks has a book on the topic of object oriented programming object oriented programming at the open directory project chapter on implementing oop in the programming language c by david polberger discussion about the flaws of ood oop concepts java tutorials intel blog killing oop v t e types of programming languages array aspect oriented assembly class based compiled concatenative concurrent data structured dataflow declarative domain specific dynamic esoteric event driven extensible functional high level imperative interpreted logic low level machine macro metaprogramming multi paradigm non english based object based object oriented off side rule pipeline procedural prototype based reflective rule based scripting synchronous very high level visual v t e software engineering fields computer programming formal methods requirements analysis software deployment software design software maintenance software testing systems analysis concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software architecture software development methodology software development process software quality software quality assurance software archaeology structured analysis orientations agile aspect oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model rup scrum prototype model spiral model v model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers kent beck grady booch fred brooks barry boehm peter chen ward cunningham ole johan dahl tom demarco martin fowler c a r hoare watts humphrey michael a jackson ivar jacobson james martin stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon victor basili related fields computer science computer engineering enterprise engineering history management project management quality management software ergonomics systems engineering category commons 