this article is about the computer programming paradigm for the method of algorithmic content creation see procedural generation this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed april 2008 programming paradigms action agent oriented aspect oriented automata based component based flow based pipelined concatenative concurrent computing relativistic programming data driven declarative contrast imperative constraint dataflow cell oriented spreadsheets reactive intensional functional logic abductive logic answer set constraint logic functional logic inductive logic end user programming event driven service oriented time driven expression oriented feature oriented function level contrast value level generic imperative contrast declarative procedural language oriented discipline specific domain specific grammar oriented dialecting intentional metaprogramming automatic reflective attribute oriented homoiconic template policy based non structured contrast structured array nondeterministic parallel computing process oriented programming in the large and small semantic structured contrast non structured modular contrast monolithic object oriented by separation of concerns aspect oriented role oriented subject oriented class based prototype based recursive value level contrast function level v t e procedural programming can sometimes be used as a synonym for imperative programming specifying the steps the program must take to reach the desired state but can also refer as in this article to a programming paradigm derived from structured programming based upon the concept of the procedure call procedures also known as routines subroutines methods or functions not to be confused with mathematical functions but similar to those used in functional programming simply contain a series of computational steps to be carried out any given procedure might be called at any point during a program s execution including by other procedures or itself a list of instructions telling a computer step by step what to do usually having a linear order of execution from the first statement to the second and so forth with occasional loops and branches procedural programming languages include c c fortran pascal and basic 1 contents 1 procedures and modularity 2 comparison with imperative programming 3 comparison with object oriented programming 4 comparison with functional programming 5 comparison with logic programming 6 see also 7 references 8 external links edit procedures and modularity main article modular programming modularity is generally desirable especially in large complicated programs inputs are usually specified syntactically in the form of arguments and the outputs delivered as return values scoping is another technique that helps keep procedures strongly modular it prevents the procedure from accessing the variables of other procedures and vice versa including previous instances of itself without explicit authorization less modular procedures often used in small or quickly written programs tend to interact with a large number of variables in the execution environment which other procedures might also modify because of the ability to specify a simple interface to be self contained and to be reused procedures are a convenient vehicle for making pieces of code written by different people or different groups including through programming libraries edit comparison with imperative programming procedural programming languages are also imperative languages because they make explicit references to the state of the execution environment this could be anything from variables which may correspond to processor registers to something like the position of the turtle in the logo programming language edit comparison with object oriented programming the focus of procedural programming is to break down a programming task into a collection of variables data structures and subroutines whereas in object oriented programming it is to break down a programming task into objects that expose behavior methods and data members or attributes using interfaces the most important distinction is that while procedural programming uses procedures to operate on data structures object oriented programming bundles the two together so an object which is an instance of a class operates on its own data structure nomenclature varies between the two although they have similar semantics procedural object oriented procedure method record object module class procedure call message see algorithms data structures programs edit comparison with functional programming the principles of modularity and code reuse in practical functional languages are fundamentally the same as in procedural languages since they both stem from structured programming so for example procedures correspond to functions both allow the reuse of the same code in various parts of the programs and at various points of its execution by the same token procedure calls correspond to function application functions and their invocations are modularly separated from each other in the same manner by the use of function arguments return values and variable scopes the main difference between the styles is that functional programming languages remove or at least deemphasize the imperative elements of procedural programming the feature set of functional languages is therefore designed to support writing programs as much as possible in terms of pure functions whereas procedural languages model execution of the program as a sequence of imperative commands that may implicitly alter shared state functional programming languages model execution as the evaluation of complex expressions that only depend on each other in terms of arguments and return values for this reason functional programs can have a freer order of code execution and the languages may offer little control over the order in which various parts of the program are executed for example the arguments to a procedure invocation in scheme are executed in an arbitrary order functional programming languages support and heavily use first class functions anonymous functions and closures functional programming languages tend to rely on tail call optimization and higher order functions instead of imperative looping constructs many functional languages however are in fact impurely functional and offer imperative procedural constructs that allow the programmer to write programs in procedural style or in a combination of both styles it is common for input output code in functional languages to be written in a procedural style there do exist a few esoteric functional languages like unlambda that eschew structured programming precepts for the sake of being difficult to program in and therefore challenging these languages are the exception to the common ground between procedural and functional languages edit comparison with logic programming in logic programming a program is a set of premises and computation is performed by attempting to prove candidate theorems from this point of view logic programs are declarative focusing on what the problem is rather than on how to solve it however the backward reasoning technique implemented by sld resolution used to solve problems in logic programming languages such as prolog treats programs as goal reduction procedures thus clauses of the form h 160 b 1 b n have a dual interpretation both as procedures to show solve h show solve b 1 and and b n and as logical implications b 1 and and b n implies h experienced logic programmers use the procedural interpretation to write programs that are effective and efficient and they use the declarative interpretation to help ensure that programs are correct edit see also comparison of programming paradigms declarative programming functional programming contrast imperative programming logic programming object oriented programming programming paradigms programming language structured programming sql procedural extensions edit references welcome to ieee xplore 2 0 use of procedural programming languages for controlling production systems ieeexplore ieee org http ieeexplore ieee org xpl freeabs all jsp arnumber 120848 retrieved 2008 04 06 edit external links procedural languages at the open directory project v t e types of programming languages array aspect oriented assembly class based compiled concatenative concurrent data structured dataflow declarative domain specific dynamic esoteric event driven extensible functional high level imperative interpreted logic low level machine macro metaprogramming multi paradigm non english based object based object oriented off side rule pipeline procedural prototype based reflective rule based scripting synchronous very high level visual 