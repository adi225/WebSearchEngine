this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed december 2010 software development process a software engineer programming at work activities and steps requirements specification architecture design implementation testing debugging deployment maintenance methodologies waterfall prototype model incremental iterative v model spiral scrum cleanroom rad dsdm rup xp agile lean dual vee model tdd fdd supporting disciplines configuration management documentation quality assurance sqa project management user experience design tools compiler debugger profiler gui designer ide build automation v t e a software development process also known as a software development life cycle sdlc is a structure imposed on the development of a software product similar terms include software life cycle and software process it is often considered a subset of systems development life cycle there are several models for such processes each describing approaches to a variety of tasks or activities that take place during the process some people consider a life cycle model a more general term and a software development process a more specific term for example there are many specific software development processes that fit the spiral life cycle model iso iec 12207 is an international standard for software life cycle processes it aims to be the standard that defines all the tasks required for developing and maintaining software contents 1 overview 2 software development activities 2 1 planning 2 2 implementation testing and documenting 2 3 deployment and maintenance 3 software development models 3 1 waterfall model 3 2 spiral model 3 3 iterative and incremental development 3 4 agile development 3 5 rapid application development 3 6 code and fix 4 process improvement models 5 formal methods 6 see also 6 1 development methods 6 2 related subjects 7 references 8 external links edit overview the large and growing body of software development organizations implement process methodologies many of them are in the defense industry which in the u s requires a rating based on process models to obtain contracts the international standard for describing the method of selecting implementing and monitoring the life cycle for software is iso iec 12207 a decades long goal has been to find repeatable predictable processes that improve productivity and quality some try to systematize or formalize the seemingly unruly task of writing software others apply project management techniques to writing software without project management software projects can easily be delivered late or over budget with large numbers of software projects not meeting their expectations in terms of functionality cost or delivery schedule effective project management appears to be lacking organizations may create a software engineering process group sepg which is the focal point for process improvement composed of line practitioners who have varied skills the group is at the center of the collaborative effort of everyone in the organization who is involved with software engineering process improvement edit software development activities edit planning planning is an objective of each and every activity where we want to discover things that belong to the project an important task in creating a software program is extracting the requirements or requirements analysis 1 customers typically have an abstract idea of what they want as an end result but not what software should do skilled and experienced software engineers recognize incomplete ambiguous or even contradictory requirements at this point frequently demonstrating live code may help reduce the risk that the requirements are incorrect once the general requirements are gathered from the client an analysis of the scope of the development should be determined and clearly stated this is often called a scope document certain functionality may be out of scope of the project as a function of cost or as a result of unclear requirements at the start of development if the development is done externally this document can be considered a legal document so that if there are ever disputes any ambiguity of what was promised to the client can be clarified edit implementation testing and documenting implementation is the part of the process where software engineers actually program the code for the project software testing is an integral and important phase of the software development process this part of the process ensures that defects are recognized as soon as possible documenting the internal design of software for the purpose of future maintenance and enhancement is done throughout development this may also include the writing of an api be it external or internal the software engineering process chosen by the developing team will determine how much internal documentation if any is necessary plan driven models e g waterfall generally produce more documentation than agile models edit deployment and maintenance deployment starts after the code is appropriately tested approved for release and sold or otherwise distributed into a production environment this may involve installation customization such as by setting parameters to the customer s values testing and possibly an extended period of evaluation citation needed software training and support is important as software is only effective if it is used correctly citation needed maintaining and enhancing software to cope with newly discovered faults or requirements can take substantial time and effort as missed requirements may force redesign of the software citation needed edit software development models several models exist to streamline the development process each one has its pros and cons and it is up to the development team to adopt the most appropriate one for the project sometimes a combination of the models may be more suitable edit waterfall model the activities of the software development process represented in the waterfall model there are several other models to represent this process main article waterfall model the waterfall model shows a process where developers are to follow these phases in order requirements specification requirements analysis software design implementation and integration testing or validation deployment or installation maintenance in a strict waterfall model after each phase is finished it proceeds to the next one reviews may occur before moving to the next phase which allows for the possibility of changes which may involve a formal change control process reviews may also be employed to ensure that the phase is indeed complete the phase completion criteria are often referred to as a gate that the project must pass through to move to the next phase waterfall discourages revisiting and revising any prior phase once it s complete this inflexibility in a pure waterfall model has been a source of criticism by supporters of other more flexible models the waterfall model is also commonly taught with the mnemonic a dance in the dark every monday representing analysis design implementation testing documentation and deployment and maintenance citation needed edit spiral model spiral model boehm 1988 main article spiral model the key characteristic of a spiral model is risk management at regular stages in the development cycle in 1988 barry boehm published a formal software system development spiral model which combines some key aspect of the waterfall model and rapid prototyping methodologies but provided emphasis in a key area many felt had been neglected by other methodologies deliberate iterative risk analysis particularly suited to large scale complex systems the spiral is visualized as a process passing through some number of iterations with the four quadrant diagram representative of the following activities formulate plans to identify software targets implement the program clarify the project development restrictions risk analysis an analytical assessment of selected programs to consider how to identify and eliminate risk implementation of the project the implementation of software development and verification risk driven spiral model emphasizing the conditions of options and constraints in order to support software reuse software quality can help as a special goal of integration into the product development however the spiral model has some restrictive conditions as follows the spiral model emphasizes risk analysis and thus requires customers to accept this analysis and act on it this requires both trust in the developer as well as the willingness to spend more to fix the issues which is the reason why this model is often used for large scale internal software development if the implementation of risk analysis will greatly affect the profits of the project the spiral model should not be used software developers have to actively look for possible risks and analyze it accurately for the spiral model to work the first stage is to formulate a plan to achieve the objectives with these constraints and then strive to find and remove all potential risks through careful analysis and if necessary by constructing a prototype if some risks can not be ruled out the customer has to decide whether to terminate the project or to ignore the risks and continue anyway finally the results are evaluated and the design of the next phase begins edit iterative and incremental development main article iterative and incremental development iterative development 2 prescribes the construction of initially small but ever larger portions of a software project to help all those involved to uncover important issues early before problems or faulty assumptions can lead to disaster edit agile development agile software development poster main article agile software development agile software development uses iterative development as a basis but advocates a lighter and more people centric viewpoint than traditional approaches agile processes use feedback rather than planning as their primary control mechanism the feedback is driven by regular tests and releases of the evolving software there are many variations of agile processes in extreme programming xp the phases are carried out in extremely small or continuous steps compared to the older batch processes the intentionally incomplete first pass through the steps might take a day or a week rather than the months or years of each complete step in the waterfall model first one writes automated tests to provide concrete goals for development next is coding by a pair of programmers which is complete when all the tests pass and the programmers can t think of any more tests that are needed design and architecture emerge out of refactoring and come after coding the same people who do the coding do design only the last feature merging design and code is common to all the other agile processes the incomplete but functional system is deployed or demonstrated for some subset of the users at least one of which is on the development team at this point the practitioners start again on writing tests for the next most important part of the system 3 scrum dynamic systems development method edit rapid application development rapid application development rad model rapid application development r a d is a software development methodology that uses minimal planning in favor of rapid prototyping the planning of software developed using rad is interleaved with writing the software itself the lack of extensive pre planning generally allows software to be written much faster and makes it easier to change requirements rad involves methods like iterative development and software prototyping according to whitten 2004 it is a merger of various structured techniques especially data driven information engineering with prototyping techniques to accelerate software systems development 4 in rapid application development structured techniques and prototyping are especially used to define users requirements and to design the final system the development process starts with the development of preliminary data models and business process models using structured techniques in the next stage requirements are verified using prototyping eventually to refine the data and process models these stages are repeated iteratively further development results in a combined business requirements and technical design statement to be used for constructing new systems 4 edit code and fix code and fix development is not so much a deliberate strategy as an artifact of naivet and schedule pressure on software developers 5 without much of a design in the way programmers immediately begin producing code at some point testing begins often late in the development cycle and the inevitable bugs must then be fixed before the product can be shipped see also continuous integration and cowboy coding edit process improvement models capability maturity model integration the capability maturity model integration cmmi is one of the leading models and based on best practice independent assessments grade organizations on how well they follow their defined processes not on the quality of those processes or the software produced cmmi has replaced cmm iso 9000 iso 9000 describes standards for a formally organized process to manufacture a product and the methods of managing and monitoring progress although the standard was originally created for the manufacturing sector iso 9000 standards have been applied to software development as well like cmmi certification with iso 9000 does not guarantee the quality of the end result only that formalized business processes have been followed iso iec 15504 iso iec 15504 information technology process assessment also known as software process improvement capability determination spice is a framework for the assessment of software processes this standard is aimed at setting out a clear model for process comparison spice is used much like cmmi it models processes to manage control guide and monitor software development this model is then used to measure what a development organization or project team actually does during software development this information is analyzed to identify weaknesses and drive improvement it also identifies strengths that can be continued or integrated into common practice for that organization or team edit formal methods formal methods are mathematical approaches to solving software and hardware problems at the requirements specification and design levels formal methods are most likely to be applied to safety critical or security critical software and systems such as avionics software software safety assurance standards such as do 178b do 178c and common criteria demand formal methods at the highest levels of categorization for sequential software examples of formal methods include the b method the specification languages used in automated theorem proving raise vdm and the z notation formalization of software development is creeping in in other places with the application of object constraint language and specializations such as java modeling language and especially with model driven architecture allowing execution of designs if not specifications for concurrent software and systems petri nets process algebra and finite state machines which are based on automata theory see also virtual finite state machine or event driven finite state machine allow executable software specification and can be used to build up and validate application behavior another emerging trend in software development is to write a specification in some form of logic usually a variation of first order logic fol and then to directly execute the logic as though it were a program the owl language based on description logic dl is an example there is also work on mapping some version of english or another natural language automatically to and from logic and executing the logic directly examples are attempto controlled english and internet business logic which do not seek to control the vocabulary or syntax a feature of systems that support bidirectional english logic mapping and direct execution of the logic is that they can be made to explain their results in english at the business or scientific level edit see also edit development methods chaos model extreme programming iconix uml based object modeling with use cases incremental funding methodology model driven engineering service oriented modeling software prototyping specification and description language top down and bottom up design unified process user experience v model software development verification and validation software edit related subjects bachelor of science in information technology best coding practices conceptual model cost estimation in software engineering ipo model list of software development philosophies method engineering outline of software engineering performance engineering process computing programming paradigm programming productivity project rapid application development service oriented modeling software design software development software documentation software release life cycle systems design systems development life cycle test effort edit references ralph p and wand y a proposal for a formal definition of the design concept in lyytinen k loucopoulos p mylopoulos j and robinson w eds design requirements engineering a ten year perspective springer verlag 2009 pp 103 136 ieeecomputersociety org kent beck extreme programming 2000 a b whitten jeffrey l lonnie d bentley kevin c dittman 2003 systems analysis and design methods 6th edition isbn 0 256 19906 x mcconnell steve 7 lifecycle planning rapid development redmond washington microsoft press p 160 140 edit external links gerhard fischer the software technology of the 21st century from software reuse to collaborative software design 2001 lydia ash the web testing companion the insider s guide to efficient and effective tests wiley may 2 2003 isbn 0 471 43021 8 saassdlc com software as a service systems development life cycle project software development life cycle sdlc visual image software development life cycle heraprocess org hera is a light process solution for managing web projects v t e software engineering fields computer programming formal methods requirements analysis software deployment software design software maintenance software testing systems analysis concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software architecture software development methodology software development process software quality software quality assurance software archaeology structured analysis orientations agile aspect oriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model rup scrum prototype model spiral model v model waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml sysml software engineers kent beck grady booch fred brooks barry boehm peter chen ward cunningham ole johan dahl tom demarco martin fowler c a r hoare watts humphrey michael a jackson ivar jacobson james martin stephen j mellor bertrand meyer david parnas winston w royce james rumbaugh niklaus wirth edward yourdon victor basili related fields computer science computer engineering enterprise engineering history management project management quality management software ergonomics systems engineering category commons 