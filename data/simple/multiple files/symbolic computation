not to be confused with symbolic execution in mathematics and computer science computer algebra also called symbolic computation or algebraic computation is a scientific area that refers to the study and development of algorithms and software for manipulating mathematical expressions and other mathematical objects although properly speaking computer algebra should be a subfield of scientific computing they are generally considered as a distinct field because scientific computing is usually based on numerical computation with approximate floating point numbers while computer algebra emphasizes on exact computation with expressions containing variables that have not any given value and are thus manipulated as symbols therefore the name of symbolic computation software applications that perform symbolic calculations are called computer algebra systems with the term system alluding to the complexity of the main applications that include at least a method to represent mathematical data in a computer a user programming language usually different of the language used for the implementation a dedicated memory manager a user interface for the input output of mathematical expressions a large set of routines to perform usual operations like simplification of expressions differentiation using chain rule polynomial factorization indefinite integration at the beginning of computer algebra circa 1970 when the long known algorithms were first put on computers they turned out to be highly inefficient 1 therefore a large part of the work of the searchers in the field consisted in revisiting classical algebra in order to make it effective and to discover efficient algorithms to implement this effectiveness a typical example of this kind of work is the computation of polynomial greatest common divisors which is required to simplify fractions almost everything in that article that is behind the classical euclid s algorithm has been introduced for the need of computer algebra computer algebra is widely used to experiment in mathematics and to design the formulas that are used in numerical programs it is also used for complete scientific computations when purely numerical methods fail like in public key cryptography or for some non linear problems contents 1 terminology 2 scientific community 3 computer science aspects 3 1 data representation 3 1 1 numbers 3 1 2 expressions 3 2 simplification 4 mathematical aspects 4 1 equality 4 2 normal form for rational fractions 5 further reading 6 see also 7 references edit terminology some authors distinguish computer algebra from symbolic computation using the latter name to refer to kinds of symbolic computation other than the computation with mathematical formulas some authors use symbolic computation for the computer science aspect of the subject and computer algebra for the mathematical aspect 2 in some languages the name of the field is not a direct translation of its english name typically it is called calcul formel in french which means formal computation symbolic computation has also been referred to in the past as symbolic manipulation algebraic manipulation symbolic processing symbolic mathematics or symbolic algebra but these terms which also refer to non computational manipulation are no more in use for referring to computer algebra edit scientific community there is no learned society that is specific to computer algebra but this function is assumed by the special interest group of the association for computing machinery named sigsam special interest group on symbolic and algebraic manipulation 3 there are several annual conferences on computer algebra the premier being issac international symposium on symbolic and algebraic computation which is regularly sponsored by sigsam 4 there are several journals specializing in computer algebra the top one being journal of symbolic computation founded in 1985 by bruno buchberger 5 there are also several other journals that regularly publish articles in computer algebra 6 edit computer science aspects this section does not cite any references or sources please help improve this section by adding citations to reliable sources unsourced material may be challenged and removed november 2012 edit data representation as numerical softwares are highly efficient for approximate numerical computation it is common in computer algebra to emphasize on exact computation with exactly represented data such an exact representation implies that even when the size of the output is small then the intermediate data that are generated during a computation may grow in an unpredictable way this behavior is called expression swell to obviate to this problem various methods are used in the representation of the data as well as in the algorithms that manipulate them edit numbers the usual numbers systems used in numerical computation are either the floating point numbers and the integers of a fixed bounded size that are improperly called integers by most programming languages none is convenient for computer algebra because of the expression swell therefore the basic numbers used in computer algebra are the integers of the mathematicians commonly represented by a unbounded signed sequence of digits in some base of numeration usually the largest base allowed by the machine word these integers allow to define the rational numbers which are irreducible fractions of two integers programming an efficient implementation of the arithmetic operations is a hard task therefore most free computer algebra systems and some commercial ones like maple software use gmp library which is thus a de facto standard edit expressions except for numbers and variables every mathematical expression may be viewed as the symbol of an operator followed by a sequence of operands in computer algebra software the expressions are usually represented in this way this representation is very flexible and many things that seem not to be mathematical expressions at first glance may be represented and manipulated as such for example an equation is an expression with as an operator a matrix may be represented as an expression with matrix as an operator and its rows as operands even programs may be considered and represented as expressions with operator procedure and at least two operands the list of parameters and the body which is itself an expression with body as an operator and a sequence of instructions as operands conversely any mathematical expression may be viewed as a program for example the expression a b may be viewed as a program for the addition with a and b as parameters executing this program consists in evaluating the expression for given values of a and b if they do not have any value that is they are indeterminates the result of the evaluation is simply its input this process of delayed evaluation is fundamental in computer algebra for example the operator of the equations is also in most computer algebra systems the name of the program of the equality test normally the evaluation of an equation results in an equation but when an equality test is needed either explicitly asked by the user through an evaluation to a boolean command or automatically started by the system in the case of a test inside a program then the evaluation to a boolean 0 or 1 is executed as the size of the operands of an expression is unpredictable and may change during a working session the sequence of the operands is usually represented as a sequence of either pointers like in macsyma or entries in a hash table like in maple edit simplification the raw application of the basic rules of derivation with respect to x on the expression gives the result such an awful expression is clearly not acceptable and a procedure of simplification is needed as soon as one works with general expressions this simplification is normally done through rewriting rules there are several classes of rewriting rules that have to be considered the simplest one consist in the rewriting rules that always reduce the size of the expression like e 0 or sin 0 0 they are systematically applied in the computer algebra systems the first difficulty occurs with associative operations like addition and multiplication the standard way to deal with associativity is to consider that addition and multiplication have an arbitrary number of operands that is that a b c is represented as a b c what about a b c to deal with this problem the simplest way is to rewrite systematically e e f e f as respectively 1 e e 1 f e f 1 in other word in the internal representation of the expressions there are none subtraction nor division nor unary minus outside the representation of the numbers a second difficulty occurs with the commutativity of addition and multiplication the problem is to recognize quickly the like terms in order to combine or canceling them in fact the method for finding like terms consisting of testing every pair of terms is too costly for being practicable with very long sums and products for solving this problem macsyma sorts the operands of sums and products with a function of comparison that is designed in order that like terms are in consecutive places and thus easily detected in maple the hash function is designed for generating collisions when like terms are entered allowing to combine them as soon as they are introduced this design of the hash function allows also to recognize immediately the expressions of subexpressions that appear several times in a computation and to store them only once this allows not only to save some memory space but also to speed up the computations by avoiding to repeat the same computation on several identical expressions some rewriting rules sometimes increase and sometimes decrease the size of the expressions to which they are applied this is the case of distributivity or trigonometric identities for example the distributivity law allows rewriting and as there is no way to make a good general choice of applying or not such a rewriting rule such rewritings are done only when explicitly asked by the user for the distributivity the computer function that apply this rewriting rule is generally called expand the reverse rewriting rule called factor requires a non trivial algorithm which is thus a key function in computer algebra systems see polynomial factorization edit mathematical aspects in this section we consider some fundamental mathematical questions that arise as soon as one want to manipulate mathematical expressions in a computer we consider mainly the case of the multivariate rational fractions this is not a real restriction because as soon as the irrational functions appearing in an expression are simplified they are usually considered as new indeterminates for example is viewed as a polynomial in and edit equality there are two notions of equality for mathematical expressions the syntactic equality is the equality of the expressions which means that they are written or represented in a computer in the same way as trivial it is rarely considered by mathematicians but it is the only equality that is easy to test with a program the semantic equality is when two expressions represent the same mathematical object like in it is known that there may not exist a algorithm that decides if two expressions representing numbers are semantically equal if exponentials and logarithms are allowed in the expressions therefore semantical equality may be tested only on some classes of expressions such as the polynomials and the rational fractions to test the equality of two expressions instead to design a specific algorithm it is usual to put them in some canonical form or to put their difference in a normal form and to test the syntactic equality of the result unlike in usual mathematics canonical form and normal form are not synonymous in computer algebra a canonical form is such that two expressions in canonical form are semantically equal if and only if they are syntactically equal while a normal form is such that an expression in normal form is semantically zero only if it is syntactically zero in other words zero has a unique representation by expressions in normal form normal forms are usually preferred in computer algebra for several reasons firstly canonical forms may be more costly to compute than normal forms for example to put a polynomial in canonical form one has to expand by distributivity every product while it is not necessary with a normal form see below secondly it may be the case like for expressions involving radicals that a canonical form if it exists depends on some arbitrary choices and that these choices may be different for two expressions that have been computed independently this may make impracticable the use of a canonical form edit normal form for rational fractions in this section we describe a frequently used normal form for multivariate rational fractions edit further reading for a detailed definition of the subject symbolic computation an editorial bruno buchberger journal of symbolic computation 1985 1 pp 1 6 edit see also automated theorem prover computer assisted proof proof checker model checker symbolic numeric computation symbolic simulation edit references kaltofen erich 1982 factorization of polynomials in b buchberger r loos g collins computer algebra springer verlag http citeseerx ist psu edu viewdoc download doi 10 1 1 39 7916 amp rep rep1 amp type pdf retrieved september 20 2012 making computer algebra more symbolic invited stephen m watt pp 43 49 proc transgressive computing 2006 a conference in honor or jean della dora tc 2006 april 24 26 2006 granada spain sigsam official site sigsam list of conferences cohen joel s 2003 computer algebra and symbolic computation mathematical methods ak peters ltd p 160 14 isbn 160 978 1 56881 159 8 sigsam list of journals davenport james h siret yvon tournier velyne 1988 computer algebra systems and algorithms for algebraic computation translated from the french by a davenport and j h davenport academic press isbn 160 978 0 12 204230 0 von zur gathen joachim gerhard j rgen 2003 modern computer algebra second ed cambridge university press isbn 160 0 521 82646 2 geddes k o czapor s r labahn g 1992 algorithms for computer algebra doi 10 1007 b102438 isbn 160 978 0 7923 9259 0 buchberger bruno collins george edwin loos r diger et al eds 1983 computer algebra computing supplementa 4 doi 10 1007 978 3 7091 7551 4 isbn 160 978 3 211 81776 6 