for subroutine oriented programming see procedural programming programming paradigms action agent oriented aspect oriented automata based component based flow based pipelined concatenative concurrent computing relativistic programming data driven declarative contrast imperative constraint dataflow cell oriented spreadsheets reactive intensional functional logic abductive logic answer set constraint logic functional logic inductive logic end user programming event driven service oriented time driven expression oriented feature oriented function level contrast value level generic imperative contrast declarative procedural language oriented discipline specific domain specific grammar oriented dialecting intentional metaprogramming automatic reflective attribute oriented homoiconic template policy based non structured contrast structured array nondeterministic parallel computing process oriented programming in the large and small semantic structured contrast non structured modular contrast monolithic object oriented by separation of concerns aspect oriented role oriented subject oriented class based prototype based recursive value level contrast function level v t e in computer science functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state and mutable data it emphasizes the application of functions in contrast to the imperative programming style which emphasizes changes in state 1 functional programming has its roots in lambda calculus a formal system developed in the 1930s to investigate computability the entscheidungsproblem function definition function application and recursion many functional programming languages can be viewed as elaborations on the lambda calculus 1 in practice the difference between a mathematical function and the notion of a function used in imperative programming is that imperative functions can have side effects that may change the value of program state because of this they lack referential transparency i e the same language expression can result in different values at different times depending on the state of the executing program conversely in functional code the output value of a function depends only on the arguments that are input to the function so calling a function f twice with the same value for an argument x will produce the same result f x both times eliminating side effects can make it much easier to understand and predict the behavior of a program which is one of the key motivations for the development of functional programming 1 functional programming languages especially purely functional ones such as the pioneering hope have largely been emphasized in academia rather than in commercial software development however prominent functional programming languages such as common lisp scheme 2 3 4 5 islisp clojure racket 6 erlang 7 8 9 ocaml 10 11 haskell 12 13 scala 14 and f 15 16 have been used in industrial and commercial applications by a wide variety of organizations functional programming is also supported in some domain specific programming languages like r statistics 17 18 mathematica symbolic and numeric math 19 j k and q from kx systems financial analysis xquery xslt xml 20 21 and opal 22 widespread domain specific declarative languages like sql and lex yacc use some elements of functional programming especially in eschewing mutable values 23 programming in a functional style can also be accomplished in languages that aren t specifically designed for functional programming for example the imperative perl programming language has been the subject of a book describing how to apply functional programming concepts 24 c 3 0 added constructs to facilitate the functional style contents 1 history 2 concepts 2 1 first class and higher order functions 2 2 pure functions 2 3 recursion 2 4 strict versus non strict evaluation 2 5 type systems 2 6 functional programming in non functional languages 3 comparison to imperative programming 3 1 simulating state 3 2 efficiency issues 3 3 coding styles 3 3 1 haskell 3 3 2 erlang 3 3 3 lisp 4 use in industry 5 see also 6 references 7 further reading 8 external links edit history lambda calculus provides a theoretical framework for describing functions and their evaluation although it is a mathematical abstraction rather than a programming language it forms the basis of almost all functional programming languages today an equivalent theoretical formulation combinatory logic is commonly perceived as more abstract than lambda calculus and preceded it in invention it is used in some esoteric languages including unlambda combinatory logic and lambda calculus were both originally developed to achieve a clearer approach to the foundations of mathematics 25 an early functional flavored language was lisp developed by john mccarthy while at massachusetts institute of technology mit for the ibm 700 7000 series scientific computers in the late 1950s 26 lisp introduced many features now found in functional languages though lisp is technically a multi paradigm language scheme and dylan were later attempts to simplify and improve lisp information processing language ipl is sometimes cited as the first computer based functional programming language 27 it is an assembly style language for manipulating lists of symbols it does have a notion of generator which amounts to a function accepting a function as an argument and since it is an assembly level language code can be used as data so ipl can be regarded as having higher order functions however it relies heavily on mutating list structure and similar imperative features kenneth e iverson developed apl in the early 1960s described in his 1962 book a programming language isbn 9780471430148 apl was the primary influence on john backus s fp in the early 1990s iverson and roger hui created j in the mid 1990s arthur whitney who had previously worked with iverson created k which is used commercially in financial industries along with its descendant q john backus presented fp in his 1977 turing award lecture can programming be liberated from the von neumann style a functional style and its algebra of programs 28 he defines functional programs as being built up in a hierarchical way by means of combining forms that allow an algebra of programs in modern language this means that functional programs follow the principle of compositionality backus s paper popularized research into functional programming though it emphasized function level programming rather than the lambda calculus style which has come to be associated with functional programming in the 1970s ml was created by robin milner at the university of edinburgh and david turner developed initially the language sasl at the university of st andrews and later the language miranda at the university of kent ml eventually developed into several dialects the most common of which are now ocaml and standard ml also in the 1970s the development of scheme a partly functional dialect of lisp as described in the influential lambda papers and the 1985 textbook structure and interpretation of computer programs brought awareness of the power of functional programming to the wider programming languages community in the 1980s per martin l f developed intuitionistic type theory also called constructive type theory which associated functional programs with constructive proofs of arbitrarily complex mathematical propositions expressed as dependent types this led to powerful new approaches to interactive theorem proving and has influenced the development of many subsequent functional programming languages the haskell language began with a consensus in 1987 to form an open standard for functional programming research implementation releases have been ongoing since 1990 edit concepts a number of concepts and paradigms are specific to functional programming and generally foreign to imperative programming including object oriented programming however programming languages are often hybrids of several programming paradigms so programmers using mostly imperative languages may have utilized some of these concepts 29 edit first class and higher order functions main articles first class function and higher order function higher order functions are functions that can either take other functions as arguments or return them as results in calculus an example of a higher order function is the differential operator which returns the derivative of a function higher order functions are closely related to first class functions in that higher order functions and first class functions both allow functions as arguments and results of other functions the distinction between the two is subtle higher order describes a mathematical concept of functions that operate on other functions while first class is a computer science term that describes programming language entities that have no restriction on their use thus first class functions can appear anywhere in the program that other first class entities like numbers can including as arguments to other functions and as their return values higher order functions enable partial application or currying a technique in which a function is applied to its arguments one at a time with each application returning a new function that accepts the next argument this allows one to succinctly express for example the successor function as the addition operator partially applied to the natural number one edit pure functions purely functional functions or expressions have no side effects memory or i o this means that pure functions have several useful properties many of which can be used to optimize the code if the result of a pure expression is not used it can be removed without affecting other expressions if a pure function is called with parameters that cause no side effects the result is constant with respect to that parameter list sometimes called referential transparency i e if the pure function is again called with the same parameters the same result will be returned this can enable caching optimizations such as memoization if there is no data dependency between two pure expressions then their order can be reversed or they can be performed in parallel and they cannot interfere with one another in other terms the evaluation of any pure expression is thread safe if the entire language does not allow side effects then any evaluation strategy can be used this gives the compiler freedom to reorder or combine the evaluation of expressions in a program for example using deforestation while most compilers for imperative programming languages detect pure functions and perform common subexpression elimination for pure function calls they cannot always do this for pre compiled libraries which generally do not expose this information thus preventing optimizations that involve those external functions some compilers such as gcc add extra keywords for a programmer to explicitly mark external functions as pure to enable such optimizations fortran 95 also allows functions to be designated pure edit recursion main article recursion computer science iteration looping in functional languages is usually accomplished via recursion recursive functions invoke themselves allowing an operation to be performed over and over until the base case is reached though some recursion requires maintaining a stack tail recursion can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages the scheme language standard requires implementations to recognize and optimize tail recursion tail recursion optimization can be implemented by transforming the program into continuation passing style during compiling among other approaches common patterns of recursion can be factored out using higher order functions with catamorphisms and anamorphisms or folds and unfolds being the most obvious examples such higher order functions play a role analogous to built in control structures such as loops in imperative languages most general purpose functional programming languages allow unrestricted recursion and are turing complete which makes the halting problem undecidable can cause unsoundness of equational reasoning and generally requires the introduction of inconsistency into the logic expressed by the language s type system some special purpose languages such as coq allow only well founded recursion and are strongly normalizing nonterminating computations can be expressed only with infinite streams of values called codata as a consequence these languages fail to be turing complete and expressing certain functions in them is impossible but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion functional programming limited to well founded recursion with a few other constraints is called total functional programming see turner 2004 for more discussion 30 edit strict versus non strict evaluation main article evaluation strategy functional languages can be categorized by whether they use strict eager or non strict lazy evaluation concepts that refer to how function arguments are processed when an expression is being evaluated the technical difference is in the denotational semantics of expressions containing failing or divergent computations under strict evaluation the evaluation of any term containing a failing subterm will itself fail for example the expression print length 2 1 3 2 1 0 5 4 will fail under strict evaluation because of the division by zero in the third element of the list under nonstrict evaluation the length function will return the value 4 i e the number of items in the list since evaluating it will not attempt to evaluate the terms making up the list in brief strict evaluation always fully evaluates function arguments before invoking the function non strict evaluation does not evaluate function arguments unless their values are required to evaluate the function call itself the usual implementation strategy for non strict evaluation in functional languages is graph reduction 31 non strict evaluation is used by default in several pure functional languages including miranda clean and haskell hughes 1984 argues for non strict evaluation as a mechanism for improving program modularity through separation of concerns by easing independent implementation of producers and consumers of data streams 32 launchbury 1993 describes some difficulties that lazy evaluation introduces particularly in analyzing a program s storage requirements and proposes an operational semantics to aid in such analysis 33 harper 2009 proposes including both strict and nonstrict evaluation in the same language using the language s type system to distinguish them 34 edit type systems especially since the development of hindley milner type inference in the 1970s functional programming languages have tended to use typed lambda calculus as opposed to the untyped lambda calculus used in lisp and its variants such as scheme the use of algebraic datatypes and pattern matching makes manipulation of complex data structures convenient and expressive the presence of strong compile time type checking makes programs more reliable while type inference frees the programmer from the need to manually declare types to the compiler some research oriented functional languages such as coq agda cayenne and epigram are based on intuitionistic type theory which allows types to depend on terms such types are called dependent types these type systems do not have decidable type inference and are difficult to understand and program with citation needed but dependent types can express arbitrary propositions in predicate logic through the curry howard isomorphism then well typed programs in these languages become a means of writing formal mathematical proofs from which a compiler can generate certified code while these languages are mainly of interest in academic research including in formalized mathematics they have begun to be used in engineering as well compcert is a compiler for a subset of the c programming language that is written in coq and formally verified 35 a limited form of dependent types called generalized algebraic data types gadt s can be implemented in a way that provides some of the benefits of dependently typed programming while avoiding most of its inconvenience 36 gadt s are available in the glasgow haskell compiler and in scala as case classes and have been proposed as additions to other languages including java and c 37 edit functional programming in non functional languages it is possible to use a functional style of programming in languages that are not traditionally considered functional languages 38 for example both d and fortran 95 explicitly support pure functions 39 first class functions have slowly been added to mainstream languages for example in early 1994 support for lambda filter map and reduce was added to python then during the development of python 3000 guido van rossum called for the removal of these features 40 41 so far only the reduce function has been removed and it remains accessible via the functools standard library module 42 first class functions were also introduced in php 5 3 visual basic 9 c 3 0 and c 11 the language integrated query linq feature with its many incarnations is an obvious and powerful use of functional programming in net in java anonymous classes can sometimes be used to simulate closures citation needed however anonymous classes are not always proper replacements to closures because they have more limited capabilities many object oriented design patterns are expressible in functional programming terms for example the strategy pattern simply dictates use of a higher order function and the visitor pattern roughly corresponds to a catamorphism or fold similarly the idea of immutable data from functional programming is often included in imperative programming languages 43 for example the tuple in python which is an immutable array edit comparison to imperative programming functional programming is very different from imperative programming the most significant differences stem from the fact that functional programming avoids side effects which are used in imperative programming to implement state and i o pure functional programming disallows side effects completely and so provides referential transparency which makes it easier to verify optimize and parallelize programs and easier to write automated tools to perform those tasks higher order functions are rarely used in older imperative programming where a traditional imperative program might use a loop to traverse a list a functional program would use a different technique it would use a higher order function that takes as arguments a function and a list the higher order function would then apply the given function to each element of the given list and then return a new list with the results edit simulating state there are tasks for example maintaining a bank account balance that often seem most naturally implemented with state pure functional programming performs these tasks and i o tasks such as accepting user input and printing to the screen in a different way the pure functional programming language haskell implements them using monads derived from category theory monads offer a way to abstract certain types of computational patterns including but not limited to modeling of computations with mutable state and other side effects such as i o in an imperative manner without losing purity while existing monads may be easy to apply in a program given appropriate templates and examples many students find them difficult to understand conceptually e g when asked to define new monads which is sometimes needed for certain types of libraries 44 another way in which functional languages can simulate state is by passing around a data structure that represents the current state as a parameter to function calls on each function call a copy of this data structure is created with whatever differences are the result of the function this is referred to as state passing style impure functional languages usually include a more direct method of managing mutable state clojure for example uses managed references that can be updated by applying pure functions to the current state this kind of approach enables mutability while still promoting the use of pure functions as the preferred way to express computations alternative methods such as hoare logic and uniqueness have been developed to track side effects in programs some modern research languages use effect systems to make explicit the presence of side effects edit efficiency issues this section may contain original research please improve it by verifying the claims made and adding references statements consisting only of original research may be removed may 2009 functional programming languages are typically less efficient in their use of cpu and memory than imperative languages such as c and pascal 45 this is related to the fact that some mutable data structures like arrays have a very straightforward implementation using present hardware which is a highly evolved turing machine flat arrays may be accessed very efficiently with deeply pipelined cpus prefetched efficiently through caches with no complex pointer chasing or handled with simd instructions and it is not easy to create their equally efficient general purpose immutable counterparts for purely functional languages the worst case slowdown is logarithmic in the number of memory cells used because mutable memory can be represented by a purely functional data structure with logarithmic access time such as a balanced tree 46 however such slowdowns are not universal for programs that perform intensive numerical computations functional languages such as ocaml and clean are only slightly slower than c 47 for programs that handle large matrices and multidimensional databases array functional languages such as j and k were designed with speed optimization immutability of data can in many cases lead to execution efficiency by allowing the compiler to make assumptions that are unsafe in an imperative language thus increasing opportunities for inline expansion citation needed lazy evaluation may also speed up the program even asymptotically whereas it may slow it down at most by a constant factor however it may introduce memory leaks when used improperly launchbury 1993 33 discusses theoretical issues related to memory leaks from lazy evaluation and o sullivan et al 2008 48 give some practical advice for analyzing and fixing them however the most general implementations of lazy evaluation making extensive use of dereferenced code and data perform poorly on modern processors with deep pipelines and multi level caches where a cache miss may cost hundreds of cycles edit coding styles imperative programs tend to emphasize the series of steps taken by a program in carrying out an action while functional programs tend to emphasize the composition and arrangement of functions often without specifying explicit steps a simple example illustrates this with two solutions to the same programming goal calculating fibonacci numbers the imperative example is in c include lt iostream gt fibonacci numbers imperative style int fibonacci int iterations int first 0 second 1 seed values for int i 0 i lt iterations 1 i int sum first second first second second sum return first int main std cout lt lt fibonacci 10 lt lt n return 0 edit haskell a functional version in haskell has a different feel to it fibonacci numbers functional style describe an infinite list based on the recurrence relation for fibonacci numbers fibrecurrence first second first fibrecurrence second first second describe fibonacci list as fibrecurrence with initial values 0 and 1 fibonacci fibrecurrence 0 1 describe action to print the 10th element of the fibonacci list main print fibonacci 10 or more concisely fibonacci2 0 1 zipwith fibonacci2 tail fibonacci2 the imperative style describes the intermediate steps involved in calculating fibonacci n and places those steps inside a loop statement in contrast the functional implementation shown here states the mathematical recurrence relation that defines the entire fibonacci sequence then selects an element from the sequence see also recursion this example relies on haskell s lazy evaluation to create an infinite list of which only as much as needed the first 10 elements in this case will actually be computed that computation happens when the runtime system carries out the action described by main edit erlang the same program in erlang provides a simple example of how functional languages in general do not require their syntax to contain an if statement module fibonacci export start 1 fibonacci numbers in erlang start n gt do fib 0 1 n do fib b 1 gt b do fib a b n gt do fib b a b n 1 this program is contained within a module called fibonacci and declares that the start 1 function will be visible from outside the scope of this module the function start 1 accepts a single parameter as denoted by the 1 syntax and then calls an internal function called do fib 3 in direct contrast to the imperative coding style erlang does not need an if statement because the erlang runtime will examine the parameters being passed to a function and call the first function having a signature that matches the current pattern of parameters erlang syntax does provide an if statement but it is considered syntactic sugar and compared to its usage in imperative languages plays only a minor role in application logic design in this case it is unnecessary to test for a parameter value within the body of the function because such a test is implicitly performed by providing a set of function signatures that describe the different patterns of values that could be received by a function in the case above the first version of do fib 3 will only be called when the third parameter has the precise value of 1 in all other cases the second version of do fib 3 will be called this example demonstrates that functional programming languages often implement conditional logic implicitly by matching parameter patterns rather than explicitly by means of an if statement edit lisp the fibonacci function can be written in common lisp as follows defun fib n amp optional a 0 b 1 if n 0 a fib n 1 b a b the program can then be called as fib 10 edit use in industry functional programming has long been popular in academia but with few industrial applications 49 page 11 however recently several prominent functional programming languages have been used in commercial or industrial systems for example the erlang programming language which was developed by the swedish company ericsson in the late 1980s was originally used to implement fault tolerant telecommunications systems 8 it has since become popular for building a range of applications at companies such as t mobile nortel facebook and edf 7 9 50 51 the scheme dialect of lisp was used as the basis for several applications on early apple macintosh computers 2 3 and has more recently been applied to problems such as training simulation software 4 and telescope control 5 ocaml which was introduced in the mid 1990s has seen commercial use in areas such as financial analysis 10 driver verification industrial robot programming and static analysis of embedded software 11 haskell although initially intended as a research language 13 has also been applied by a range of companies in areas such as aerospace systems hardware design and web programming 12 13 other functional programming languages that have seen use in industry include scala 52 f 15 16 lisp 53 standard ml 54 55 and clojure 56 edit see also comparison of programming paradigms eager evaluation list of functional programming topics nested function edit references a b c hudak paul september 1989 conception evolution and application of functional programming languages pdf acm computing surveys 21 3 359 411 doi 10 1145 72551 72554 http www cs berkeley edu jcondit pl prelim hudak89functional pdf a b clinger will 1987 multitasking and macscheme mactech 3 12 http www mactech com articles mactech vol 03 03 12 multitasking index html retrieved 2008 08 28 a b hartheimer anne 1987 programming a text editor in macscheme toolsmith mactech 3 1 http www mactech com articles mactech vol 03 03 1 schemewindows index html retrieved 2008 08 28 a b kidd eric terrorism response training in scheme cufp 2007 http cufp galois com 2007 abstracts html erickidd retrieved 2009 08 26 a b cleis richard scheme in space cufp 2006 http cufp galois com 2006 abstracts html richardcleis retrieved 2009 08 26 state based scripting in uncharted 2 http www gameenginebook com gdc09 statescripting uncharted2 pdf retrieved 2011 08 08 a b who uses erlang for product development frequently asked questions about erlang http www erlang org faq faq html aen50 retrieved 2007 08 05 a b armstrong joe june 2007 a history of erlang third acm sigplan conference on history of programming languages san diego california http doi acm org 10 1145 1238844 1238850 retrieved 2009 08 29 a b larson jim march 2009 erlang for concurrent programming communications of the acm 52 3 48 doi 10 1145 1467247 1467263 http doi acm org 10 1145 1467247 1467263 retrieved 2009 08 29 a b minsky yaron weeks stephen july 2008 caml trading 160 experiences with functional programming on wall street journal of functional programming cambridge university press 18 4 553 564 doi 10 1017 s095679680800676x http journals cambridge org action displayabstract aid 1899164 retrieved 2008 08 27 a b leroy xavier some uses of caml in industry cufp 2007 http cufp galois com 2007 slides xavierleroy pdf retrieved 2009 08 26 a b haskell in industry haskell wiki http www haskell org haskellwiki haskell in industry retrieved 2009 08 26 haskell has a diverse range of use commercially from aerospace and defense to finance to web startups hardware design firms and lawnmower manufacturers a b c hudak paul hughes j jones s p and wadler p june 2007 a history of haskell being lazy with class third acm sigplan conference on history of programming languages san diego california http doi acm org 10 1145 1238844 1238856 retrieved 2009 08 29 effective scala scala wiki http twitter github com effectivescala sd retrieved 2012 02 21 effective scala a b mansell howard 2008 quantitative finance in f cufp 2008 http cufp galois com 2008 abstracts html mansellhoward retrieved 2009 08 29 a b peake alex 2009 the first substantial line of business application in f cufp 2009 http cufp galois com 2009 abstracts html alexpeakeadamgranicz retrieved 2009 08 29 the user 2006 conference schedule includes papers on the commercial use of r r project org 2006 06 08 http www r project org user 2006 program html retrieved 2011 06 20 chambers john m 1998 programming with data a guide to the s language springer verlag pp 160 67 70 isbn 160 978 0 387 98503 9 department of applied math university of colorado functional vs procedural programming language http amath colorado edu computing mmm funcproc html retrieved 2006 08 28 dimitre novatchev the functional programming language xslt 160 a proof through examples topxml http www topxml com xsl articles fp retrieved may 27 2006 david mertz xml programming paradigms part four functional programming approached to xml processing ibm developerworks http gnosis cx publish programming xml models fp html retrieved may 27 2006 optimized applicative language donald d chamberlin and raymond f boyce 1974 sequel a structured english query language proceedings of the 1974 acm sigfidet 249 264 dominus mark j 2005 higher order perl morgan kaufmann isbn 160 1 55860 701 3 curry haskell brooks robert feys and craig william 1958 combinatory logic volume i amsterdam north holland publishing company mccarthy john june 1978 history of lisp in acm sigplan history of programming languages conference 217 223 doi 10 1145 800025 808387 http citeseer ist psu edu mccarthy78history html the memoir of herbert a simon 1991 models of my life pp 189 190 isbn 0 465 04640 1 claims that he al newell and cliff shaw are commonly adjudged to be the parents of the artificial intelligence field for writing logic theorist a program which proved theorems from principia mathematica automatically in order to accomplish this they had to invent a language and a paradigm which which viewed retrospectively embeds functional programming http www stanford edu class cs242 readings backus pdf dick pountain functional programming comes of age byte com august 1994 http www byte com art 9408 sec11 art1 htm retrieved august 31 2006 turner d a 2004 07 28 total functional programming journal of universal computer science 10 7 751 768 doi 10 3217 jucs 010 07 0751 http www jucs org jucs 10 7 total functional programming the implementation of functional programming languages simon peyton jones published by prentice hall 1987 hughes john 1984 why functional programming matters http www cse chalmers se rjmh papers whyfp html a b john launchbury 1993 a natural semantics for lazy evaluation http citeseerx ist psu edu viewdoc summary doi 10 1 1 35 2016 robert w harper 2009 practical foundations for programming languages http www cs cmu edu rwh plbook book pdf the compcert verified compiler http compcert inria fr doc index html simon peyton jones dimitrios vytiniotis stephanie weirich and geoffrey washburn simple unification based type inference for gadts icfp 2006 pp 160 50 61 http research microsoft com en us um people simonpj papers gadt andrew kennedy and claudio russo october 2005 generalized algebraic data types and object oriented programming oopsla san diego california http research microsoft com akenn generics gadtoop pdf source of citation hartel pieter henk muller and hugh glaser march 2004 the functional c experience pdf the journal of functional programming 14 2 129 135 doi 10 1017 s0956796803004817 http www ub utwente nl webdocs ctit 1 00000084 pdf david mertz functional programming in python part 3 ibm developerworks http www 128 ibm com developerworks linux library l prog3 html retrieved 2006 09 17 part 1 part 2 functions 160 d programming language 2 0 digital mars http www digitalmars com d 2 0 function html pure functions retrieved 2011 06 20 van rossum guido 2005 03 10 the fate of reduce in python 3000 artima com http www artima com weblogs viewpost jsp thread 98196 retrieved 2012 09 27 van rossum guido 2009 04 21 origins of python s functional features the history of python http python history blogspot de 2009 04 origins of pythons functional features html retrieved 2012 09 27 functools higher order functions and operations on callable objects python software foundation 2011 07 31 http docs python org dev library functools html functools reduce retrieved 2011 07 31 bloch joshua effective java second ed pp 160 item 15 newbern j all about monads a comprehensive guide to the theory and practice of monadic programming in haskell http monads haskell cz html index html html retrieved 2008 02 14 lawrence c paulson ml for the working programmer cambridge up 1996 isbn 0 521 56543 x pawel spiewak implementing persistent vectors in scala http www codecommit com blog scala implementing persistent vectors in scala retrieved apr 17 2012 which programs are fastest computer language benchmarks game benchmarksgame alioth debian org http benchmarksgame alioth debian org u32 which programs are fastest php gcc on amp ghc on amp clean on amp ocaml on amp sbcl on amp fsharp on amp racket on amp clojure on amp hipe on amp calc chart retrieved 2011 06 20 chapter 25 profiling and optimization book realworldhaskell org http book realworldhaskell org read profiling and optimization html x ek1 retrieved 2011 06 20 odersky martin spoon lex venners bill december 13 2010 programming in scala a comprehensive step by step guide 2nd ed artima inc pp 160 883 852 isbn 160 978 0 9815316 4 9 http www artima com shop programming in scala 2ed piro christopher 2009 functional programming at facebook cufp 2009 http cufp galois com 2009 abstracts html christopherpiroeugeneletuchy retrieved 2009 08 29 sim diasca a large scale discrete event concurrent simulation engine in erlang november 2011 http research edf com research and the scientific community software sim diasca 80704 html momtahan lee 2009 scala at edf trading implementing a domain specific language for derivative pricing with scala cufp 2009 http cufp galois com 2009 abstracts html leemomtahan retrieved 2009 08 29 graham paul 2003 beating the averages http www paulgraham com avg html retrieved 2009 08 29 sims steve 2006 building a startup with standard ml cufp 2006 http cufp galois com 2006 slides stevesims pdf retrieved 2009 08 29 laurikari ville 2007 functional programming in communications security cufp 2007 http cufp galois com 2007 abstracts html villelaurikari retrieved 2009 08 29 lorimer r j live production clojure application announced http www infoq com news 2009 01 clojure production edit further reading abelson hal sussman gerald jay 1985 structure and interpretation of computer programs mit press http mitpress mit edu sicp cousineau guy and michel mauny the functional approach to programming cambridge uk cambridge university press 1998 curry haskell brooks and feys robert and craig william combinatory logic volume i north holland publishing company amsterdam 1958 curry haskell b hindley j roger seldin jonathan p 1972 combinatory logic vol ii amsterdam north holland isbn 160 0 7204 2208 6 dominus mark jason higher order perl morgan kaufmann 2005 felleisen matthias findler robert flatt matthew krishnamurthi shriram 2001 how to design programs mit press http www htdp org graham paul ansi common lisp englewood cliffs new jersey prentice hall 1996 maclennan bruce j functional programming practice and theory addison wesley 1990 o sullivan brian stewart don goerzen john 2008 real world haskell o reilly http book realworldhaskell org read pratt terrence w and marvin v zelkowitz programming languages design and implementation 3rd ed englewood cliffs new jersey prentice hall 1996 salus peter h functional and logic programming languages vol 4 of handbook of programming languages indianapolis indiana macmillan technical publishing 1998 thompson simon haskell the craft of functional programming harlow england addison wesley longman limited 1996 edit external links listen to this article info dl sorry your browser either has javascript disabled or does not have any supported player you can download the clip or download a player to play the clip in your browser this audio file was created from a revision of the functional programming article dated 2011 08 25 and does not reflect subsequent edits to the article audio help more spoken articles functional programming for the rest of us an introduction by slava akhmechet functional programming in python by david mertz part 1 part 2 part 3 v t e types of programming languages array aspect oriented assembly class based compiled concatenative concurrent data structured dataflow declarative domain specific dynamic esoteric event driven extensible functional high level imperative interpreted logic low level machine macro metaprogramming multi paradigm non english based object based object oriented off side rule pipeline procedural prototype based reflective rule based scripting synchronous very high level visual 