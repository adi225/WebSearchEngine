for other uses see transaction disambiguation this article is about the principles of transaction processing for specific implementations see transaction processing system this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed november 2012 it has been suggested that transaction processing system be merged into this article or section discuss proposed since november 2012 in computer science transaction processing is information processing that is divided into individual indivisible operations called transactions each transaction must succeed or fail as a complete unit it cannot remain in an intermediate state since most though not necessarily all transaction processing today is interactive the term is often treated as synonymous with online transaction processing contents 1 description 2 methodology 2 1 rollback 2 2 rollforward 2 3 deadlocks 2 4 compensating transaction 3 acid criteria 3 1 atomicity 3 2 consistency 3 3 isolation 3 4 durability 4 benefits 5 implementations 6 references 7 see also 8 external references 9 further reading edit description transaction processing is designed to maintain a database integrity typically a database or some modern filesystems in a known consistent state by ensuring that any operations carried out on the system that are interdependent are either all completed successfully or all canceled successfully for example consider a typical banking transaction that involves moving 700 from a customer s savings account to a customer s checking account this transaction is a single operation in the eyes of the bank but it involves at least two separate operations in computer terms debiting the savings account by 700 and crediting the checking account by 700 if the debit operation succeeds but the credit does not or vice versa the books of the bank will not balance at the end of the day there must therefore be a way to ensure that either both operations succeed or both fail so that there is never any inconsistency in the bank s database as a whole transaction processing is designed to provide this transaction processing allows multiple individual operations to be linked together automatically as a single indivisible transaction the transaction processing system ensures that either all operations in a transaction are completed without error or none of them are if some of the operations are completed but errors occur when the others are attempted the transaction processing system rolls back all of the operations of the transaction including the successful ones thereby erasing all traces of the transaction and restoring the system to the consistent known state that it was in before processing of the transaction began if all operations of a transaction are completed successfully the transaction is committed by the system and all changes to the database are made permanent the transaction cannot be rolled back once this is done transaction processing guards against hardware and software errors that might leave a transaction partially completed with the system left in an unknown inconsistent state if the computer system crashes in the middle of a transaction the transaction processing system guarantees that all operations in any uncommitted i e not completely processed transactions are cancelled most of the time transactions are issued concurrently if they overlap i e need to touch the same portion of the database this can create conflicts for example if the customer mentioned in the example above has 150 in his savings account and attempts to transfer 100 to a different person while at the same time moving 100 to the checking account only one of them can succeed however forcing transactions to be processed sequentially i e without overlapping in time is inefficient therefore concurrent implementations of transaction processing usually guarantee that the end result reflects a conflict free outcome that can be reached as if executing the transactions sequentially in any order a property called serializability in our example this means that no matter which transaction was issued first either the transfer to a different person or the move to the checking account has succeeded while the other one has failed edit methodology the basic principles of all transaction processing systems are the same however the terminology may vary from one transaction processing system to another and the terms used below are not necessarily universal edit rollback main article rollback data management transaction processing systems ensure database integrity by recording intermediate states of the database as it is modified then using these records to restore the database to a known state if a transaction cannot be committed for example copies of information on the database prior to its modification by a transaction are set aside by the system before the transaction can make any modifications this is sometimes called a before image if any part of the transaction fails before it is committed these copies are used to restore the database to the state it was in before the transaction began edit rollforward it is also possible to keep a separate journal of all modifications to a database sometimes called after images this is not required for rollback of failed transactions but it is useful for updating the database in the event of a database failure so some transaction processing systems provide it if the database fails entirely it must be restored from the most recent back up the back up will not reflect transactions committed since the back up was made however once the database is restored the journal of after images can be applied to the database rollforward to bring the database up to date any transactions in progress at the time of the failure can then be rolled back the result is a database in a consistent known state that includes the results of all transactions committed up to the moment of failure edit deadlocks main article deadlock in some cases two transactions may in the course of their processing attempt to access the same portion of a database at the same time in a way that prevents them from proceeding for example transaction a may access portion x of the database and transaction b may access portion y of the database if at that point transaction a then tries to access portion y of the database while transaction b tries to access portion x a deadlock occurs and neither transaction can move forward transaction processing systems are designed to detect these deadlocks when they occur typically both transactions will be cancelled and rolled back and then they will be started again in a different order automatically so that the deadlock doesn t occur again or sometimes just one of the deadlocked transactions will be cancelled rolled back and automatically re started after a short delay deadlocks can also occur between three or more transactions the more transactions involved the more difficult they are to detect to the point that transaction processing systems find there is a practical limit to the deadlocks they can detect edit compensating transaction in systems where commit and rollback mechanisms are not available or undesirable a compensating transaction is often used to undo failed transactions and restore the system to a previous state edit acid criteria main article acid jim gray defined properties of a reliable transaction system in the late 1970s under the acronym acid atomicity consistency isolation and durability 1 edit atomicity main article atomicity database systems a transaction s changes to the state are atomic either all happen or none happen these changes include database changes messages and actions on transducers edit consistency consistency a transaction is a correct transformation of the state the actions taken as a group do not violate any of the integrity constraints associated with the state edit isolation even though transactions execute concurrently it appears to each transaction t that others executed either before t or after t but not both edit durability once a transaction completes successfully commits its changes to the state survive failures edit benefits transaction processing has these benefits it allows sharing of computer resources among many users it shifts the time of job processing to when the computing resources are less busy it avoids idling the computing resources without minute by minute human interaction and supervision it is used on expensive classes of computers to help amortize the cost by keeping high rates of utilization of those expensive resources edit implementations main article transaction processing system standard transaction processing software notably ibm s information management system was first developed in the 1960s and was often closely coupled to particular database management systems client server computing implemented similar principles in the 1980s with mixed success however in more recent years the distributed client server model has become considerably more difficult to maintain as the number of transactions grew in response to various online services especially the web a single distributed database was not a practical solution in addition most online systems consist of a whole suite of programs operating together as opposed to a strict client server model where the single server could handle the transaction processing today a number of transaction processing systems are available that work at the inter program level and which scale to large systems including mainframes one well known citation needed and open industry standard is the x open distributed transaction processing dtp see also jta the java transaction api however proprietary transaction processing environments such as ibm s cics are still very popular citation needed although cics has evolved to include open industry standards as well a modern transaction processing implementation combines elements of both object oriented persistence with traditional transaction monitoring citation needed one such implementation is the commercial dts s1 product from obsidian dynamics or the open source product db4o the term extreme transaction processing xtp has been used to describe transaction processing systems with uncommonly challenging requirements particularly throughput requirements transactions per second such systems may be implemented via distributed or cluster style architectures edit references gray jim reuter andreas transaction processing concepts and techniques powerpoint http research microsoft com gray wics 99 tp 01 whirlwindtour ppt retrieved nov 12 2012 edit see also audit trail compensating transaction concurrent programming database transaction extreme transaction processing xtp ibm txseries cics on distributed platforms java ee e g websphere application server java transaction api jta two phase commit transaction processing management system tpms transaction processing performance council tpc telecommunication application transaction processing benchmark tatp edit external references nuts and bolts of transaction processing edit further reading gerhard weikum gottfried vossen transactional information systems theory algorithms and the practice of concurrency control and recovery morgan kaufmann 2002 isbn 1 55860 508 8 jim gray andreas reuter transaction processing 160 concepts and techniques 1993 morgan kaufmann isbn 1 55860 190 2 philip a bernstein eric newcomer principles of transaction processing 1997 morgan kaufmann isbn 1 55860 415 4 ahmed k elmagarmid editor transaction models for advanced database applications morgan kaufmann 1992 isbn 1 55860 214 3 v t e database management systems database models database normalization database storage distributed dbms federated database system referential integrity relational algebra relational calculus relational database relational dbms relational model object relational database transaction processing concepts database acid crud null candidate key foreign key primary key superkey surrogate key armstrong s axioms objects relation table column row view transaction log trigger index stored procedure cursor partition components concurrency control data dictionary jdbc xqj odbc query language query optimizer query plan functions administration and automation query optimization replication database products object oriented comparison relational comparison document oriented nosql newsql 